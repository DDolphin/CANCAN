
AdaSdBig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800e848  0800e848  0001e848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f008  0800f008  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f008  0800f008  0001f008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f010  0800f010  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f010  0800f010  0001f010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f014  0800f014  0001f014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  200001e0  0800f1f4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200014a0  0800f1f4  000214a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f70  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e2  00000000  00000000  0003617c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00039260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000241ef  00000000  00000000  0003b038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010066  00000000  00000000  0005f227  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfe93  00000000  00000000  0006f28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  0013f19c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e82c 	.word	0x0800e82c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e82c 	.word	0x0800e82c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b091      	sub	sp, #68	; 0x44
 8000f8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 febd 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f8b9 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 f9ef 	bl	8001378 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9a:	f000 f9c5 	bl	8001328 <MX_DMA_Init>
  MX_RTC_Init();
 8000f9e:	f000 f97d 	bl	800129c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000fa2:	f000 f9a1 	bl	80012e8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000fa6:	f005 f82b 	bl	8006000 <MX_FATFS_Init>
  MX_CRC_Init();
 8000faa:	f000 f963 	bl	8001274 <MX_CRC_Init>
  MX_CAN1_Init();
 8000fae:	f000 f92d 	bl	800120c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb6:	f000 ff1b 	bl	8001df0 <HAL_Delay>
  GetRtcSecond();
 8000fba:	f000 fa75 	bl	80014a8 <GetRtcSecond>

  InitBSP();
 8000fbe:	f000 fa91 	bl	80014e4 <InitBSP>

  sprintf((char*)log_path,"/20%02d%02d%02d_%02d%02d%02d.asc",(int)dateVar.Year,(int)dateVar.Month,(int)dateVar.Date,(int)timeVar.Hours,(int)timeVar.Minutes,(int)timeVar.Seconds );
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <main+0x15c>)
 8000fc4:	78db      	ldrb	r3, [r3, #3]
 8000fc6:	461d      	mov	r5, r3
 8000fc8:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <main+0x15c>)
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	461e      	mov	r6, r3
 8000fce:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <main+0x15c>)
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <main+0x160>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <main+0x160>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	461c      	mov	r4, r3
 8000fe0:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <main+0x160>)
 8000fe2:	789b      	ldrb	r3, [r3, #2]
 8000fe4:	f107 0018 	add.w	r0, r7, #24
 8000fe8:	9303      	str	r3, [sp, #12]
 8000fea:	9402      	str	r4, [sp, #8]
 8000fec:	9101      	str	r1, [sp, #4]
 8000fee:	9200      	str	r2, [sp, #0]
 8000ff0:	4633      	mov	r3, r6
 8000ff2:	462a      	mov	r2, r5
 8000ff4:	493d      	ldr	r1, [pc, #244]	; (80010ec <main+0x164>)
 8000ff6:	f00a fd25 	bl	800ba44 <siprintf>
  sprintf((char*)buf,"INI TFILE");
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <main+0x168>)
 8000ffe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001000:	c303      	stmia	r3!, {r0, r1}
 8001002:	801a      	strh	r2, [r3, #0]
  InitToFile(log_path, strlen(log_path), buf, strlen(buf));
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f8e1 	bl	80001d0 <strlen>
 800100e:	4604      	mov	r4, r0
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8dc 	bl	80001d0 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	1d3a      	adds	r2, r7, #4
 800101c:	f107 0018 	add.w	r0, r7, #24
 8001020:	4621      	mov	r1, r4
 8001022:	f000 fa89 	bl	8001538 <InitToFile>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2118      	movs	r1, #24
 800102a:	4832      	ldr	r0, [pc, #200]	; (80010f4 <main+0x16c>)
 800102c:	f002 f8ac 	bl	8003188 <HAL_GPIO_WritePin>
	  //raw_sec = GetRtcSecond();
	  //raw_sec = 10000;
	  GetRtcSecond();
 8001030:	f000 fa3a 	bl	80014a8 <GetRtcSecond>
	    //if ( raw_sec == 0 ) {
	   //   BlinkLED(100, 5);
	   // } else {

	  microseconds = (float)timeVar.Seconds+ (float)(32768-timeVar.SubSeconds)/(32768);
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <main+0x160>)
 8001036:	789b      	ldrb	r3, [r3, #2]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <main+0x160>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001050:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80010f8 <main+0x170>
 8001054:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <main+0x174>)
 800105e:	edc3 7a00 	vstr	s15, [r3]
	      // Convert temperature to decimal format (without float conversion)

	      sprintf((char*)buf,
	    		  "%02d:%02d:%.4f\r\n",
				  (int)timeVar.Hours,(int)timeVar.Minutes,(float)microseconds);
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <main+0x160>)
 8001064:	781b      	ldrb	r3, [r3, #0]
	      sprintf((char*)buf,
 8001066:	461d      	mov	r5, r3
				  (int)timeVar.Hours,(int)timeVar.Minutes,(float)microseconds);
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <main+0x160>)
 800106a:	785b      	ldrb	r3, [r3, #1]
	      sprintf((char*)buf,
 800106c:	461e      	mov	r6, r3
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <main+0x174>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa68 	bl	8000548 <__aeabi_f2d>
 8001078:	4603      	mov	r3, r0
 800107a:	460c      	mov	r4, r1
 800107c:	1d38      	adds	r0, r7, #4
 800107e:	e9cd 3400 	strd	r3, r4, [sp]
 8001082:	4633      	mov	r3, r6
 8001084:	462a      	mov	r2, r5
 8001086:	491e      	ldr	r1, [pc, #120]	; (8001100 <main+0x178>)
 8001088:	f00a fcdc 	bl	800ba44 <siprintf>
	      // Print temperature to console
	      //CDC_Transmit_FS((uint8_t*)buf, strlen(buf));

	      // Turn LED on while writing to file

	      fres = AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f89d 	bl	80001d0 <strlen>
 8001096:	4604      	mov	r4, r0
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f898 	bl	80001d0 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	1d3a      	adds	r2, r7, #4
 80010a4:	f107 0018 	add.w	r0, r7, #24
 80010a8:	4621      	mov	r1, r4
 80010aa:	f000 fae1 	bl	8001670 <AppendToFile>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	      HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2118      	movs	r1, #24
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <main+0x16c>)
 80010ba:	f002 f865 	bl	8003188 <HAL_GPIO_WritePin>

	      // If error writing to card, blink 3 times
	      if ( fres != FR_OK) {
 80010be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00a      	beq.n	80010dc <main+0x154>
		      sprintf((char*)buf,
 80010c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	490d      	ldr	r1, [pc, #52]	; (8001104 <main+0x17c>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00a fcb8 	bl	800ba44 <siprintf>
		    		  "%d\n",
					  fres);
		      //AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
		      //CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
	        BlinkLED(100, 3);
 80010d4:	2103      	movs	r1, #3
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f000 fb66 	bl	80017a8 <BlinkLED>
	  //HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_SET);
	  //HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin, GPIO_PIN_SET);
	  //HAL_Delay(1000);
	  //HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
	  //HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_RESET);
	  HAL_Delay(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 fe87 	bl	8001df0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80010e2:	e7a0      	b.n	8001026 <main+0x9e>
 80010e4:	200002ac 	.word	0x200002ac
 80010e8:	20000338 	.word	0x20000338
 80010ec:	0800e848 	.word	0x0800e848
 80010f0:	0800e86c 	.word	0x0800e86c
 80010f4:	40021000 	.word	0x40021000
 80010f8:	47000000 	.word	0x47000000
 80010fc:	200002a8 	.word	0x200002a8
 8001100:	0800e878 	.word	0x0800e878
 8001104:	0800e88c 	.word	0x0800e88c

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b098      	sub	sp, #96	; 0x60
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f009 fe48 	bl	800adac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <SystemClock_Config+0xfc>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <SystemClock_Config+0xfc>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <SystemClock_Config+0xfc>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <SystemClock_Config+0x100>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <SystemClock_Config+0x100>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <SystemClock_Config+0x100>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001172:	2305      	movs	r3, #5
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001184:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001188:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800118a:	2304      	movs	r3, #4
 800118c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800118e:	23a8      	movs	r3, #168	; 0xa8
 8001190:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001196:	2307      	movs	r3, #7
 8001198:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 f80c 	bl	80031bc <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011aa:	f000 fb23 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2105      	movs	r1, #5
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fa65 	bl	800369c <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011d8:	f000 fb0c 	bl	80017f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011dc:	2302      	movs	r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fc14 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80011f6:	f000 fafd 	bl	80017f4 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3760      	adds	r7, #96	; 0x60
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_CAN1_Init+0x60>)
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <MX_CAN1_Init+0x64>)
 8001214:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_CAN1_Init+0x60>)
 8001218:	2210      	movs	r2, #16
 800121a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_CAN1_Init+0x60>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_CAN1_Init+0x60>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_CAN1_Init+0x60>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_CAN1_Init+0x60>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = ENABLE;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_CAN1_Init+0x60>)
 8001236:	2201      	movs	r2, #1
 8001238:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_CAN1_Init+0x60>)
 800123c:	2201      	movs	r2, #1
 800123e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_CAN1_Init+0x60>)
 8001242:	2200      	movs	r2, #0
 8001244:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_CAN1_Init+0x60>)
 8001248:	2200      	movs	r2, #0
 800124a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_CAN1_Init+0x60>)
 800124e:	2200      	movs	r2, #0
 8001250:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_CAN1_Init+0x60>)
 8001254:	2200      	movs	r2, #0
 8001256:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_CAN1_Init+0x60>)
 800125a:	f000 fdeb 	bl	8001e34 <HAL_CAN_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001264:	f000 fac6 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200003d0 	.word	0x200003d0
 8001270:	40006400 	.word	0x40006400

08001274 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_CRC_Init+0x20>)
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <MX_CRC_Init+0x24>)
 800127c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_CRC_Init+0x20>)
 8001280:	f001 fa17 	bl	80026b2 <HAL_CRC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800128a:	f000 fab3 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002b0 	.word	0x200002b0
 8001298:	40023000 	.word	0x40023000

0800129c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_RTC_Init+0x44>)
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <MX_RTC_Init+0x48>)
 80012a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_RTC_Init+0x44>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 0;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_RTC_Init+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 32767;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_RTC_Init+0x44>)
 80012b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_RTC_Init+0x44>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_RTC_Init+0x44>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_RTC_Init+0x44>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_RTC_Init+0x44>)
 80012ce:	f002 fc85 	bl	8003bdc <HAL_RTC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80012d8:	f000 fa8c 	bl	80017f4 <Error_Handler>
//  {
//    Error_Handler();
//  }
  /* USER CODE END RTC_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200002b8 	.word	0x200002b8
 80012e4:	40002800 	.word	0x40002800

080012e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 80012ee:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <MX_SDIO_SD_Init+0x3c>)
 80012f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000034c 	.word	0x2000034c
 8001324:	40012c00 	.word	0x40012c00

08001328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_DMA_Init+0x4c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <MX_DMA_Init+0x4c>)
 8001338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <MX_DMA_Init+0x4c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	203b      	movs	r0, #59	; 0x3b
 8001350:	f001 f979 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001354:	203b      	movs	r0, #59	; 0x3b
 8001356:	f001 f992 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2045      	movs	r0, #69	; 0x45
 8001360:	f001 f971 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001364:	2045      	movs	r0, #69	; 0x45
 8001366:	f001 f98a 	bl	800267e <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b41      	ldr	r3, [pc, #260]	; (8001498 <MX_GPIO_Init+0x120>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <MX_GPIO_Init+0x120>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <MX_GPIO_Init+0x120>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <MX_GPIO_Init+0x120>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a39      	ldr	r2, [pc, #228]	; (8001498 <MX_GPIO_Init+0x120>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <MX_GPIO_Init+0x120>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <MX_GPIO_Init+0x120>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a32      	ldr	r2, [pc, #200]	; (8001498 <MX_GPIO_Init+0x120>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <MX_GPIO_Init+0x120>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MX_GPIO_Init+0x120>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <MX_GPIO_Init+0x120>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_GPIO_Init+0x120>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <MX_GPIO_Init+0x120>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a24      	ldr	r2, [pc, #144]	; (8001498 <MX_GPIO_Init+0x120>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <MX_GPIO_Init+0x120>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_GPIO_Init+0x120>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <MX_GPIO_Init+0x120>)
 8001424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_GPIO_Init+0x120>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2118      	movs	r1, #24
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <MX_GPIO_Init+0x124>)
 800143c:	f001 fea4 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8001440:	2318      	movs	r3, #24
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001444:	2311      	movs	r3, #17
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4811      	ldr	r0, [pc, #68]	; (800149c <MX_GPIO_Init+0x124>)
 8001458:	f001 fce4 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800145c:	2310      	movs	r3, #16
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001464:	2302      	movs	r3, #2
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_GPIO_Init+0x128>)
 8001470:	f001 fcd8 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800147e:	2302      	movs	r3, #2
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_GPIO_Init+0x12c>)
 800148a:	f001 fccb 	bl	8002e24 <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	; 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40021000 	.word	0x40021000
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40021800 	.word	0x40021800

080014a8 <GetRtcSecond>:

/* USER CODE BEGIN 4 */
void GetRtcSecond(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

    //  HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
//  if(HAL_RTC_WaitForSynchro(&hrtc) == HAL_OK){


        if (HAL_RTC_GetTime(&hrtc,&timeVar,RTC_FORMAT_BIN) != HAL_OK)
 80014ac:	2200      	movs	r2, #0
 80014ae:	490a      	ldr	r1, [pc, #40]	; (80014d8 <GetRtcSecond+0x30>)
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <GetRtcSecond+0x34>)
 80014b2:	f002 fc24 	bl	8003cfe <HAL_RTC_GetTime>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <GetRtcSecond+0x18>
        {
          Error_Handler();
 80014bc:	f000 f99a 	bl	80017f4 <Error_Handler>
        }
        if (HAL_RTC_GetDate(&hrtc,&dateVar,RTC_FORMAT_BIN) != HAL_OK)
 80014c0:	2200      	movs	r2, #0
 80014c2:	4907      	ldr	r1, [pc, #28]	; (80014e0 <GetRtcSecond+0x38>)
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <GetRtcSecond+0x34>)
 80014c6:	f002 fc78 	bl	8003dba <HAL_RTC_GetDate>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <GetRtcSecond+0x2c>
        {
          Error_Handler();
 80014d0:	f000 f990 	bl	80017f4 <Error_Handler>
        }

        //return timeVar.SubSeconds;
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000338 	.word	0x20000338
 80014dc:	200002b8 	.word	0x200002b8
 80014e0:	200002ac 	.word	0x200002ac

080014e4 <InitBSP>:


FRESULT InitBSP(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0


	  // Re-initialize SD
	  if(!BSPInited){
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <InitBSP+0x48>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d11a      	bne.n	8001526 <InitBSP+0x42>
		  if ( BSP_SD_Init() != MSD_OK ) {
 80014f0:	f004 fda0 	bl	8006034 <BSP_SD_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <InitBSP+0x20>
			  BSPInited = 1;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <InitBSP+0x48>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
		    return FR_NOT_READY;
 8001500:	2303      	movs	r3, #3
 8001502:	e010      	b.n	8001526 <InitBSP+0x42>
		  }
		  // Re-initialize FATFS
		  if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <InitBSP+0x4c>)
 8001506:	f009 fb53 	bl	800abb0 <FATFS_UnLinkDriver>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <InitBSP+0x30>
		    return FR_NOT_READY;
 8001510:	2303      	movs	r3, #3
 8001512:	e008      	b.n	8001526 <InitBSP+0x42>
		  }
		  if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
 8001514:	4906      	ldr	r1, [pc, #24]	; (8001530 <InitBSP+0x4c>)
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <InitBSP+0x50>)
 8001518:	f009 fb02 	bl	800ab20 <FATFS_LinkDriver>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <InitBSP+0x42>
		    return FR_NOT_READY;
 8001522:	2303      	movs	r3, #3
 8001524:	e7ff      	b.n	8001526 <InitBSP+0x42>
		  }
	  }


}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200001fc 	.word	0x200001fc
 8001530:	20000404 	.word	0x20000404
 8001534:	0800e8fc 	.word	0x0800e8fc

08001538 <InitToFile>:


// Init string to file given at path
FRESULT InitToFile(char* path, size_t path_len, char* msg, size_t msg_len) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	f5ad 5d8e 	sub.w	sp, sp, #4544	; 0x11c0
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	f107 0410 	add.w	r4, r7, #16
 8001546:	3c04      	subs	r4, #4
 8001548:	6020      	str	r0, [r4, #0]
 800154a:	f107 0010 	add.w	r0, r7, #16
 800154e:	3808      	subs	r0, #8
 8001550:	6001      	str	r1, [r0, #0]
 8001552:	f107 0110 	add.w	r1, r7, #16
 8001556:	390c      	subs	r1, #12
 8001558:	600a      	str	r2, [r1, #0]
 800155a:	f107 0210 	add.w	r2, r7, #16
 800155e:	3a10      	subs	r2, #16
 8001560:	6013      	str	r3, [r2, #0]
  FILINFO myINFO;
  DWORD temp;


  // Mount filesystem
  stat = f_mount(&fs, SDPath, 0);
 8001562:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8001566:	2200      	movs	r2, #0
 8001568:	4940      	ldr	r1, [pc, #256]	; (800166c <InitToFile+0x134>)
 800156a:	4618      	mov	r0, r3
 800156c:	f008 fb62 	bl	8009c34 <f_mount>
 8001570:	4603      	mov	r3, r0
 8001572:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001576:	f102 020f 	add.w	r2, r2, #15
 800157a:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 800157c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001580:	f103 030f 	add.w	r3, r3, #15
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00a      	beq.n	80015a0 <InitToFile+0x68>
    f_mount(0, SDPath, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	4937      	ldr	r1, [pc, #220]	; (800166c <InitToFile+0x134>)
 800158e:	2000      	movs	r0, #0
 8001590:	f008 fb50 	bl	8009c34 <f_mount>
    return stat;
 8001594:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001598:	f103 030f 	add.w	r3, r3, #15
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	e05f      	b.n	8001660 <InitToFile+0x128>
  }

  // Open file for appending
  stat = f_open(&myFILE, path, FA_WRITE | FA_OPEN_APPEND);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	3b04      	subs	r3, #4
 80015a6:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80015aa:	3818      	subs	r0, #24
 80015ac:	2232      	movs	r2, #50	; 0x32
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	f008 fb86 	bl	8009cc0 <f_open>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015ba:	f102 020f 	add.w	r2, r2, #15
 80015be:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 80015c0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80015c4:	f103 030f 	add.w	r3, r3, #15
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <InitToFile+0xac>
    f_mount(0, SDPath, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	4926      	ldr	r1, [pc, #152]	; (800166c <InitToFile+0x134>)
 80015d2:	2000      	movs	r0, #0
 80015d4:	f008 fb2e 	bl	8009c34 <f_mount>
    return stat;
 80015d8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80015dc:	f103 030f 	add.w	r3, r3, #15
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	e03d      	b.n	8001660 <InitToFile+0x128>
  }


  // Write message to end of file
  stat = f_write(&myFILE, msg, msg_len, &testByte);
 80015e4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80015e8:	3b1c      	subs	r3, #28
 80015ea:	f107 0210 	add.w	r2, r7, #16
 80015ee:	3a10      	subs	r2, #16
 80015f0:	f107 0110 	add.w	r1, r7, #16
 80015f4:	390c      	subs	r1, #12
 80015f6:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80015fa:	3818      	subs	r0, #24
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	6809      	ldr	r1, [r1, #0]
 8001600:	f008 fee2 	bl	800a3c8 <f_write>
 8001604:	4603      	mov	r3, r0
 8001606:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800160a:	f102 020f 	add.w	r2, r2, #15
 800160e:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 8001610:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001614:	f103 030f 	add.w	r3, r3, #15
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00a      	beq.n	8001634 <InitToFile+0xfc>
    f_mount(0, SDPath, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	4912      	ldr	r1, [pc, #72]	; (800166c <InitToFile+0x134>)
 8001622:	2000      	movs	r0, #0
 8001624:	f008 fb06 	bl	8009c34 <f_mount>
    return stat;
 8001628:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800162c:	f103 030f 	add.w	r3, r3, #15
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	e015      	b.n	8001660 <InitToFile+0x128>
//	return stat;
//  }


  // Sync, close file, unmount
  stat = f_close(&myFILE);
 8001634:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001638:	3b18      	subs	r3, #24
 800163a:	4618      	mov	r0, r3
 800163c:	f009 f9fa 	bl	800aa34 <f_close>
 8001640:	4603      	mov	r3, r0
 8001642:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001646:	f102 020f 	add.w	r2, r2, #15
 800164a:	7013      	strb	r3, [r2, #0]
  f_mount(0, SDPath, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	4907      	ldr	r1, [pc, #28]	; (800166c <InitToFile+0x134>)
 8001650:	2000      	movs	r0, #0
 8001652:	f008 faef 	bl	8009c34 <f_mount>

  return stat;
 8001656:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800165a:	f103 030f 	add.w	r3, r3, #15
 800165e:	781b      	ldrb	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	f507 578e 	add.w	r7, r7, #4544	; 0x11c0
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	20000404 	.word	0x20000404

08001670 <AppendToFile>:


// Append string to file given at path
FRESULT AppendToFile(char* path, size_t path_len, char* msg, size_t msg_len) {
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	f5ad 5d8e 	sub.w	sp, sp, #4544	; 0x11c0
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	f107 0410 	add.w	r4, r7, #16
 800167e:	3c04      	subs	r4, #4
 8001680:	6020      	str	r0, [r4, #0]
 8001682:	f107 0010 	add.w	r0, r7, #16
 8001686:	3808      	subs	r0, #8
 8001688:	6001      	str	r1, [r0, #0]
 800168a:	f107 0110 	add.w	r1, r7, #16
 800168e:	390c      	subs	r1, #12
 8001690:	600a      	str	r2, [r1, #0]
 8001692:	f107 0210 	add.w	r2, r7, #16
 8001696:	3a10      	subs	r2, #16
 8001698:	6013      	str	r3, [r2, #0]
  FILINFO myINFO;
  DWORD temp;


  // Mount filesystem
  stat = f_mount(&fs, SDPath, 0);
 800169a:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800169e:	2200      	movs	r2, #0
 80016a0:	4940      	ldr	r1, [pc, #256]	; (80017a4 <AppendToFile+0x134>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f008 fac6 	bl	8009c34 <f_mount>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016ae:	f102 020f 	add.w	r2, r2, #15
 80016b2:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 80016b4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80016b8:	f103 030f 	add.w	r3, r3, #15
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <AppendToFile+0x68>
    f_mount(0, SDPath, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	4937      	ldr	r1, [pc, #220]	; (80017a4 <AppendToFile+0x134>)
 80016c6:	2000      	movs	r0, #0
 80016c8:	f008 fab4 	bl	8009c34 <f_mount>
    return stat;
 80016cc:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80016d0:	f103 030f 	add.w	r3, r3, #15
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	e05f      	b.n	8001798 <AppendToFile+0x128>
  }

  // Open file for appending
  stat = f_open(&myFILE, path, FA_WRITE | FA_OPEN_APPEND);
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	3b04      	subs	r3, #4
 80016de:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80016e2:	3818      	subs	r0, #24
 80016e4:	2232      	movs	r2, #50	; 0x32
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	f008 faea 	bl	8009cc0 <f_open>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016f2:	f102 020f 	add.w	r2, r2, #15
 80016f6:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 80016f8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80016fc:	f103 030f 	add.w	r3, r3, #15
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00a      	beq.n	800171c <AppendToFile+0xac>
    f_mount(0, SDPath, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	4926      	ldr	r1, [pc, #152]	; (80017a4 <AppendToFile+0x134>)
 800170a:	2000      	movs	r0, #0
 800170c:	f008 fa92 	bl	8009c34 <f_mount>
    return stat;
 8001710:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001714:	f103 030f 	add.w	r3, r3, #15
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	e03d      	b.n	8001798 <AppendToFile+0x128>
  }


  // Write message to end of file
  stat = f_write(&myFILE, msg, msg_len, &testByte);
 800171c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001720:	3b1c      	subs	r3, #28
 8001722:	f107 0210 	add.w	r2, r7, #16
 8001726:	3a10      	subs	r2, #16
 8001728:	f107 0110 	add.w	r1, r7, #16
 800172c:	390c      	subs	r1, #12
 800172e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001732:	3818      	subs	r0, #24
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	6809      	ldr	r1, [r1, #0]
 8001738:	f008 fe46 	bl	800a3c8 <f_write>
 800173c:	4603      	mov	r3, r0
 800173e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001742:	f102 020f 	add.w	r2, r2, #15
 8001746:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 8001748:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800174c:	f103 030f 	add.w	r3, r3, #15
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <AppendToFile+0xfc>
    f_mount(0, SDPath, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	4912      	ldr	r1, [pc, #72]	; (80017a4 <AppendToFile+0x134>)
 800175a:	2000      	movs	r0, #0
 800175c:	f008 fa6a 	bl	8009c34 <f_mount>
    return stat;
 8001760:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001764:	f103 030f 	add.w	r3, r3, #15
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	e015      	b.n	8001798 <AppendToFile+0x128>
//	return stat;
//  }

  //temp = get_fattime();
  // Sync, close file, unmount
  stat = f_close(&myFILE);
 800176c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001770:	3b18      	subs	r3, #24
 8001772:	4618      	mov	r0, r3
 8001774:	f009 f95e 	bl	800aa34 <f_close>
 8001778:	4603      	mov	r3, r0
 800177a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800177e:	f102 020f 	add.w	r2, r2, #15
 8001782:	7013      	strb	r3, [r2, #0]
  f_mount(0, SDPath, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	4907      	ldr	r1, [pc, #28]	; (80017a4 <AppendToFile+0x134>)
 8001788:	2000      	movs	r0, #0
 800178a:	f008 fa53 	bl	8009c34 <f_mount>

  return stat;
 800178e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001792:	f103 030f 	add.w	r3, r3, #15
 8001796:	781b      	ldrb	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	f507 578e 	add.w	r7, r7, #4544	; 0x11c0
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	20000404 	.word	0x20000404

080017a8 <BlinkLED>:

    return f_utime(obj, &fno);
}

// Blink onboard LED
void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  for ( int i = 0; i < num_blinks; i++ ) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e012      	b.n	80017e0 <BlinkLED+0x38>
    //HAL_GPIO_WritePin(GPIOA, 7, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2118      	movs	r1, #24
 80017be:	480c      	ldr	r0, [pc, #48]	; (80017f0 <BlinkLED+0x48>)
 80017c0:	f001 fce2 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fb13 	bl	8001df0 <HAL_Delay>
    //HAL_GPIO_WritePin(GPIOA, 7, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2118      	movs	r1, #24
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <BlinkLED+0x48>)
 80017d0:	f001 fcda 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fb0b 	bl	8001df0 <HAL_Delay>
  for ( int i = 0; i < num_blinks; i++ ) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3301      	adds	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbe8      	blt.n	80017ba <BlinkLED+0x12>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fa:	e7fe      	b.n	80017fa <Error_Handler+0x6>

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_MspInit+0x58>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <HAL_MspInit+0x58>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_MspInit+0x58>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_MspInit+0x58>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_MspInit+0x58>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_MspInit+0x58>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2005      	movs	r0, #5
 8001840:	f000 ff01 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001844:	2005      	movs	r0, #5
 8001846:	f000 ff1a 	bl	800267e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <HAL_CAN_MspInit+0xa4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d13c      	bne.n	80018f4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_CAN_MspInit+0xa8>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_CAN_MspInit+0xa8>)
 8001884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_CAN_MspInit+0xa8>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_CAN_MspInit+0xa8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a18      	ldr	r2, [pc, #96]	; (8001900 <HAL_CAN_MspInit+0xa8>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_CAN_MspInit+0xa8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018c4:	2309      	movs	r3, #9
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <HAL_CAN_MspInit+0xac>)
 80018d0:	f001 faa8 	bl	8002e24 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2014      	movs	r0, #20
 80018da:	f000 feb4 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018de:	2014      	movs	r0, #20
 80018e0:	f000 fecd 	bl	800267e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2015      	movs	r0, #21
 80018ea:	f000 feac 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80018ee:	2015      	movs	r0, #21
 80018f0:	f000 fec5 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40006400 	.word	0x40006400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000

08001908 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_CRC_MspInit+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10d      	bne.n	8001936 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_CRC_MspInit+0x40>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_CRC_MspInit+0x40>)
 8001924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_CRC_MspInit+0x40>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023000 	.word	0x40023000
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_RTC_MspInit+0x24>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d102      	bne.n	8001964 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RTC_MspInit+0x28>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40002800 	.word	0x40002800
 8001974:	42470e3c 	.word	0x42470e3c

08001978 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a68      	ldr	r2, [pc, #416]	; (8001b38 <HAL_SD_MspInit+0x1c0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	f040 80c9 	bne.w	8001b2e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019aa:	6453      	str	r3, [r2, #68]	; 0x44
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a5e      	ldr	r2, [pc, #376]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a57      	ldr	r2, [pc, #348]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_SD_MspInit+0x1c4>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a02:	230c      	movs	r3, #12
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	484c      	ldr	r0, [pc, #304]	; (8001b40 <HAL_SD_MspInit+0x1c8>)
 8001a0e:	f001 fa09 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a12:	2304      	movs	r3, #4
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a22:	230c      	movs	r3, #12
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4845      	ldr	r0, [pc, #276]	; (8001b44 <HAL_SD_MspInit+0x1cc>)
 8001a2e:	f001 f9f9 	bl	8002e24 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001a32:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a34:	4a45      	ldr	r2, [pc, #276]	; (8001b4c <HAL_SD_MspInit+0x1d4>)
 8001a36:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a4c:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a52:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a54:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a66:	2220      	movs	r2, #32
 8001a68:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a70:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a72:	2204      	movs	r2, #4
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a78:	2203      	movs	r2, #3
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a84:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001a8c:	482e      	ldr	r0, [pc, #184]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001a8e:	f000 fe2d 	bl	80026ec <HAL_DMA_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001a98:	f7ff feac 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa2:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <HAL_SD_MspInit+0x1d0>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <HAL_SD_MspInit+0x1dc>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001ab0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001ad4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ad8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001adc:	2220      	movs	r2, #32
 8001ade:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001ae8:	2204      	movs	r2, #4
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001aee:	2203      	movs	r2, #3
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001af4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001afc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001b02:	4813      	ldr	r0, [pc, #76]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001b04:	f000 fdf2 	bl	80026ec <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001b0e:	f7ff fe71 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_SD_MspInit+0x1d8>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2031      	movs	r0, #49	; 0x31
 8001b24:	f000 fd8f 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001b28:	2031      	movs	r0, #49	; 0x31
 8001b2a:	f000 fda8 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	20000248 	.word	0x20000248
 8001b4c:	40026458 	.word	0x40026458
 8001b50:	200002d8 	.word	0x200002d8
 8001b54:	400264a0 	.word	0x400264a0

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f904 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <CAN1_RX0_IRQHandler+0x10>)
 8001bc2:	f000 fa32 	bl	800202a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200003d0 	.word	0x200003d0

08001bd0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <CAN1_RX1_IRQHandler+0x10>)
 8001bd6:	f000 fa28 	bl	800202a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003d0 	.word	0x200003d0

08001be4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <SDIO_IRQHandler+0x10>)
 8001bea:	f002 fc11 	bl	8004410 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000034c 	.word	0x2000034c

08001bf8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <DMA2_Stream3_IRQHandler+0x10>)
 8001bfe:	f000 fe9d 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000248 	.word	0x20000248

08001c0c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <DMA2_Stream6_IRQHandler+0x10>)
 8001c12:	f000 fe93 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200002d8 	.word	0x200002d8

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f009 f882 	bl	800ad58 <__errno>
 8001c54:	4602      	mov	r2, r0
 8001c56:	230c      	movs	r3, #12
 8001c58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20020000 	.word	0x20020000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	20000200 	.word	0x20000200
 8001c88:	200014a0 	.word	0x200014a0

08001c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <SystemInit+0x28>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <SystemInit+0x28>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SystemInit+0x28>)
 8001ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cbe:	e003      	b.n	8001cc8 <LoopCopyDataInit>

08001cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cc6:	3104      	adds	r1, #4

08001cc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd0:	d3f6      	bcc.n	8001cc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd4:	e002      	b.n	8001cdc <LoopFillZerobss>

08001cd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cd8:	f842 3b04 	str.w	r3, [r2], #4

08001cdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce0:	d3f9      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffd3 	bl	8001c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f009 f83d 	bl	800ad64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff f94d 	bl	8000f88 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cf4:	0800f018 	.word	0x0800f018
  ldr  r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cfc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001d00:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001d04:	200014a0 	.word	0x200014a0

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fc7b 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fd5c 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fc93 	bl	800269a <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 fc5b 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	200003f8 	.word	0x200003f8

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200003f8 	.word	0x200003f8

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_Delay+0x40>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000008 	.word	0x20000008

08001e34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0ed      	b.n	8002022 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fd00 	bl	8001858 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0202 	bic.w	r2, r2, #2
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e68:	f7ff ffb6 	bl	8001dd8 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e6e:	e012      	b.n	8001e96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e70:	f7ff ffb2 	bl	8001dd8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b0a      	cmp	r3, #10
 8001e7c:	d90b      	bls.n	8001e96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2205      	movs	r2, #5
 8001e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0c5      	b.n	8002022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e5      	bne.n	8001e70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb4:	f7ff ff90 	bl	8001dd8 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eba:	e012      	b.n	8001ee2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ebc:	f7ff ff8c 	bl	8001dd8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b0a      	cmp	r3, #10
 8001ec8:	d90b      	bls.n	8001ee2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2205      	movs	r2, #5
 8001eda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e09f      	b.n	8002022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0e5      	beq.n	8001ebc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e007      	b.n	8001f1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7e5b      	ldrb	r3, [r3, #25]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d108      	bne.n	8001f34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e007      	b.n	8001f44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e9b      	ldrb	r3, [r3, #26]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e007      	b.n	8001f6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0220 	bic.w	r2, r2, #32
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7edb      	ldrb	r3, [r3, #27]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0210 	bic.w	r2, r2, #16
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e007      	b.n	8001f98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0210 	orr.w	r2, r2, #16
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7f1b      	ldrb	r3, [r3, #28]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0208 	orr.w	r2, r2, #8
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e007      	b.n	8001fc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7f5b      	ldrb	r3, [r3, #29]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0204 	orr.w	r2, r2, #4
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e007      	b.n	8001fec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	ea42 0103 	orr.w	r1, r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b08a      	sub	sp, #40	; 0x28
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d07c      	beq.n	800216a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d023      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2201      	movs	r2, #1
 8002080:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f97d 	bl	800238c <HAL_CAN_TxMailbox0CompleteCallback>
 8002092:	e016      	b.n	80020c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
 80020a6:	e00c      	b.n	80020c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	e002      	b.n	80020c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f983 	bl	80023c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d024      	beq.n	8002116 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f95d 	bl	80023a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80020e6:	e016      	b.n	8002116 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	e00c      	b.n	8002116 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	e002      	b.n	8002116 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f963 	bl	80023dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d024      	beq.n	800216a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002128:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f93d 	bl	80023b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800213a:	e016      	b.n	800216a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	e00c      	b.n	800216a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	e002      	b.n	800216a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f943 	bl	80023f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00c      	beq.n	800218e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002184:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2210      	movs	r2, #16
 800218c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2208      	movs	r2, #8
 80021a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f934 	bl	8002418 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f91b 	bl	8002404 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00c      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2210      	movs	r2, #16
 80021f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2208      	movs	r2, #8
 800220c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f916 	bl	8002440 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f8fd 	bl	800242c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2210      	movs	r2, #16
 800224c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f900 	bl	8002454 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f8f9 	bl	8002468 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d075      	beq.n	800236c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d06c      	beq.n	8002364 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d03d      	beq.n	8002364 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d038      	beq.n	8002364 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f8:	2b30      	cmp	r3, #48	; 0x30
 80022fa:	d017      	beq.n	800232c <HAL_CAN_IRQHandler+0x302>
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	d804      	bhi.n	800230a <HAL_CAN_IRQHandler+0x2e0>
 8002300:	2b10      	cmp	r3, #16
 8002302:	d009      	beq.n	8002318 <HAL_CAN_IRQHandler+0x2ee>
 8002304:	2b20      	cmp	r3, #32
 8002306:	d00c      	beq.n	8002322 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002308:	e024      	b.n	8002354 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800230a:	2b50      	cmp	r3, #80	; 0x50
 800230c:	d018      	beq.n	8002340 <HAL_CAN_IRQHandler+0x316>
 800230e:	2b60      	cmp	r3, #96	; 0x60
 8002310:	d01b      	beq.n	800234a <HAL_CAN_IRQHandler+0x320>
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	d00f      	beq.n	8002336 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002316:	e01d      	b.n	8002354 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002320:	e018      	b.n	8002354 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f043 0310 	orr.w	r3, r3, #16
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232a:	e013      	b.n	8002354 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	f043 0320 	orr.w	r3, r3, #32
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002334:	e00e      	b.n	8002354 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800233e:	e009      	b.n	8002354 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002348:	e004      	b.n	8002354 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002352:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002362:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2204      	movs	r2, #4
 800236a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f87c 	bl	800247c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002384:	bf00      	nop
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff29 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff3e 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff8e 	bl	8002584 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5d 	bl	8002530 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff31 	bl	80024f4 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa2 	bl	80025ec <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e00e      	b.n	80026e2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	795b      	ldrb	r3, [r3, #5]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff f917 	bl	8001908 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff fb6e 	bl	8001dd8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fb55 	bl	8001dd8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fa9d 	bl	8002d30 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa54 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_DMA_Start_IT+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Start_IT+0xa8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12f      	bne.n	80028e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9e6 	bl	8002c68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	223f      	movs	r2, #63	; 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0216 	orr.w	r2, r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d004      	beq.n	8002916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e00c      	b.n	8002930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2205      	movs	r2, #5
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002948:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_DMA_IRQHandler+0x258>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a92      	ldr	r2, [pc, #584]	; (8002b98 <HAL_DMA_IRQHandler+0x25c>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0204 	bic.w	r2, r2, #4
 800298e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	2208      	movs	r2, #8
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2204      	movs	r2, #4
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2210      	movs	r2, #16
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d043      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2210      	movs	r2, #16
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d024      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e01f      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 808e 	beq.w	8002bda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8086 	beq.w	8002bda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d136      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0216 	bic.w	r2, r2, #22
 8002af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x1da>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	223f      	movs	r2, #63	; 0x3f
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07d      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
        }
        return;
 8002b52:	e078      	b.n	8002c46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d030      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
 8002b80:	e02b      	b.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	e022      	b.n	8002bda <HAL_DMA_IRQHandler+0x29e>
 8002b94:	20000000 	.word	0x20000000
 8002b98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0210 	bic.w	r2, r2, #16
 8002bb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d032      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d307      	bcc.n	8002c22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x2ca>
 8002c20:	e000      	b.n	8002c24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e000      	b.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c46:	bf00      	nop
    }
  }
}
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop

08002c50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d108      	bne.n	8002ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ca6:	e007      	b.n	8002cb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3b10      	subs	r3, #16
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d909      	bls.n	8002d06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	; 0x58
 8002d04:	e007      	b.n	8002d16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	aaaaaaab 	.word	0xaaaaaaab
 8002d2c:	0800e8f4 	.word	0x0800e8f4

08002d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d855      	bhi.n	8002dfc <DMA_CheckFifoParam+0xcc>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <DMA_CheckFifoParam+0x28>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d7b 	.word	0x08002d7b
 8002d60:	08002d69 	.word	0x08002d69
 8002d64:	08002dfd 	.word	0x08002dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d045      	beq.n	8002e00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e042      	b.n	8002e00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d82:	d13f      	bne.n	8002e04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e03c      	b.n	8002e04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d92:	d121      	bne.n	8002dd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d836      	bhi.n	8002e08 <DMA_CheckFifoParam+0xd8>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <DMA_CheckFifoParam+0x70>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002db7 	.word	0x08002db7
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	08002dc9 	.word	0x08002dc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e02f      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d024      	beq.n	8002e0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e021      	b.n	8002e0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd0:	d11e      	bne.n	8002e10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd6:	e01b      	b.n	8002e10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d902      	bls.n	8002de4 <DMA_CheckFifoParam+0xb4>
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d003      	beq.n	8002dea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de2:	e018      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      break;
 8002de8:	e015      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00e      	beq.n	8002e14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfa:	e00b      	b.n	8002e14 <DMA_CheckFifoParam+0xe4>
      break;
 8002dfc:	bf00      	nop
 8002dfe:	e00a      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002e00:	bf00      	nop
 8002e02:	e008      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002e04:	bf00      	nop
 8002e06:	e006      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e004      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002e0c:	bf00      	nop
 8002e0e:	e002      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;   
 8002e10:	bf00      	nop
 8002e12:	e000      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002e14:	bf00      	nop
    }
  } 
  
  return status; 
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e16b      	b.n	8003118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 815a 	bne.w	8003112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d00b      	beq.n	8002e7e <HAL_GPIO_Init+0x5a>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d007      	beq.n	8002e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e72:	2b11      	cmp	r3, #17
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b12      	cmp	r3, #18
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0xfc>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b12      	cmp	r3, #18
 8002f1e:	d123      	bne.n	8002f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0203 	and.w	r2, r3, #3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80b4 	beq.w	8003112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_GPIO_Init+0x308>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	; (800312c <HAL_GPIO_Init+0x308>)
 8002fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_GPIO_Init+0x308>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc6:	4a5a      	ldr	r2, [pc, #360]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a51      	ldr	r2, [pc, #324]	; (8003134 <HAL_GPIO_Init+0x310>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x226>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a50      	ldr	r2, [pc, #320]	; (8003138 <HAL_GPIO_Init+0x314>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x222>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4f      	ldr	r2, [pc, #316]	; (800313c <HAL_GPIO_Init+0x318>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x21e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4e      	ldr	r2, [pc, #312]	; (8003140 <HAL_GPIO_Init+0x31c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x21a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4d      	ldr	r2, [pc, #308]	; (8003144 <HAL_GPIO_Init+0x320>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x216>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4c      	ldr	r2, [pc, #304]	; (8003148 <HAL_GPIO_Init+0x324>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x212>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4b      	ldr	r2, [pc, #300]	; (800314c <HAL_GPIO_Init+0x328>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_GPIO_Init+0x32c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x20a>
 800302a:	2307      	movs	r3, #7
 800302c:	e00e      	b.n	800304c <HAL_GPIO_Init+0x228>
 800302e:	2308      	movs	r3, #8
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003032:	2306      	movs	r3, #6
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x228>
 800304a:	2300      	movs	r3, #0
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305c:	4934      	ldr	r1, [pc, #208]	; (8003130 <HAL_GPIO_Init+0x30c>)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <HAL_GPIO_Init+0x330>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308e:	4a31      	ldr	r2, [pc, #196]	; (8003154 <HAL_GPIO_Init+0x330>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_GPIO_Init+0x330>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_GPIO_Init+0x330>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_GPIO_Init+0x330>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_GPIO_Init+0x330>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_GPIO_Init+0x330>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a11      	ldr	r2, [pc, #68]	; (8003154 <HAL_GPIO_Init+0x330>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f ae90 	bls.w	8002e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3724      	adds	r7, #36	; 0x24
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40021400 	.word	0x40021400
 800314c:	40021800 	.word	0x40021800
 8003150:	40021c00 	.word	0x40021c00
 8003154:	40013c00 	.word	0x40013c00

08003158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e001      	b.n	800317a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
 8003194:	4613      	mov	r3, r2
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a4:	e003      	b.n	80031ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	041a      	lsls	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e25b      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	4ba3      	ldr	r3, [pc, #652]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00c      	beq.n	8003200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4ba0      	ldr	r3, [pc, #640]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d112      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b9d      	ldr	r3, [pc, #628]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b99      	ldr	r3, [pc, #612]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e236      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b91      	ldr	r3, [pc, #580]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a90      	ldr	r2, [pc, #576]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a8a      	ldr	r2, [pc, #552]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a87      	ldr	r2, [pc, #540]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003254:	4b84      	ldr	r3, [pc, #528]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a83      	ldr	r2, [pc, #524]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fdb0 	bl	8001dd8 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe fdac 	bl	8001dd8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1fb      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b76      	ldr	r3, [pc, #472]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xc0>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fd9c 	bl	8001dd8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fd98 	bl	8001dd8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1e7      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b6c      	ldr	r3, [pc, #432]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xe8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b62      	ldr	r3, [pc, #392]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b5c      	ldr	r3, [pc, #368]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1bb      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b56      	ldr	r3, [pc, #344]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4952      	ldr	r1, [pc, #328]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b4f      	ldr	r3, [pc, #316]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe fd51 	bl	8001dd8 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe fd4d 	bl	8001dd8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e19c      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4940      	ldr	r1, [pc, #256]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fd30 	bl	8001dd8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe fd2c 	bl	8001dd8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e17b      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d030      	beq.n	8003408 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_OscConfig+0x2b4>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe fd10 	bl	8001dd8 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe fd0c 	bl	8001dd8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e15b      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x200>
 80033da:	e015      	b.n	8003408 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_OscConfig+0x2b4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fcf9 	bl	8001dd8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe fcf5 	bl	8001dd8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e144      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a0 	beq.w	8003556 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d121      	bne.n	8003496 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a07      	ldr	r2, [pc, #28]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fe fcbb 	bl	8001dd8 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e011      	b.n	800348a <HAL_RCC_OscConfig+0x2ce>
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	42470000 	.word	0x42470000
 8003470:	42470e80 	.word	0x42470e80
 8003474:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003478:	f7fe fcae 	bl	8001dd8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0fd      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b81      	ldr	r3, [pc, #516]	; (8003690 <HAL_RCC_OscConfig+0x4d4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x2f0>
 800349e:	4b7d      	ldr	r3, [pc, #500]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a7c      	ldr	r2, [pc, #496]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
 80034aa:	e01c      	b.n	80034e6 <HAL_RCC_OscConfig+0x32a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d10c      	bne.n	80034ce <HAL_RCC_OscConfig+0x312>
 80034b4:	4b77      	ldr	r3, [pc, #476]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a76      	ldr	r2, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	4b74      	ldr	r3, [pc, #464]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a73      	ldr	r2, [pc, #460]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	e00b      	b.n	80034e6 <HAL_RCC_OscConfig+0x32a>
 80034ce:	4b71      	ldr	r3, [pc, #452]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	4a70      	ldr	r2, [pc, #448]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70
 80034da:	4b6e      	ldr	r3, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4a6d      	ldr	r2, [pc, #436]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d015      	beq.n	800351a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe fc73 	bl	8001dd8 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe fc6f 	bl	8001dd8 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0bc      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCC_OscConfig+0x33a>
 8003518:	e014      	b.n	8003544 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fe fc5d 	bl	8001dd8 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe fc59 	bl	8001dd8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0a6      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	4b56      	ldr	r3, [pc, #344]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ee      	bne.n	8003522 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b52      	ldr	r3, [pc, #328]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a51      	ldr	r2, [pc, #324]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8092 	beq.w	8003684 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003560:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d05c      	beq.n	8003626 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d141      	bne.n	80035f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b48      	ldr	r3, [pc, #288]	; (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe fc2d 	bl	8001dd8 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe fc29 	bl	8001dd8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e078      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003594:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	019b      	lsls	r3, r3, #6
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	3b01      	subs	r3, #1
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	4933      	ldr	r1, [pc, #204]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ca:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fe fc02 	bl	8001dd8 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fe fbfe 	bl	8001dd8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e04d      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x41c>
 80035f6:	e045      	b.n	8003684 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b27      	ldr	r3, [pc, #156]	; (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fbeb 	bl	8001dd8 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fbe7 	bl	8001dd8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e036      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x44a>
 8003624:	e02e      	b.n	8003684 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e029      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003632:	4b18      	ldr	r3, [pc, #96]	; (8003694 <HAL_RCC_OscConfig+0x4d8>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	429a      	cmp	r2, r3
 8003644:	d11c      	bne.n	8003680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d115      	bne.n	8003680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003660:	4293      	cmp	r3, r2
 8003662:	d10d      	bne.n	8003680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40007000 	.word	0x40007000
 8003694:	40023800 	.word	0x40023800
 8003698:	42470060 	.word	0x42470060

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0cc      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d90c      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b65      	ldr	r3, [pc, #404]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a58      	ldr	r2, [pc, #352]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d044      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d119      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	2b03      	cmp	r3, #3
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e06f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e067      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4934      	ldr	r1, [pc, #208]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7fe fb24 	bl	8001dd8 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe fb20 	bl	8001dd8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e04f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d20c      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f821 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003826:	4601      	mov	r1, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	5cd3      	ldrb	r3, [r2, r3]
 8003836:	fa21 f303 	lsr.w	r3, r1, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fa84 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023c00 	.word	0x40023c00
 8003858:	40023800 	.word	0x40023800
 800385c:	0800e8e4 	.word	0x0800e8e4
 8003860:	20000000 	.word	0x20000000
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	2300      	movs	r3, #0
 8003878:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b04      	cmp	r3, #4
 8003888:	d007      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x32>
 800388a:	2b08      	cmp	r3, #8
 800388c:	d008      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x38>
 800388e:	2b00      	cmp	r3, #0
 8003890:	f040 80b4 	bne.w	80039fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003896:	60bb      	str	r3, [r7, #8]
       break;
 8003898:	e0b3      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389a:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800389c:	60bb      	str	r3, [r7, #8]
      break;
 800389e:	e0b0      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a0:	4b5a      	ldr	r3, [pc, #360]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038aa:	4b58      	ldr	r3, [pc, #352]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d04a      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b55      	ldr	r3, [pc, #340]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	f04f 0400 	mov.w	r4, #0
 80038c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	ea03 0501 	and.w	r5, r3, r1
 80038cc:	ea04 0602 	and.w	r6, r4, r2
 80038d0:	4629      	mov	r1, r5
 80038d2:	4632      	mov	r2, r6
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	0154      	lsls	r4, r2, #5
 80038de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e2:	014b      	lsls	r3, r1, #5
 80038e4:	4619      	mov	r1, r3
 80038e6:	4622      	mov	r2, r4
 80038e8:	1b49      	subs	r1, r1, r5
 80038ea:	eb62 0206 	sbc.w	r2, r2, r6
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	f04f 0400 	mov.w	r4, #0
 80038f6:	0194      	lsls	r4, r2, #6
 80038f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038fc:	018b      	lsls	r3, r1, #6
 80038fe:	1a5b      	subs	r3, r3, r1
 8003900:	eb64 0402 	sbc.w	r4, r4, r2
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	00e2      	lsls	r2, r4, #3
 800390e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003912:	00d9      	lsls	r1, r3, #3
 8003914:	460b      	mov	r3, r1
 8003916:	4614      	mov	r4, r2
 8003918:	195b      	adds	r3, r3, r5
 800391a:	eb44 0406 	adc.w	r4, r4, r6
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	0262      	lsls	r2, r4, #9
 8003928:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800392c:	0259      	lsls	r1, r3, #9
 800392e:	460b      	mov	r3, r1
 8003930:	4614      	mov	r4, r2
 8003932:	4618      	mov	r0, r3
 8003934:	4621      	mov	r1, r4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f04f 0400 	mov.w	r4, #0
 800393c:	461a      	mov	r2, r3
 800393e:	4623      	mov	r3, r4
 8003940:	f7fd f9a2 	bl	8000c88 <__aeabi_uldivmod>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e049      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394c:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	f04f 0400 	mov.w	r4, #0
 8003956:	f240 11ff 	movw	r1, #511	; 0x1ff
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	ea03 0501 	and.w	r5, r3, r1
 8003962:	ea04 0602 	and.w	r6, r4, r2
 8003966:	4629      	mov	r1, r5
 8003968:	4632      	mov	r2, r6
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	f04f 0400 	mov.w	r4, #0
 8003972:	0154      	lsls	r4, r2, #5
 8003974:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003978:	014b      	lsls	r3, r1, #5
 800397a:	4619      	mov	r1, r3
 800397c:	4622      	mov	r2, r4
 800397e:	1b49      	subs	r1, r1, r5
 8003980:	eb62 0206 	sbc.w	r2, r2, r6
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	f04f 0400 	mov.w	r4, #0
 800398c:	0194      	lsls	r4, r2, #6
 800398e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003992:	018b      	lsls	r3, r1, #6
 8003994:	1a5b      	subs	r3, r3, r1
 8003996:	eb64 0402 	sbc.w	r4, r4, r2
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	00e2      	lsls	r2, r4, #3
 80039a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039a8:	00d9      	lsls	r1, r3, #3
 80039aa:	460b      	mov	r3, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	195b      	adds	r3, r3, r5
 80039b0:	eb44 0406 	adc.w	r4, r4, r6
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	02a2      	lsls	r2, r4, #10
 80039be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039c2:	0299      	lsls	r1, r3, #10
 80039c4:	460b      	mov	r3, r1
 80039c6:	4614      	mov	r4, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	4621      	mov	r1, r4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f04f 0400 	mov.w	r4, #0
 80039d2:	461a      	mov	r2, r3
 80039d4:	4623      	mov	r3, r4
 80039d6:	f7fd f957 	bl	8000c88 <__aeabi_uldivmod>
 80039da:	4603      	mov	r3, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	0c1b      	lsrs	r3, r3, #16
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	3301      	adds	r3, #1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	60bb      	str	r3, [r7, #8]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039fe:	60bb      	str	r3, [r7, #8]
      break;
 8003a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a02:	68bb      	ldr	r3, [r7, #8]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	007a1200 	.word	0x007a1200

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d035      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a40:	4b62      	ldr	r3, [pc, #392]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a46:	f7fe f9c7 	bl	8001dd8 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a4e:	f7fe f9c3 	bl	8001dd8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0b0      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a60:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	019a      	lsls	r2, r3, #6
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	071b      	lsls	r3, r3, #28
 8003a78:	4955      	ldr	r1, [pc, #340]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a80:	4b52      	ldr	r3, [pc, #328]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a86:	f7fe f9a7 	bl	8001dd8 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a8e:	f7fe f9a3 	bl	8001dd8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e090      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8083 	beq.w	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a43      	ldr	r2, [pc, #268]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aca:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ad6:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a3e      	ldr	r2, [pc, #248]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae2:	f7fe f979 	bl	8001dd8 <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fe f975 	bl	8001dd8 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e062      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b08:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d028      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b30:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b3c:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d114      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fe f943 	bl	8001dd8 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fe f93f 	bl	8001dd8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e02a      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ee      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b84:	d10d      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]
 8003ba0:	e005      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bac:	6093      	str	r3, [r2, #8]
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	4905      	ldr	r1, [pc, #20]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	42470068 	.word	0x42470068
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	42470e40 	.word	0x42470e40

08003bdc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e083      	b.n	8003cf6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7f5b      	ldrb	r3, [r3, #29]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fea4 	bl	800194c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	22ca      	movs	r2, #202	; 0xca
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2253      	movs	r2, #83	; 0x53
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f944 	bl	8003ea8 <RTC_EnterInitMode>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	22ff      	movs	r2, #255	; 0xff
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2204      	movs	r2, #4
 8003c32:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e05e      	b.n	8003cf6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68d2      	ldr	r2, [r2, #12]
 8003c72:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	041a      	lsls	r2, r3, #16
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c96:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8d6 	bl	8003e58 <HAL_RTC_WaitForSynchro>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	22ff      	movs	r2, #255	; 0xff
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e018      	b.n	8003cf6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	22ff      	movs	r2, #255	; 0xff
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d30:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d11a      	bne.n	8003db0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f8be 	bl	8003f00 <RTC_Bcd2ToByte>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	785b      	ldrb	r3, [r3, #1]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f8b5 	bl	8003f00 <RTC_Bcd2ToByte>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	789b      	ldrb	r3, [r3, #2]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f8ac 	bl	8003f00 <RTC_Bcd2ToByte>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461a      	mov	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003dd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	0b5b      	lsrs	r3, r3, #13
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11a      	bne.n	8003e4e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	78db      	ldrb	r3, [r3, #3]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f86f 	bl	8003f00 <RTC_Bcd2ToByte>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f866 	bl	8003f00 <RTC_Bcd2ToByte>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	789b      	ldrb	r3, [r3, #2]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 f85d 	bl	8003f00 <RTC_Bcd2ToByte>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fd ffb0 	bl	8001dd8 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e7a:	e009      	b.n	8003e90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e7c:	f7fd ffac 	bl	8001dd8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e8a:	d901      	bls.n	8003e90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e007      	b.n	8003ea0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ee      	beq.n	8003e7c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d119      	bne.n	8003ef6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ecc:	f7fd ff84 	bl	8001dd8 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ed2:	e009      	b.n	8003ee8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ed4:	f7fd ff80 	bl	8001dd8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee2:	d901      	bls.n	8003ee8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e007      	b.n	8003ef8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ee      	beq.n	8003ed4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b2db      	uxtb	r3, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e022      	b.n	8003f94 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fd fd09 	bl	8001978 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f814 	bl	8003f9c <HAL_SD_InitCard>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00a      	b.n	8003f94 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f9c:	b5b0      	push	{r4, r5, r7, lr}
 8003f9e:	b08e      	sub	sp, #56	; 0x38
 8003fa0:	af04      	add	r7, sp, #16
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003fb8:	2376      	movs	r3, #118	; 0x76
 8003fba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681d      	ldr	r5, [r3, #0]
 8003fc0:	466c      	mov	r4, sp
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fce:	f107 0308 	add.w	r3, r7, #8
 8003fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f001 faaf 	bl	8005538 <SDIO_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e031      	b.n	8004050 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <HAL_SD_InitCard+0xbc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fae7 	bl	80055ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_SD_InitCard+0xbc>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 ffdc 	bl	8004fc0 <SD_PowerON>
 8004008:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e013      	b.n	8004050 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fefb 	bl	8004e24 <SD_InitCard>
 800402e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	; 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bdb0      	pop	{r4, r5, r7, pc}
 8004058:	422580a0 	.word	0x422580a0

0800405c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	; 0x30
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d107      	bne.n	8004084 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0c9      	b.n	8004218 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 80c2 	bne.w	8004216 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d907      	bls.n	80040b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0b0      	b.n	8004218 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2203      	movs	r2, #3
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80040d4:	f043 0302 	orr.w	r3, r3, #2
 80040d8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a50      	ldr	r2, [pc, #320]	; (8004220 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a4f      	ldr	r2, [pc, #316]	; (8004224 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80040e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2200      	movs	r2, #0
 80040f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3380      	adds	r3, #128	; 0x80
 80040fc:	4619      	mov	r1, r3
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	025b      	lsls	r3, r3, #9
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	f7fe fb9f 	bl	8002848 <HAL_DMA_Start_IT>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800411e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a40      	ldr	r2, [pc, #256]	; (8004228 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e06b      	b.n	8004218 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004140:	4b3a      	ldr	r3, [pc, #232]	; (800422c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	2b01      	cmp	r3, #1
 800414c:	d002      	beq.n	8004154 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	025b      	lsls	r3, r3, #9
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fac7 	bl	80056f0 <SDMMC_CmdBlockLength>
 8004162:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00f      	beq.n	800418a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2e      	ldr	r2, [pc, #184]	; (8004228 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e046      	b.n	8004218 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	025b      	lsls	r3, r3, #9
 8004194:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004196:	2390      	movs	r3, #144	; 0x90
 8004198:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800419a:	2302      	movs	r3, #2
 800419c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f107 0210 	add.w	r2, r7, #16
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 fa71 	bl	8005698 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d90a      	bls.n	80041d2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2282      	movs	r2, #130	; 0x82
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 fad5 	bl	8005778 <SDMMC_CmdReadMultiBlock>
 80041ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 80041d0:	e009      	b.n	80041e6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2281      	movs	r2, #129	; 0x81
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 faa8 	bl	8005734 <SDMMC_CmdReadSingleBlock>
 80041e4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e002      	b.n	8004218 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3730      	adds	r7, #48	; 0x30
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	08004c33 	.word	0x08004c33
 8004224:	08004ca5 	.word	0x08004ca5
 8004228:	004005ff 	.word	0x004005ff
 800422c:	4225858c 	.word	0x4225858c

08004230 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08c      	sub	sp, #48	; 0x30
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d107      	bne.n	8004258 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0ce      	b.n	80043f6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 80c7 	bne.w	80043f4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800426c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	429a      	cmp	r2, r3
 8004278:	d907      	bls.n	800428a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0b5      	b.n	80043f6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2203      	movs	r2, #3
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	4a53      	ldr	r2, [pc, #332]	; (8004400 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	4a52      	ldr	r2, [pc, #328]	; (8004404 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80042bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	2200      	movs	r2, #0
 80042c4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d002      	beq.n	80042d4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	025b      	lsls	r3, r3, #9
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fa07 	bl	80056f0 <SDMMC_CmdBlockLength>
 80042e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00f      	beq.n	800430a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a46      	ldr	r2, [pc, #280]	; (8004408 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	431a      	orrs	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e075      	b.n	80043f6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d90a      	bls.n	8004326 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	22a0      	movs	r2, #160	; 0xa0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431c:	4618      	mov	r0, r3
 800431e:	f001 fa6f 	bl	8005800 <SDMMC_CmdWriteMultiBlock>
 8004322:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004324:	e009      	b.n	800433a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2290      	movs	r2, #144	; 0x90
 800432a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fa42 	bl	80057bc <SDMMC_CmdWriteSingleBlock>
 8004338:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d012      	beq.n	8004366 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a30      	ldr	r2, [pc, #192]	; (8004408 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	431a      	orrs	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e047      	b.n	80043f6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3380      	adds	r3, #128	; 0x80
 8004378:	461a      	mov	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	025b      	lsls	r3, r3, #9
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	f7fe fa62 	bl	8002848 <HAL_DMA_Start_IT>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01c      	beq.n	80043c4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004398:	f023 0302 	bic.w	r3, r3, #2
 800439c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a19      	ldr	r2, [pc, #100]	; (8004408 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e018      	b.n	80043f6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	025b      	lsls	r3, r3, #9
 80043ce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80043d0:	2390      	movs	r3, #144	; 0x90
 80043d2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80043d8:	2300      	movs	r3, #0
 80043da:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80043dc:	2301      	movs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f107 0210 	add.w	r2, r7, #16
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 f954 	bl	8005698 <SDIO_ConfigData>

      return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3730      	adds	r7, #48	; 0x30
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	08004c09 	.word	0x08004c09
 8004404:	08004ca5 	.word	0x08004ca5
 8004408:	004005ff 	.word	0x004005ff
 800440c:	4225858c 	.word	0x4225858c

08004410 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_SD_IRQHandler+0x2e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 ffd8 	bl	80053ec <SD_Read_IT>
 800443c:	e165      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 808f 	beq.w	800456c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004456:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004466:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800446a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d039      	beq.n	80044fa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_SD_IRQHandler+0x8a>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d011      	beq.n	80044be <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f9d0 	bl	8005844 <SDMMC_CmdStopTransfer>
 80044a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f92f 	bl	800471c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <HAL_SD_IRQHandler+0xda>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 fe2e 	bl	800614c <HAL_SD_RxCpltCallback>
 80044f0:	e10b      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 fe20 	bl	8006138 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044f8:	e107      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8102 	beq.w	800470a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d011      	beq.n	8004534 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f001 f995 	bl	8005844 <SDMMC_CmdStopTransfer>
 800451a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8f4 	bl	800471c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 80e5 	bne.w	800470a <HAL_SD_IRQHandler+0x2fa>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 80df 	bne.w	800470a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0208 	bic.w	r2, r2, #8
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 fde7 	bl	8006138 <HAL_SD_TxCpltCallback>
}
 800456a:	e0ce      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_SD_IRQHandler+0x17c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 ff82 	bl	800548e <SD_Write_IT>
 800458a:	e0be      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004592:	f240 233a 	movw	r3, #570	; 0x23a
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80b6 	beq.w	800470a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	f043 0202 	orr.w	r2, r3, #2
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	f043 0208 	orr.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f043 0210 	orr.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	f043 0208 	orr.w	r2, r3, #8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f240 723a 	movw	r2, #1850	; 0x73a
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004638:	f023 0302 	bic.w	r3, r3, #2
 800463c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f8fe 	bl	8005844 <SDMMC_CmdStopTransfer>
 8004648:	4602      	mov	r2, r0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f855 	bl	800471c <HAL_SD_ErrorCallback>
}
 8004672:	e04a      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b00      	cmp	r3, #0
 800467c:	d045      	beq.n	800470a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <HAL_SD_IRQHandler+0x282>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d011      	beq.n	80046b6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <HAL_SD_IRQHandler+0x304>)
 8004698:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe f92a 	bl	80028f8 <HAL_DMA_Abort_IT>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d02f      	beq.n	800470a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb4a 	bl	8004d48 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80046b4:	e029      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <HAL_SD_IRQHandler+0x2ba>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d011      	beq.n	80046ee <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <HAL_SD_IRQHandler+0x308>)
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe f90e 	bl	80028f8 <HAL_DMA_Abort_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d013      	beq.n	800470a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fb65 	bl	8004db6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80046ec:	e00d      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fd0e 	bl	8006124 <HAL_SD_AbortCallback>
}
 8004708:	e7ff      	b.n	800470a <HAL_SD_IRQHandler+0x2fa>
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	08004d49 	.word	0x08004d49
 8004718:	08004db7 	.word	0x08004db7

0800471c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800473e:	0f9b      	lsrs	r3, r3, #30
 8004740:	b2da      	uxtb	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474a:	0e9b      	lsrs	r3, r3, #26
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	b2da      	uxtb	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475c:	0e1b      	lsrs	r3, r3, #24
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	b2da      	uxtb	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	b2da      	uxtb	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	b2da      	uxtb	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	b2da      	uxtb	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004790:	0d1b      	lsrs	r3, r3, #20
 8004792:	b29a      	uxth	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ae:	0bdb      	lsrs	r3, r3, #15
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c0:	0b9b      	lsrs	r3, r3, #14
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d2:	0b5b      	lsrs	r3, r3, #13
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e4:	0b1b      	lsrs	r3, r3, #12
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2200      	movs	r2, #0
 80047f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d163      	bne.n	80048c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004804:	009a      	lsls	r2, r3, #2
 8004806:	f640 73fc 	movw	r3, #4092	; 0xffc
 800480a:	4013      	ands	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004810:	0f92      	lsrs	r2, r2, #30
 8004812:	431a      	orrs	r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481c:	0edb      	lsrs	r3, r3, #27
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	b2da      	uxtb	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800482e:	0e1b      	lsrs	r3, r3, #24
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	b2da      	uxtb	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004840:	0d5b      	lsrs	r3, r3, #21
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	b2da      	uxtb	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004852:	0c9b      	lsrs	r3, r3, #18
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	b2da      	uxtb	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004864:	0bdb      	lsrs	r3, r3, #15
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	b2da      	uxtb	r2, r3
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	7e1b      	ldrb	r3, [r3, #24]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	3302      	adds	r3, #2
 8004888:	2201      	movs	r2, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004892:	fb02 f203 	mul.w	r2, r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	7a1b      	ldrb	r3, [r3, #8]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80048b4:	0a52      	lsrs	r2, r2, #9
 80048b6:	fb02 f203 	mul.w	r2, r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c4:	661a      	str	r2, [r3, #96]	; 0x60
 80048c6:	e031      	b.n	800492c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d11d      	bne.n	800490c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	431a      	orrs	r2, r3
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	3301      	adds	r3, #1
 80048ec:	029a      	lsls	r2, r3, #10
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004900:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	661a      	str	r2, [r3, #96]	; 0x60
 800490a:	e00f      	b.n	800492c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_SD_GetCardCSD+0x344>)
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e09d      	b.n	8004a68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004930:	0b9b      	lsrs	r3, r3, #14
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	b2da      	uxtb	r2, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	09db      	lsrs	r3, r3, #7
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494a:	b2da      	uxtb	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495a:	b2da      	uxtb	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	0fdb      	lsrs	r3, r3, #31
 8004966:	b2da      	uxtb	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	0f5b      	lsrs	r3, r3, #29
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	b2da      	uxtb	r2, r3
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	0e9b      	lsrs	r3, r3, #26
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	b2da      	uxtb	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	0d9b      	lsrs	r3, r3, #22
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	0d5b      	lsrs	r3, r3, #21
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	0bdb      	lsrs	r3, r3, #15
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	0b9b      	lsrs	r3, r3, #14
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	0b5b      	lsrs	r3, r3, #13
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	0b1b      	lsrs	r3, r3, #12
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	0a9b      	lsrs	r3, r3, #10
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	004005ff 	.word	0x004005ff

08004a78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004ad0:	b5b0      	push	{r4, r5, r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2203      	movs	r2, #3
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d02e      	beq.n	8004b48 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d106      	bne.n	8004b00 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38
 8004afe:	e029      	b.n	8004b54 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b06:	d10a      	bne.n	8004b1e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fb0f 	bl	800512c <SD_WideBus_Enable>
 8004b0e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b1c:	e01a      	b.n	8004b54 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fb4c 	bl	80051c2 <SD_WideBus_Disable>
 8004b2a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
 8004b38:	e00c      	b.n	8004b54 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
 8004b46:	e005      	b.n	8004b54 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d009      	beq.n	8004b70 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e024      	b.n	8004bba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681d      	ldr	r5, [r3, #0]
 8004b96:	466c      	mov	r4, sp
 8004b98:	f107 0318 	add.w	r3, r7, #24
 8004b9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ba4:	f107 030c 	add.w	r3, r7, #12
 8004ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 fcc4 	bl	8005538 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3728      	adds	r7, #40	; 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	004005ff 	.word	0x004005ff

08004bc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa7e 	bl	80050dc <SD_SendStatus>
 8004be0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	0a5b      	lsrs	r3, r3, #9
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004bfe:	693b      	ldr	r3, [r7, #16]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b82      	cmp	r3, #130	; 0x82
 8004c46:	d111      	bne.n	8004c6c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fdf9 	bl	8005844 <SDMMC_CmdStopTransfer>
 8004c52:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff fd58 	bl	800471c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0208 	bic.w	r2, r2, #8
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f001 fa59 	bl	800614c <HAL_SD_RxCpltCallback>
#endif
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fd ffcc 	bl	8002c50 <HAL_DMA_GetError>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d03e      	beq.n	8004d3c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d002      	beq.n	8004cda <SD_DMAError+0x36>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d12d      	bne.n	8004d36 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <SD_DMAError+0xa0>)
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004cfe:	6978      	ldr	r0, [r7, #20]
 8004d00:	f7ff ff62 	bl	8004bc8 <HAL_SD_GetCardState>
 8004d04:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	d002      	beq.n	8004d12 <SD_DMAError+0x6e>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d10a      	bne.n	8004d28 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fd94 	bl	8005844 <SDMMC_CmdStopTransfer>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	431a      	orrs	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f7ff fcf0 	bl	800471c <HAL_SD_ErrorCallback>
#endif
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	004005ff 	.word	0x004005ff

08004d48 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff ff31 	bl	8004bc8 <HAL_SD_GetCardState>
 8004d66:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b06      	cmp	r3, #6
 8004d7a:	d002      	beq.n	8004d82 <SD_DMATxAbort+0x3a>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d10a      	bne.n	8004d98 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fd5c 	bl	8005844 <SDMMC_CmdStopTransfer>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	431a      	orrs	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d103      	bne.n	8004da8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f001 f9bf 	bl	8006124 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004da6:	e002      	b.n	8004dae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fcb7 	bl	800471c <HAL_SD_ErrorCallback>
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fefa 	bl	8004bc8 <HAL_SD_GetCardState>
 8004dd4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d002      	beq.n	8004df0 <SD_DMARxAbort+0x3a>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d10a      	bne.n	8004e06 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fd25 	bl	8005844 <SDMMC_CmdStopTransfer>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	431a      	orrs	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f001 f988 	bl	8006124 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004e14:	e002      	b.n	8004e1c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff fc80 	bl	800471c <HAL_SD_ErrorCallback>
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e24:	b5b0      	push	{r4, r5, r7, lr}
 8004e26:	b094      	sub	sp, #80	; 0x50
 8004e28:	af04      	add	r7, sp, #16
 8004e2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fbd7 	bl	80055e8 <SDIO_GetPowerState>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e44:	e0b7      	b.n	8004fb6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d02f      	beq.n	8004eae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fe00 	bl	8005a58 <SDMMC_CmdSendCID>
 8004e58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <SD_InitCard+0x40>
    {
      return errorstate;
 8004e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e62:	e0a8      	b.n	8004fb6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fc01 	bl	8005672 <SDIO_GetResponse>
 8004e70:	4602      	mov	r2, r0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fbf8 	bl	8005672 <SDIO_GetResponse>
 8004e82:	4602      	mov	r2, r0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2108      	movs	r1, #8
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fbef 	bl	8005672 <SDIO_GetResponse>
 8004e94:	4602      	mov	r2, r0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	210c      	movs	r1, #12
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fbe6 	bl	8005672 <SDIO_GetResponse>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d00d      	beq.n	8004ed2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f107 020e 	add.w	r2, r7, #14
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fe06 	bl	8005ad2 <SDMMC_CmdSetRelAdd>
 8004ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed0:	e071      	b.n	8004fb6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d036      	beq.n	8004f48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004eda:	89fb      	ldrh	r3, [r7, #14]
 8004edc:	461a      	mov	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f000 fdd0 	bl	8005a94 <SDMMC_CmdSendCSD>
 8004ef4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efe:	e05a      	b.n	8004fb6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fbb3 	bl	8005672 <SDIO_GetResponse>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2104      	movs	r1, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fbaa 	bl	8005672 <SDIO_GetResponse>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2108      	movs	r1, #8
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fba1 	bl	8005672 <SDIO_GetResponse>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	210c      	movs	r1, #12
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fb98 	bl	8005672 <SDIO_GetResponse>
 8004f42:	4602      	mov	r2, r0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2104      	movs	r1, #4
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fb8f 	bl	8005672 <SDIO_GetResponse>
 8004f54:	4603      	mov	r3, r0
 8004f56:	0d1a      	lsrs	r2, r3, #20
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fbe4 	bl	8004730 <HAL_SD_GetCardCSD>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f72:	e020      	b.n	8004fb6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6819      	ldr	r1, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	f04f 0400 	mov.w	r4, #0
 8004f82:	461a      	mov	r2, r3
 8004f84:	4623      	mov	r3, r4
 8004f86:	4608      	mov	r0, r1
 8004f88:	f000 fc7e 	bl	8005888 <SDMMC_CmdSelDesel>
 8004f8c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <SD_InitCard+0x174>
  {
    return errorstate;
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	e00e      	b.n	8004fb6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681d      	ldr	r5, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	466c      	mov	r4, sp
 8004fa0:	f103 0210 	add.w	r2, r3, #16
 8004fa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004faa:	3304      	adds	r3, #4
 8004fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 fac2 	bl	8005538 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3740      	adds	r7, #64	; 0x40
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004fc0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fc78 	bl	80058ce <SDMMC_CmdGoIdleState>
 8004fde:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <SD_PowerON+0x2a>
  {
    return errorstate;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	e072      	b.n	80050d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fc8b 	bl	800590a <SDMMC_CmdOperCond>
 8004ff4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fc61 	bl	80058ce <SDMMC_CmdGoIdleState>
 800500c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	e05b      	b.n	80050d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005022:	2b01      	cmp	r3, #1
 8005024:	d137      	bne.n	8005096 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fc8b 	bl	8005948 <SDMMC_CmdAppCommand>
 8005032:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02d      	beq.n	8005096 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800503a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800503e:	e047      	b.n	80050d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2100      	movs	r1, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fc7e 	bl	8005948 <SDMMC_CmdAppCommand>
 800504c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <SD_PowerON+0x98>
    {
      return errorstate;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	e03b      	b.n	80050d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	491e      	ldr	r1, [pc, #120]	; (80050d8 <SD_PowerON+0x118>)
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fc94 	bl	800598c <SDMMC_CmdAppOperCommand>
 8005064:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800506c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005070:	e02e      	b.n	80050d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fafa 	bl	8005672 <SDIO_GetResponse>
 800507e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	0fdb      	lsrs	r3, r3, #31
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <SD_PowerON+0xcc>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <SD_PowerON+0xce>
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]

    count++;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	3301      	adds	r3, #1
 8005094:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800509c:	4293      	cmp	r3, r2
 800509e:	d802      	bhi.n	80050a6 <SD_PowerON+0xe6>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0cc      	beq.n	8005040 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d902      	bls.n	80050b6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80050b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b4:	e00c      	b.n	80050d0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
 80050c6:	e002      	b.n	80050ce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	c1100000 	.word	0xc1100000

080050dc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80050ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050f0:	e018      	b.n	8005124 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f000 fd08 	bl	8005b14 <SDMMC_CmdSendStatus>
 8005104:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <SD_SendStatus+0x34>
  {
    return errorstate;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	e009      	b.n	8005124 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f000 faab 	bl	8005672 <SDIO_GetResponse>
 800511c:	4602      	mov	r2, r0
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fa95 	bl	8005672 <SDIO_GetResponse>
 8005148:	4603      	mov	r3, r0
 800514a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005152:	d102      	bne.n	800515a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005158:	e02f      	b.n	80051ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800515a:	f107 030c 	add.w	r3, r7, #12
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f879 	bl	8005258 <SD_FindSCR>
 8005166:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	e023      	b.n	80051ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01c      	beq.n	80051b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 fbdd 	bl	8005948 <SDMMC_CmdAppCommand>
 800518e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e00f      	b.n	80051ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2102      	movs	r1, #2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fc16 	bl	80059d2 <SDMMC_CmdBusWidth>
 80051a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	e003      	b.n	80051ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e001      	b.n	80051ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fa4a 	bl	8005672 <SDIO_GetResponse>
 80051de:	4603      	mov	r3, r0
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051e8:	d102      	bne.n	80051f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80051ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051ee:	e02f      	b.n	8005250 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80051f0:	f107 030c 	add.w	r3, r7, #12
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f82e 	bl	8005258 <SD_FindSCR>
 80051fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	e023      	b.n	8005250 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01c      	beq.n	800524c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fb92 	bl	8005948 <SDMMC_CmdAppCommand>
 8005224:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	e00f      	b.n	8005250 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fbcb 	bl	80059d2 <SDMMC_CmdBusWidth>
 800523c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	e003      	b.n	8005250 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005248:	2300      	movs	r3, #0
 800524a:	e001      	b.n	8005250 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800524c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b08f      	sub	sp, #60	; 0x3c
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005262:	f7fc fdb9 	bl	8001dd8 <HAL_GetTick>
 8005266:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800526c:	2300      	movs	r3, #0
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2108      	movs	r1, #8
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fa36 	bl	80056f0 <SDMMC_CmdBlockLength>
 8005284:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <SD_FindSCR+0x38>
  {
    return errorstate;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	e0a9      	b.n	80053e4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f000 fb53 	bl	8005948 <SDMMC_CmdAppCommand>
 80052a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	e09a      	b.n	80053e4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052ae:	f04f 33ff 	mov.w	r3, #4294967295
 80052b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80052b4:	2308      	movs	r3, #8
 80052b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80052b8:	2330      	movs	r3, #48	; 0x30
 80052ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80052bc:	2302      	movs	r3, #2
 80052be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f107 0210 	add.w	r2, r7, #16
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f9e0 	bl	8005698 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fb9a 	bl	8005a16 <SDMMC_CmdSendSCR>
 80052e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d022      	beq.n	8005330 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	e07a      	b.n	80053e4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6819      	ldr	r1, [r3, #0]
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	f107 0208 	add.w	r2, r7, #8
 8005308:	18d4      	adds	r4, r2, r3
 800530a:	4608      	mov	r0, r1
 800530c:	f000 f93f 	bl	800558e <SDIO_ReadFIFO>
 8005310:	4603      	mov	r3, r0
 8005312:	6023      	str	r3, [r4, #0]
      index++;
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	3301      	adds	r3, #1
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800531a:	f7fc fd5d 	bl	8001dd8 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d102      	bne.n	8005330 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800532a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800532e:	e059      	b.n	80053e4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005336:	f240 432a 	movw	r3, #1066	; 0x42a
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0d6      	beq.n	80052ee <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2208      	movs	r2, #8
 8005354:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005356:	2308      	movs	r3, #8
 8005358:	e044      	b.n	80053e4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2202      	movs	r2, #2
 800536e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005370:	2302      	movs	r3, #2
 8005372:	e037      	b.n	80053e4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2220      	movs	r2, #32
 8005388:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800538a:	2320      	movs	r3, #32
 800538c:	e02a      	b.n	80053e4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f240 523a 	movw	r2, #1338	; 0x53a
 8005396:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	061a      	lsls	r2, r3, #24
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80053ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	0e1b      	lsrs	r3, r3, #24
 80053b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	601a      	str	r2, [r3, #0]
    scr++;
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	3304      	adds	r3, #4
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	061a      	lsls	r2, r3, #24
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80053d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	0e1b      	lsrs	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	373c      	adds	r7, #60	; 0x3c
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}

080053ec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d03f      	beq.n	8005486 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e033      	b.n	8005474 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f8bc 	bl	800558e <SDIO_ReadFIFO>
 8005416:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3b01      	subs	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3b01      	subs	r3, #1
 8005440:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3301      	adds	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	3b01      	subs	r3, #1
 8005456:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	0e1b      	lsrs	r3, r3, #24
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3301      	adds	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3b01      	subs	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	3301      	adds	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b07      	cmp	r3, #7
 8005478:	d9c8      	bls.n	800540c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d043      	beq.n	8005530 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e037      	b.n	800551e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3b01      	subs	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	021a      	lsls	r2, r3, #8
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	041a      	lsls	r2, r3, #16
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	061a      	lsls	r2, r3, #24
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3b01      	subs	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f107 0208 	add.w	r2, r7, #8
 8005510:	4611      	mov	r1, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f848 	bl	80055a8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	3301      	adds	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b07      	cmp	r3, #7
 8005522:	d9c4      	bls.n	80054ae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005530:	bf00      	nop
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005538:	b084      	sub	sp, #16
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	f107 001c 	add.w	r0, r7, #28
 8005546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800554e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005550:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005552:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005556:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800555a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800555e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005562:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005572:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	b004      	add	sp, #16
 800558c:	4770      	bx	lr

0800558e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2203      	movs	r2, #3
 80055d6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80055d8:	2002      	movs	r0, #2
 80055da:	f7fc fc09 	bl	8001df0 <HAL_Delay>
  
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0303 	and.w	r3, r3, #3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005622:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005628:	431a      	orrs	r2, r3
                       Command->CPSM);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800562e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800563e:	f023 030f 	bic.w	r3, r3, #15
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	b2db      	uxtb	r3, r3
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3314      	adds	r3, #20
 8005680:	461a      	mov	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	4413      	add	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
}  
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80056c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80056ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0

}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80056fe:	2310      	movs	r3, #16
 8005700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005702:	2340      	movs	r3, #64	; 0x40
 8005704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800570a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff ff74 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800571c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005720:	2110      	movs	r1, #16
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa40 	bl	8005ba8 <SDMMC_GetCmdResp1>
 8005728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800572a:	69fb      	ldr	r3, [r7, #28]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005742:	2311      	movs	r3, #17
 8005744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800574e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005754:	f107 0308 	add.w	r3, r7, #8
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff52 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	2111      	movs	r1, #17
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa1e 	bl	8005ba8 <SDMMC_GetCmdResp1>
 800576c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800576e:	69fb      	ldr	r3, [r7, #28]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005786:	2312      	movs	r3, #18
 8005788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800578a:	2340      	movs	r3, #64	; 0x40
 800578c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005796:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005798:	f107 0308 	add.w	r3, r7, #8
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff ff30 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80057a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a8:	2112      	movs	r1, #18
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9fc 	bl	8005ba8 <SDMMC_GetCmdResp1>
 80057b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057b2:	69fb      	ldr	r3, [r7, #28]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80057ca:	2318      	movs	r3, #24
 80057cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057ce:	2340      	movs	r3, #64	; 0x40
 80057d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057dc:	f107 0308 	add.w	r3, r7, #8
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff ff0e 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80057e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ec:	2118      	movs	r1, #24
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9da 	bl	8005ba8 <SDMMC_GetCmdResp1>
 80057f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057f6:	69fb      	ldr	r3, [r7, #28]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800580e:	2319      	movs	r3, #25
 8005810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005812:	2340      	movs	r3, #64	; 0x40
 8005814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800581a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800581e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005820:	f107 0308 	add.w	r3, r7, #8
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff feec 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800582c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005830:	2119      	movs	r1, #25
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9b8 	bl	8005ba8 <SDMMC_GetCmdResp1>
 8005838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005850:	230c      	movs	r3, #12
 8005852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800585c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005860:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005862:	f107 0308 	add.w	r3, r7, #8
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fecb 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800586e:	4a05      	ldr	r2, [pc, #20]	; (8005884 <SDMMC_CmdStopTransfer+0x40>)
 8005870:	210c      	movs	r1, #12
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f998 	bl	8005ba8 <SDMMC_GetCmdResp1>
 8005878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800587a:	69fb      	ldr	r3, [r7, #28]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3720      	adds	r7, #32
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	05f5e100 	.word	0x05f5e100

08005888 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005898:	2307      	movs	r3, #7
 800589a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800589c:	2340      	movs	r3, #64	; 0x40
 800589e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4619      	mov	r1, r3
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff fea7 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	2107      	movs	r1, #7
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f973 	bl	8005ba8 <SDMMC_GetCmdResp1>
 80058c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3728      	adds	r7, #40	; 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b088      	sub	sp, #32
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ec:	f107 0308 	add.w	r3, r7, #8
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fe86 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f92d 	bl	8005b58 <SDMMC_GetCmdError>
 80058fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005900:	69fb      	ldr	r3, [r7, #28]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b088      	sub	sp, #32
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005912:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005916:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005918:	2308      	movs	r3, #8
 800591a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800591c:	2340      	movs	r3, #64	; 0x40
 800591e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005928:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fe67 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fb16 	bl	8005f68 <SDMMC_GetCmdResp7>
 800593c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800593e:	69fb      	ldr	r3, [r7, #28]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005956:	2337      	movs	r3, #55	; 0x37
 8005958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800595a:	2340      	movs	r3, #64	; 0x40
 800595c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005966:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005968:	f107 0308 	add.w	r3, r7, #8
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff fe48 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	2137      	movs	r1, #55	; 0x37
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f914 	bl	8005ba8 <SDMMC_GetCmdResp1>
 8005980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005982:	69fb      	ldr	r3, [r7, #28]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800599c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80059a2:	2329      	movs	r3, #41	; 0x29
 80059a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059a6:	2340      	movs	r3, #64	; 0x40
 80059a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059b4:	f107 0308 	add.w	r3, r7, #8
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fe22 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fa23 	bl	8005e0c <SDMMC_GetCmdResp3>
 80059c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059c8:	69fb      	ldr	r3, [r7, #28]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80059e0:	2306      	movs	r3, #6
 80059e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059e4:	2340      	movs	r3, #64	; 0x40
 80059e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059f2:	f107 0308 	add.w	r3, r7, #8
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fe03 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80059fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a02:	2106      	movs	r1, #6
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f8cf 	bl	8005ba8 <SDMMC_GetCmdResp1>
 8005a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b088      	sub	sp, #32
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005a22:	2333      	movs	r3, #51	; 0x33
 8005a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a26:	2340      	movs	r3, #64	; 0x40
 8005a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a34:	f107 0308 	add.w	r3, r7, #8
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff fde2 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a44:	2133      	movs	r1, #51	; 0x33
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f8ae 	bl	8005ba8 <SDMMC_GetCmdResp1>
 8005a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a64:	2302      	movs	r3, #2
 8005a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a68:	23c0      	movs	r3, #192	; 0xc0
 8005a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff fdc1 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f97c 	bl	8005d80 <SDMMC_GetCmdResp2>
 8005a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005aa2:	2309      	movs	r3, #9
 8005aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005aa6:	23c0      	movs	r3, #192	; 0xc0
 8005aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ab4:	f107 0308 	add.w	r3, r7, #8
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fda2 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f95d 	bl	8005d80 <SDMMC_GetCmdResp2>
 8005ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b088      	sub	sp, #32
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005af2:	f107 0308 	add.w	r3, r7, #8
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fd83 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	2103      	movs	r1, #3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9bc 	bl	8005e80 <SDMMC_GetCmdResp6>
 8005b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005b22:	230d      	movs	r3, #13
 8005b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b26:	2340      	movs	r3, #64	; 0x40
 8005b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b34:	f107 0308 	add.w	r3, r7, #8
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fd62 	bl	8005604 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b44:	210d      	movs	r1, #13
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f82e 	bl	8005ba8 <SDMMC_GetCmdResp1>
 8005b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005b58:	b490      	push	{r4, r7}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <SDMMC_GetCmdError+0x48>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <SDMMC_GetCmdError+0x4c>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	0a5b      	lsrs	r3, r3, #9
 8005b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b74:	4623      	mov	r3, r4
 8005b76:	1e5c      	subs	r4, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b80:	e009      	b.n	8005b96 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f2      	beq.n	8005b74 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	22c5      	movs	r2, #197	; 0xc5
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc90      	pop	{r4, r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	20000000 	.word	0x20000000
 8005ba4:	10624dd3 	.word	0x10624dd3

08005ba8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005bb6:	4b6f      	ldr	r3, [pc, #444]	; (8005d74 <SDMMC_GetCmdResp1+0x1cc>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a6f      	ldr	r2, [pc, #444]	; (8005d78 <SDMMC_GetCmdResp1+0x1d0>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	0a5b      	lsrs	r3, r3, #9
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005bc8:	4623      	mov	r3, r4
 8005bca:	1e5c      	subs	r4, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bd4:	e0c9      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <SDMMC_GetCmdResp1+0x20>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1eb      	bne.n	8005bc8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c02:	2304      	movs	r3, #4
 8005c04:	e0b1      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0a6      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	22c5      	movs	r2, #197	; 0xc5
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fd18 	bl	8005658 <SDIO_GetCommandResponse>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d001      	beq.n	8005c36 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e099      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c36:	2100      	movs	r1, #0
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fd1a 	bl	8005672 <SDIO_GetResponse>
 8005c3e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4b4e      	ldr	r3, [pc, #312]	; (8005d7c <SDMMC_GetCmdResp1+0x1d4>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e08d      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da02      	bge.n	8005c5a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c58:	e087      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c64:	2340      	movs	r3, #64	; 0x40
 8005c66:	e080      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	e079      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c84:	e071      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c94:	e069      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca4:	e061      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005cb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cb4:	e059      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cc4:	e051      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cd4:	e049      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ce4:	e041      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf4:	e039      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d04:	e031      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005d10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d14:	e029      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005d20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d24:	e021      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005d30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d34:	e019      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d44:	e011      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d54:	e009      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005d60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d64:	e001      	b.n	8005d6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000000 	.word	0x20000000
 8005d78:	10624dd3 	.word	0x10624dd3
 8005d7c:	fdffe008 	.word	0xfdffe008

08005d80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005d80:	b490      	push	{r4, r7}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <SDMMC_GetCmdResp2+0x84>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <SDMMC_GetCmdResp2+0x88>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0a5b      	lsrs	r3, r3, #9
 8005d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	1e5c      	subs	r4, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005da4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005da8:	e026      	b.n	8005df8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <SDMMC_GetCmdResp2+0x1c>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1eb      	bne.n	8005d9c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2204      	movs	r2, #4
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	e00e      	b.n	8005df8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e003      	b.n	8005df8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	22c5      	movs	r2, #197	; 0xc5
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc90      	pop	{r4, r7}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000000 	.word	0x20000000
 8005e08:	10624dd3 	.word	0x10624dd3

08005e0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005e0c:	b490      	push	{r4, r7}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e14:	4b18      	ldr	r3, [pc, #96]	; (8005e78 <SDMMC_GetCmdResp3+0x6c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <SDMMC_GetCmdResp3+0x70>)
 8005e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1e:	0a5b      	lsrs	r3, r3, #9
 8005e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e28:	4623      	mov	r3, r4
 8005e2a:	1e5c      	subs	r4, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e34:	e01b      	b.n	8005e6e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <SDMMC_GetCmdResp3+0x1c>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1eb      	bne.n	8005e28 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e62:	2304      	movs	r3, #4
 8005e64:	e003      	b.n	8005e6e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	22c5      	movs	r2, #197	; 0xc5
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc90      	pop	{r4, r7}
 8005e76:	4770      	bx	lr
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	10624dd3 	.word	0x10624dd3

08005e80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e8e:	4b34      	ldr	r3, [pc, #208]	; (8005f60 <SDMMC_GetCmdResp6+0xe0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <SDMMC_GetCmdResp6+0xe4>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	0a5b      	lsrs	r3, r3, #9
 8005e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	1e5c      	subs	r4, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005eaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005eae:	e052      	b.n	8005f56 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f0      	beq.n	8005ea2 <SDMMC_GetCmdResp6+0x22>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1eb      	bne.n	8005ea2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005edc:	2304      	movs	r3, #4
 8005ede:	e03a      	b.n	8005f56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e02f      	b.n	8005f56 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fbae 	bl	8005658 <SDIO_GetCommandResponse>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d001      	beq.n	8005f0a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e025      	b.n	8005f56 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22c5      	movs	r2, #197	; 0xc5
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005f10:	2100      	movs	r1, #0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff fbad 	bl	8005672 <SDIO_GetResponse>
 8005f18:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e011      	b.n	8005f56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f40:	e009      	b.n	8005f56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f50:	e001      	b.n	8005f56 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd90      	pop	{r4, r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000000 	.word	0x20000000
 8005f64:	10624dd3 	.word	0x10624dd3

08005f68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005f68:	b490      	push	{r4, r7}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <SDMMC_GetCmdResp7+0x90>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <SDMMC_GetCmdResp7+0x94>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005f84:	4623      	mov	r3, r4
 8005f86:	1e5c      	subs	r4, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f90:	e02c      	b.n	8005fec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <SDMMC_GetCmdResp7+0x1c>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1eb      	bne.n	8005f84 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2204      	movs	r2, #4
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	e014      	b.n	8005fec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e009      	b.n	8005fec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2240      	movs	r2, #64	; 0x40
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fea:	2300      	movs	r3, #0
  
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc90      	pop	{r4, r7}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000000 	.word	0x20000000
 8005ffc:	10624dd3 	.word	0x10624dd3

08006000 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006004:	4904      	ldr	r1, [pc, #16]	; (8006018 <MX_FATFS_Init+0x18>)
 8006006:	4805      	ldr	r0, [pc, #20]	; (800601c <MX_FATFS_Init+0x1c>)
 8006008:	f004 fd8a 	bl	800ab20 <FATFS_LinkDriver>
 800600c:	4603      	mov	r3, r0
 800600e:	461a      	mov	r2, r3
 8006010:	4b03      	ldr	r3, [pc, #12]	; (8006020 <MX_FATFS_Init+0x20>)
 8006012:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000404 	.word	0x20000404
 800601c:	0800e8fc 	.word	0x0800e8fc
 8006020:	20000400 	.word	0x20000400

08006024 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006028:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800602a:	4618      	mov	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800603e:	f000 f896 	bl	800616e <BSP_SD_IsDetected>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d001      	beq.n	800604c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e012      	b.n	8006072 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800604c:	480b      	ldr	r0, [pc, #44]	; (800607c <BSP_SD_Init+0x48>)
 800604e:	f7fd ff75 	bl	8003f3c <HAL_SD_Init>
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800605c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006060:	4806      	ldr	r0, [pc, #24]	; (800607c <BSP_SD_Init+0x48>)
 8006062:	f7fe fd35 	bl	8004ad0 <HAL_SD_ConfigWideBusOperation>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006070:	79fb      	ldrb	r3, [r7, #7]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	2000034c 	.word	0x2000034c

08006080 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	4806      	ldr	r0, [pc, #24]	; (80060b0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006098:	f7fd ffe0 	bl	800405c <HAL_SD_ReadBlocks_DMA>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	2000034c 	.word	0x2000034c

080060b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	4806      	ldr	r0, [pc, #24]	; (80060e4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80060cc:	f7fe f8b0 	bl	8004230 <HAL_SD_WriteBlocks_DMA>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	2000034c 	.word	0x2000034c

080060e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <BSP_SD_GetCardState+0x1c>)
 80060ee:	f7fe fd6b 	bl	8004bc8 <HAL_SD_GetCardState>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
}
 80060fe:	4618      	mov	r0, r3
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000034c 	.word	0x2000034c

08006108 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4803      	ldr	r0, [pc, #12]	; (8006120 <BSP_SD_GetCardInfo+0x18>)
 8006114:	f7fe fcb0 	bl	8004a78 <HAL_SD_GetCardInfo>
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	2000034c 	.word	0x2000034c

08006124 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800612c:	f000 f818 	bl	8006160 <BSP_SD_AbortCallback>
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006140:	f000 f9a8 	bl	8006494 <BSP_SD_WriteCpltCallback>
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006154:	f000 f9aa 	bl	80064ac <BSP_SD_ReadCpltCallback>
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0

}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006174:	2301      	movs	r3, #1
 8006176:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006178:	f000 f80c 	bl	8006194 <BSP_PlatformIsDetected>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006182:	2300      	movs	r3, #0
 8006184:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	b2db      	uxtb	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800619a:	2301      	movs	r3, #1
 800619c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800619e:	2110      	movs	r1, #16
 80061a0:	4806      	ldr	r0, [pc, #24]	; (80061bc <BSP_PlatformIsDetected+0x28>)
 80061a2:	f7fc ffd9 	bl	8003158 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80061ac:	2300      	movs	r3, #0
 80061ae:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80061b0:	79fb      	ldrb	r3, [r7, #7]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40020800 	.word	0x40020800

080061c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80061c8:	f7fb fe06 	bl	8001dd8 <HAL_GetTick>
 80061cc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80061ce:	e006      	b.n	80061de <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061d0:	f7ff ff8a 	bl	80060e8 <BSP_SD_GetCardState>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	e009      	b.n	80061f2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80061de:	f7fb fdfb 	bl	8001dd8 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d8f0      	bhi.n	80061d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <SD_CheckStatus+0x38>)
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800620c:	f7ff ff6c 	bl	80060e8 <BSP_SD_GetCardState>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d107      	bne.n	8006226 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <SD_CheckStatus+0x38>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b04      	ldr	r3, [pc, #16]	; (8006234 <SD_CheckStatus+0x38>)
 8006224:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006226:	4b03      	ldr	r3, [pc, #12]	; (8006234 <SD_CheckStatus+0x38>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	b2db      	uxtb	r3, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000009 	.word	0x20000009

08006238 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006242:	f7ff fef7 	bl	8006034 <BSP_SD_Init>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d107      	bne.n	800625c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff ffd4 	bl	80061fc <SD_CheckStatus>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	4b04      	ldr	r3, [pc, #16]	; (800626c <SD_initialize+0x34>)
 800625a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <SD_initialize+0x34>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	b2db      	uxtb	r3, r3
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000009 	.word	0x20000009

08006270 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff ffbd 	bl	80061fc <SD_CheckStatus>
 8006282:	4603      	mov	r3, r0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80062a4:	f7ff ff8c 	bl	80061c0 <SD_CheckStatusWithTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	da01      	bge.n	80062b2 <SD_read+0x26>
  {
    return res;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	e03b      	b.n	800632a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	68b8      	ldr	r0, [r7, #8]
 80062b8:	f7ff fee2 	bl	8006080 <BSP_SD_ReadBlocks_DMA>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d132      	bne.n	8006328 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80062c2:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <SD_read+0xa8>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80062c8:	f7fb fd86 	bl	8001dd8 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80062ce:	bf00      	nop
 80062d0:	4b18      	ldr	r3, [pc, #96]	; (8006334 <SD_read+0xa8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d108      	bne.n	80062ea <SD_read+0x5e>
 80062d8:	f7fb fd7e 	bl	8001dd8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d9f2      	bls.n	80062d0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <SD_read+0xa8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
 80062f6:	e017      	b.n	8006328 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80062f8:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <SD_read+0xa8>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80062fe:	f7fb fd6b 	bl	8001dd8 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006304:	e007      	b.n	8006316 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006306:	f7ff feef 	bl	80060e8 <BSP_SD_GetCardState>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <SD_read+0x8a>
          {
            res = RES_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006314:	e008      	b.n	8006328 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006316:	f7fb fd5f 	bl	8001dd8 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f247 522f 	movw	r2, #29999	; 0x752f
 8006324:	4293      	cmp	r3, r2
 8006326:	d9ee      	bls.n	8006306 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000208 	.word	0x20000208

08006338 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800634c:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <SD_write+0xa8>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006352:	f247 5030 	movw	r0, #30000	; 0x7530
 8006356:	f7ff ff33 	bl	80061c0 <SD_CheckStatusWithTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	da01      	bge.n	8006364 <SD_write+0x2c>
  {
    return res;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	e038      	b.n	80063d6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	68b8      	ldr	r0, [r7, #8]
 800636a:	f7ff fea3 	bl	80060b4 <BSP_SD_WriteBlocks_DMA>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d12f      	bne.n	80063d4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006374:	f7fb fd30 	bl	8001dd8 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800637a:	bf00      	nop
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <SD_write+0xa8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d108      	bne.n	8006396 <SD_write+0x5e>
 8006384:	f7fb fd28 	bl	8001dd8 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	f247 522f 	movw	r2, #29999	; 0x752f
 8006392:	4293      	cmp	r3, r2
 8006394:	d9f2      	bls.n	800637c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8006396:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <SD_write+0xa8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
 80063a2:	e017      	b.n	80063d4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <SD_write+0xa8>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80063aa:	f7fb fd15 	bl	8001dd8 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063b0:	e007      	b.n	80063c2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063b2:	f7ff fe99 	bl	80060e8 <BSP_SD_GetCardState>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <SD_write+0x8a>
          {
            res = RES_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	75fb      	strb	r3, [r7, #23]
            break;
 80063c0:	e008      	b.n	80063d4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063c2:	f7fb fd09 	bl	8001dd8 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d9ee      	bls.n	80063b2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000204 	.word	0x20000204

080063e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08c      	sub	sp, #48	; 0x30
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	603a      	str	r2, [r7, #0]
 80063ee:	71fb      	strb	r3, [r7, #7]
 80063f0:	460b      	mov	r3, r1
 80063f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80063fa:	4b25      	ldr	r3, [pc, #148]	; (8006490 <SD_ioctl+0xac>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <SD_ioctl+0x28>
 8006408:	2303      	movs	r3, #3
 800640a:	e03c      	b.n	8006486 <SD_ioctl+0xa2>

  switch (cmd)
 800640c:	79bb      	ldrb	r3, [r7, #6]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d834      	bhi.n	800647c <SD_ioctl+0x98>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <SD_ioctl+0x34>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006429 	.word	0x08006429
 800641c:	08006431 	.word	0x08006431
 8006420:	08006449 	.word	0x08006449
 8006424:	08006463 	.word	0x08006463
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800642e:	e028      	b.n	8006482 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fe67 	bl	8006108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800643a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006446:	e01c      	b.n	8006482 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fe5b 	bl	8006108 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	b29a      	uxth	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006460:	e00f      	b.n	8006482 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006462:	f107 030c 	add.w	r3, r7, #12
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fe4e 	bl	8006108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	0a5a      	lsrs	r2, r3, #9
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800647a:	e002      	b.n	8006482 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800647c:	2304      	movs	r3, #4
 800647e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006486:	4618      	mov	r0, r3
 8006488:	3730      	adds	r7, #48	; 0x30
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000009 	.word	0x20000009

08006494 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006498:	4b03      	ldr	r3, [pc, #12]	; (80064a8 <BSP_SD_WriteCpltCallback+0x14>)
 800649a:	2201      	movs	r2, #1
 800649c:	601a      	str	r2, [r3, #0]
}
 800649e:	bf00      	nop
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	20000204 	.word	0x20000204

080064ac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80064b0:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <BSP_SD_ReadCpltCallback+0x14>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
}
 80064b6:	bf00      	nop
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	20000208 	.word	0x20000208

080064c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <disk_status+0x30>)
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	79fa      	ldrb	r2, [r7, #7]
 80064dc:	4905      	ldr	r1, [pc, #20]	; (80064f4 <disk_status+0x30>)
 80064de:	440a      	add	r2, r1
 80064e0:	7a12      	ldrb	r2, [r2, #8]
 80064e2:	4610      	mov	r0, r2
 80064e4:	4798      	blx	r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000234 	.word	0x20000234

080064f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <disk_initialize+0x48>)
 800650a:	5cd3      	ldrb	r3, [r2, r3]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d111      	bne.n	8006534 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	4a0b      	ldr	r2, [pc, #44]	; (8006540 <disk_initialize+0x48>)
 8006514:	2101      	movs	r1, #1
 8006516:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <disk_initialize+0x48>)
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	79fa      	ldrb	r2, [r7, #7]
 8006526:	4906      	ldr	r1, [pc, #24]	; (8006540 <disk_initialize+0x48>)
 8006528:	440a      	add	r2, r1
 800652a:	7a12      	ldrb	r2, [r2, #8]
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000234 	.word	0x20000234

08006544 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	4a0a      	ldr	r2, [pc, #40]	; (8006580 <disk_read+0x3c>)
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	689c      	ldr	r4, [r3, #8]
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4a07      	ldr	r2, [pc, #28]	; (8006580 <disk_read+0x3c>)
 8006564:	4413      	add	r3, r2
 8006566:	7a18      	ldrb	r0, [r3, #8]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	47a0      	blx	r4
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]
  return res;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
}
 8006576:	4618      	mov	r0, r3
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	bd90      	pop	{r4, r7, pc}
 800657e:	bf00      	nop
 8006580:	20000234 	.word	0x20000234

08006584 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <disk_write+0x3c>)
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68dc      	ldr	r4, [r3, #12]
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	4a07      	ldr	r2, [pc, #28]	; (80065c0 <disk_write+0x3c>)
 80065a4:	4413      	add	r3, r2
 80065a6:	7a18      	ldrb	r0, [r3, #8]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	47a0      	blx	r4
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd90      	pop	{r4, r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000234 	.word	0x20000234

080065c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	603a      	str	r2, [r7, #0]
 80065ce:	71fb      	strb	r3, [r7, #7]
 80065d0:	460b      	mov	r3, r1
 80065d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <disk_ioctl+0x38>)
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	79fa      	ldrb	r2, [r7, #7]
 80065e2:	4906      	ldr	r1, [pc, #24]	; (80065fc <disk_ioctl+0x38>)
 80065e4:	440a      	add	r2, r1
 80065e6:	7a10      	ldrb	r0, [r2, #8]
 80065e8:	79b9      	ldrb	r1, [r7, #6]
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4798      	blx	r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000234 	.word	0x20000234

08006600 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3301      	adds	r3, #1
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006610:	89fb      	ldrh	r3, [r7, #14]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	b21a      	sxth	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	b21b      	sxth	r3, r3
 800661c:	4313      	orrs	r3, r2
 800661e:	b21b      	sxth	r3, r3
 8006620:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006622:	89fb      	ldrh	r3, [r7, #14]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3303      	adds	r3, #3
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	3202      	adds	r2, #2
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	3201      	adds	r2, #1
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
	return rv;
 8006668:	68fb      	ldr	r3, [r7, #12]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8006676:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3307      	adds	r3, #7
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f04f 0400 	mov.w	r4, #0
 800668c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8006690:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006694:	f04f 0b00 	mov.w	fp, #0
 8006698:	f04f 0c00 	mov.w	ip, #0
 800669c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80066a0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80066a4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	3206      	adds	r2, #6
 80066ac:	7812      	ldrb	r2, [r2, #0]
 80066ae:	b2d1      	uxtb	r1, r2
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	ea4b 0301 	orr.w	r3, fp, r1
 80066b8:	ea4c 0402 	orr.w	r4, ip, r2
 80066bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 80066c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	f04f 0c00 	mov.w	ip, #0
 80066cc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80066d0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80066d4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	3205      	adds	r2, #5
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	b2d1      	uxtb	r1, r2
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	ea4b 0301 	orr.w	r3, fp, r1
 80066e8:	ea4c 0402 	orr.w	r4, ip, r2
 80066ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 80066f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066f4:	f04f 0b00 	mov.w	fp, #0
 80066f8:	f04f 0c00 	mov.w	ip, #0
 80066fc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006700:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006704:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	3204      	adds	r2, #4
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	b2d1      	uxtb	r1, r2
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	ea4b 0301 	orr.w	r3, fp, r1
 8006718:	ea4c 0402 	orr.w	r4, ip, r2
 800671c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8006720:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006724:	f04f 0b00 	mov.w	fp, #0
 8006728:	f04f 0c00 	mov.w	ip, #0
 800672c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006730:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006734:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	3203      	adds	r2, #3
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	b2d1      	uxtb	r1, r2
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	ea4b 0301 	orr.w	r3, fp, r1
 8006748:	ea4c 0402 	orr.w	r4, ip, r2
 800674c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8006750:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006754:	f04f 0b00 	mov.w	fp, #0
 8006758:	f04f 0c00 	mov.w	ip, #0
 800675c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006760:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006764:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	3202      	adds	r2, #2
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	b2d1      	uxtb	r1, r2
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	ea4b 0301 	orr.w	r3, fp, r1
 8006778:	ea4c 0402 	orr.w	r4, ip, r2
 800677c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8006780:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006784:	f04f 0b00 	mov.w	fp, #0
 8006788:	f04f 0c00 	mov.w	ip, #0
 800678c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006790:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006794:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	3201      	adds	r2, #1
 800679c:	7812      	ldrb	r2, [r2, #0]
 800679e:	b2d1      	uxtb	r1, r2
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	ea4b 0301 	orr.w	r3, fp, r1
 80067a8:	ea4c 0402 	orr.w	r4, ip, r2
 80067ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 80067b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067b4:	f04f 0b00 	mov.w	fp, #0
 80067b8:	f04f 0c00 	mov.w	ip, #0
 80067bc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80067c0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80067c4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	b2d1      	uxtb	r1, r2
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	ea4b 0301 	orr.w	r3, fp, r1
 80067d6:	ea4c 0402 	orr.w	r4, ip, r2
 80067da:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 80067de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	4621      	mov	r1, r4
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80067ee:	4770      	bx	lr

080067f0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	887a      	ldrh	r2, [r7, #2]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	887a      	ldrh	r2, [r7, #2]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800687e:	b490      	push	{r4, r7}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	60fa      	str	r2, [r7, #12]
 8006890:	783a      	ldrb	r2, [r7, #0]
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	f04f 0400 	mov.w	r4, #0
 80068a0:	0a0b      	lsrs	r3, r1, #8
 80068a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80068a6:	0a14      	lsrs	r4, r2, #8
 80068a8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	60fa      	str	r2, [r7, #12]
 80068b2:	783a      	ldrb	r2, [r7, #0]
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	f04f 0400 	mov.w	r4, #0
 80068c2:	0a0b      	lsrs	r3, r1, #8
 80068c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80068c8:	0a14      	lsrs	r4, r2, #8
 80068ca:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	60fa      	str	r2, [r7, #12]
 80068d4:	783a      	ldrb	r2, [r7, #0]
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	0a0b      	lsrs	r3, r1, #8
 80068e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80068ea:	0a14      	lsrs	r4, r2, #8
 80068ec:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	60fa      	str	r2, [r7, #12]
 80068f6:	783a      	ldrb	r2, [r7, #0]
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	f04f 0400 	mov.w	r4, #0
 8006906:	0a0b      	lsrs	r3, r1, #8
 8006908:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800690c:	0a14      	lsrs	r4, r2, #8
 800690e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	60fa      	str	r2, [r7, #12]
 8006918:	783a      	ldrb	r2, [r7, #0]
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	f04f 0400 	mov.w	r4, #0
 8006928:	0a0b      	lsrs	r3, r1, #8
 800692a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800692e:	0a14      	lsrs	r4, r2, #8
 8006930:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	60fa      	str	r2, [r7, #12]
 800693a:	783a      	ldrb	r2, [r7, #0]
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	f04f 0400 	mov.w	r4, #0
 800694a:	0a0b      	lsrs	r3, r1, #8
 800694c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006950:	0a14      	lsrs	r4, r2, #8
 8006952:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	60fa      	str	r2, [r7, #12]
 800695c:	783a      	ldrb	r2, [r7, #0]
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	f04f 0400 	mov.w	r4, #0
 800696c:	0a0b      	lsrs	r3, r1, #8
 800696e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006972:	0a14      	lsrs	r4, r2, #8
 8006974:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	60fa      	str	r2, [r7, #12]
 800697e:	783a      	ldrb	r2, [r7, #0]
 8006980:	701a      	strb	r2, [r3, #0]
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bc90      	pop	{r4, r7}
 800698a:	4770      	bx	lr

0800698c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00d      	beq.n	80069c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	1c53      	adds	r3, r2, #1
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	1c59      	adds	r1, r3, #1
 80069b0:	6179      	str	r1, [r7, #20]
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f1      	bne.n	80069a6 <mem_cpy+0x1a>
	}
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80069ce:	b480      	push	{r7}
 80069d0:	b087      	sub	sp, #28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	617a      	str	r2, [r7, #20]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f3      	bne.n	80069de <mem_set+0x10>
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006a02:	b480      	push	{r7}
 8006a04:	b089      	sub	sp, #36	; 0x24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	61fa      	str	r2, [r7, #28]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	4619      	mov	r1, r3
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	61ba      	str	r2, [r7, #24]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	1acb      	subs	r3, r1, r3
 8006a2e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	607b      	str	r3, [r7, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <mem_cmp+0x40>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0eb      	beq.n	8006a1a <mem_cmp+0x18>

	return r;
 8006a42:	697b      	ldr	r3, [r7, #20]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3724      	adds	r7, #36	; 0x24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006a5a:	e002      	b.n	8006a62 <chk_chr+0x12>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	607b      	str	r3, [r7, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <chk_chr+0x26>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d1f2      	bne.n	8006a5c <chk_chr+0xc>
	return *str;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	781b      	ldrb	r3, [r3, #0]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e029      	b.n	8006af0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006a9c:	4a27      	ldr	r2, [pc, #156]	; (8006b3c <chk_lock+0xb4>)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	4413      	add	r3, r2
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01d      	beq.n	8006ae6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006aaa:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <chk_lock+0xb4>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	4413      	add	r3, r2
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d116      	bne.n	8006aea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006abc:	4a1f      	ldr	r2, [pc, #124]	; (8006b3c <chk_lock+0xb4>)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d10c      	bne.n	8006aea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ad0:	4a1a      	ldr	r2, [pc, #104]	; (8006b3c <chk_lock+0xb4>)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3308      	adds	r3, #8
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d102      	bne.n	8006aea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ae4:	e007      	b.n	8006af6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d9d2      	bls.n	8006a9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d109      	bne.n	8006b10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <chk_lock+0x80>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d101      	bne.n	8006b0c <chk_lock+0x84>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e010      	b.n	8006b2e <chk_lock+0xa6>
 8006b0c:	2312      	movs	r3, #18
 8006b0e:	e00e      	b.n	8006b2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d108      	bne.n	8006b28 <chk_lock+0xa0>
 8006b16:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <chk_lock+0xb4>)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	4413      	add	r3, r2
 8006b1e:	330c      	adds	r3, #12
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b26:	d101      	bne.n	8006b2c <chk_lock+0xa4>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	e000      	b.n	8006b2e <chk_lock+0xa6>
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	20000214 	.word	0x20000214

08006b40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b46:	2300      	movs	r3, #0
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	e002      	b.n	8006b52 <enq_lock+0x12>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	607b      	str	r3, [r7, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d806      	bhi.n	8006b66 <enq_lock+0x26>
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <enq_lock+0x40>)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	4413      	add	r3, r2
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f2      	bne.n	8006b4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	bf14      	ite	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	2300      	moveq	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20000214 	.word	0x20000214

08006b84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e01f      	b.n	8006bd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006b94:	4a41      	ldr	r2, [pc, #260]	; (8006c9c <inc_lock+0x118>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	4413      	add	r3, r2
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d113      	bne.n	8006bce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006ba6:	4a3d      	ldr	r2, [pc, #244]	; (8006c9c <inc_lock+0x118>)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	4413      	add	r3, r2
 8006bae:	3304      	adds	r3, #4
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d109      	bne.n	8006bce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006bba:	4a38      	ldr	r2, [pc, #224]	; (8006c9c <inc_lock+0x118>)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d006      	beq.n	8006bdc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d9dc      	bls.n	8006b94 <inc_lock+0x10>
 8006bda:	e000      	b.n	8006bde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006bdc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d132      	bne.n	8006c4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e002      	b.n	8006bf0 <inc_lock+0x6c>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d806      	bhi.n	8006c04 <inc_lock+0x80>
 8006bf6:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <inc_lock+0x118>)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	4413      	add	r3, r2
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f2      	bne.n	8006bea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d101      	bne.n	8006c0e <inc_lock+0x8a>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e040      	b.n	8006c90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4922      	ldr	r1, [pc, #136]	; (8006c9c <inc_lock+0x118>)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	440b      	add	r3, r1
 8006c1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	491e      	ldr	r1, [pc, #120]	; (8006c9c <inc_lock+0x118>)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	440b      	add	r3, r1
 8006c28:	3304      	adds	r3, #4
 8006c2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c30:	491a      	ldr	r1, [pc, #104]	; (8006c9c <inc_lock+0x118>)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	440b      	add	r3, r1
 8006c38:	3308      	adds	r3, #8
 8006c3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <inc_lock+0x118>)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4413      	add	r3, r2
 8006c44:	330c      	adds	r3, #12
 8006c46:	2200      	movs	r2, #0
 8006c48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <inc_lock+0xe0>
 8006c50:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <inc_lock+0x118>)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	4413      	add	r3, r2
 8006c58:	330c      	adds	r3, #12
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <inc_lock+0xe0>
 8006c60:	2300      	movs	r3, #0
 8006c62:	e015      	b.n	8006c90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d108      	bne.n	8006c7c <inc_lock+0xf8>
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	; (8006c9c <inc_lock+0x118>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	4413      	add	r3, r2
 8006c72:	330c      	adds	r3, #12
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	e001      	b.n	8006c80 <inc_lock+0xfc>
 8006c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c80:	4906      	ldr	r1, [pc, #24]	; (8006c9c <inc_lock+0x118>)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	440b      	add	r3, r1
 8006c88:	330c      	adds	r3, #12
 8006c8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	20000214 	.word	0x20000214

08006ca0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d825      	bhi.n	8006d00 <dec_lock+0x60>
		n = Files[i].ctr;
 8006cb4:	4a17      	ldr	r2, [pc, #92]	; (8006d14 <dec_lock+0x74>)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	4413      	add	r3, r2
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006cc2:	89fb      	ldrh	r3, [r7, #14]
 8006cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc8:	d101      	bne.n	8006cce <dec_lock+0x2e>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006cce:	89fb      	ldrh	r3, [r7, #14]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <dec_lock+0x3a>
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006cda:	4a0e      	ldr	r2, [pc, #56]	; (8006d14 <dec_lock+0x74>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	4413      	add	r3, r2
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	89fa      	ldrh	r2, [r7, #14]
 8006ce6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <dec_lock+0x5a>
 8006cee:	4a09      	ldr	r2, [pc, #36]	; (8006d14 <dec_lock+0x74>)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	4413      	add	r3, r2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	737b      	strb	r3, [r7, #13]
 8006cfe:	e001      	b.n	8006d04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006d00:	2302      	movs	r3, #2
 8006d02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006d04:	7b7b      	ldrb	r3, [r7, #13]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000214 	.word	0x20000214

08006d18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e010      	b.n	8006d48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d26:	4a0d      	ldr	r2, [pc, #52]	; (8006d5c <clear_lock+0x44>)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	4413      	add	r3, r2
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d105      	bne.n	8006d42 <clear_lock+0x2a>
 8006d36:	4a09      	ldr	r2, [pc, #36]	; (8006d5c <clear_lock+0x44>)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	4413      	add	r3, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d9eb      	bls.n	8006d26 <clear_lock+0xe>
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000214 	.word	0x20000214

08006d60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	78db      	ldrb	r3, [r3, #3]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d034      	beq.n	8006dde <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7858      	ldrb	r0, [r3, #1]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006d84:	2301      	movs	r3, #1
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	f7ff fbfc 	bl	8006584 <disk_write>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
 8006d96:	e022      	b.n	8006dde <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	1ad2      	subs	r2, r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d217      	bcs.n	8006dde <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	789b      	ldrb	r3, [r3, #2]
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	e010      	b.n	8006dd8 <sync_window+0x78>
					wsect += fs->fsize;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7858      	ldrb	r0, [r3, #1]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006dca:	2301      	movs	r3, #1
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	f7ff fbd9 	bl	8006584 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d8eb      	bhi.n	8006db6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d01b      	beq.n	8006e38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ffad 	bl	8006d60 <sync_window>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d113      	bne.n	8006e38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7858      	ldrb	r0, [r3, #1]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	f7ff fb91 	bl	8006544 <disk_read>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006e28:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ff87 	bl	8006d60 <sync_window>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d159      	bne.n	8006f10 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d149      	bne.n	8006ef8 <sync_fs+0xb4>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	791b      	ldrb	r3, [r3, #4]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d145      	bne.n	8006ef8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	899b      	ldrh	r3, [r3, #12]
 8006e76:	461a      	mov	r2, r3
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f7ff fda8 	bl	80069ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	333c      	adds	r3, #60	; 0x3c
 8006e82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e86:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fcb0 	bl	80067f0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	333c      	adds	r3, #60	; 0x3c
 8006e94:	4921      	ldr	r1, [pc, #132]	; (8006f1c <sync_fs+0xd8>)
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fcc5 	bl	8006826 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	333c      	adds	r3, #60	; 0x3c
 8006ea0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ea4:	491e      	ldr	r1, [pc, #120]	; (8006f20 <sync_fs+0xdc>)
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fcbd 	bl	8006826 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	333c      	adds	r3, #60	; 0x3c
 8006eb0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f7ff fcb3 	bl	8006826 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	333c      	adds	r3, #60	; 0x3c
 8006ec4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7ff fca9 	bl	8006826 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7858      	ldrb	r0, [r3, #1]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eec:	2301      	movs	r3, #1
 8006eee:	f7ff fb49 	bl	8006584 <disk_write>
			fs->fsi_flag = 0;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2200      	movs	r2, #0
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fb5f 	bl	80065c4 <disk_ioctl>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <sync_fs+0xcc>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	41615252 	.word	0x41615252
 8006f20:	61417272 	.word	0x61417272

08006f24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	3b02      	subs	r3, #2
 8006f32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	3b02      	subs	r3, #2
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d301      	bcc.n	8006f44 <clust2sect+0x20>
 8006f40:	2300      	movs	r3, #0
 8006f42:	e008      	b.n	8006f56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	895b      	ldrh	r3, [r3, #10]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	fb03 f202 	mul.w	r2, r3, r2
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f54:	4413      	add	r3, r2
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b089      	sub	sp, #36	; 0x24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d904      	bls.n	8006f84 <get_fat+0x20>
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d302      	bcc.n	8006f8a <get_fat+0x26>
		val = 1;	/* Internal error */
 8006f84:	2301      	movs	r3, #1
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	e13a      	b.n	8007200 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	f200 8126 	bhi.w	80071e8 <get_fat+0x284>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <get_fat+0x40>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08007063 	.word	0x08007063
 8006fac:	080070af 	.word	0x080070af
 8006fb0:	080070ff 	.word	0x080070ff
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	899b      	ldrh	r3, [r3, #12]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fd2:	4413      	add	r3, r2
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	69b8      	ldr	r0, [r7, #24]
 8006fd8:	f7ff ff06 	bl	8006de8 <move_window>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f040 8105 	bne.w	80071ee <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	60fa      	str	r2, [r7, #12]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	8992      	ldrh	r2, [r2, #12]
 8006fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ff2:	fb02 f201 	mul.w	r2, r2, r1
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007000:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	899b      	ldrh	r3, [r3, #12]
 800700a:	4619      	mov	r1, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007012:	4413      	add	r3, r2
 8007014:	4619      	mov	r1, r3
 8007016:	69b8      	ldr	r0, [r7, #24]
 8007018:	f7ff fee6 	bl	8006de8 <move_window>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 80e7 	bne.w	80071f2 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	899b      	ldrh	r3, [r3, #12]
 8007028:	461a      	mov	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007030:	fb02 f201 	mul.w	r2, r2, r1
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	4413      	add	r3, r2
 800703a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	461a      	mov	r2, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4313      	orrs	r3, r2
 8007046:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <get_fat+0xf4>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	e002      	b.n	800705e <get_fat+0xfa>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800705e:	61fb      	str	r3, [r7, #28]
			break;
 8007060:	e0ce      	b.n	8007200 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	899b      	ldrh	r3, [r3, #12]
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	4619      	mov	r1, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	fbb3 f3f1 	udiv	r3, r3, r1
 8007076:	4413      	add	r3, r2
 8007078:	4619      	mov	r1, r3
 800707a:	69b8      	ldr	r0, [r7, #24]
 800707c:	f7ff feb4 	bl	8006de8 <move_window>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	f040 80b7 	bne.w	80071f6 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	8992      	ldrh	r2, [r2, #12]
 8007096:	fbb3 f0f2 	udiv	r0, r3, r2
 800709a:	fb02 f200 	mul.w	r2, r2, r0
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	440b      	add	r3, r1
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff faac 	bl	8006600 <ld_word>
 80070a8:	4603      	mov	r3, r0
 80070aa:	61fb      	str	r3, [r7, #28]
			break;
 80070ac:	e0a8      	b.n	8007200 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	899b      	ldrh	r3, [r3, #12]
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	4619      	mov	r1, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	fbb3 f3f1 	udiv	r3, r3, r1
 80070c2:	4413      	add	r3, r2
 80070c4:	4619      	mov	r1, r3
 80070c6:	69b8      	ldr	r0, [r7, #24]
 80070c8:	f7ff fe8e 	bl	8006de8 <move_window>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 8093 	bne.w	80071fa <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	8992      	ldrh	r2, [r2, #12]
 80070e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80070e6:	fb02 f200 	mul.w	r2, r2, r0
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	440b      	add	r3, r1
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff fa9e 	bl	8006630 <ld_dword>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070fa:	61fb      	str	r3, [r7, #28]
			break;
 80070fc:	e080      	b.n	8007200 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007104:	4323      	orrs	r3, r4
 8007106:	d06f      	beq.n	80071e8 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007118:	f113 30ff 	adds.w	r0, r3, #4294967295
 800711c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	899b      	ldrh	r3, [r3, #12]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f04f 0400 	mov.w	r4, #0
 800712a:	461a      	mov	r2, r3
 800712c:	4623      	mov	r3, r4
 800712e:	f7f9 fdab 	bl	8000c88 <__aeabi_uldivmod>
 8007132:	4603      	mov	r3, r0
 8007134:	460c      	mov	r4, r1
 8007136:	461a      	mov	r2, r3
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	895b      	ldrh	r3, [r3, #10]
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	79db      	ldrb	r3, [r3, #7]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d10e      	bne.n	8007168 <get_fat+0x204>
					if (cofs <= clen) {
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	429a      	cmp	r2, r3
 8007150:	d80a      	bhi.n	8007168 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	429a      	cmp	r2, r3
 8007158:	d002      	beq.n	8007160 <get_fat+0x1fc>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	e001      	b.n	8007164 <get_fat+0x200>
 8007160:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007164:	61fb      	str	r3, [r7, #28]
						break;
 8007166:	e04b      	b.n	8007200 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	79db      	ldrb	r3, [r3, #7]
 800716c:	2b03      	cmp	r3, #3
 800716e:	d108      	bne.n	8007182 <get_fat+0x21e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	429a      	cmp	r2, r3
 8007178:	d203      	bcs.n	8007182 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	61fb      	str	r3, [r7, #28]
					break;
 8007180:	e03e      	b.n	8007200 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	79db      	ldrb	r3, [r3, #7]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d02e      	beq.n	80071e8 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8007192:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007196:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8007198:	e032      	b.n	8007200 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	899b      	ldrh	r3, [r3, #12]
 80071a2:	089b      	lsrs	r3, r3, #2
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80071ae:	4413      	add	r3, r2
 80071b0:	4619      	mov	r1, r3
 80071b2:	69b8      	ldr	r0, [r7, #24]
 80071b4:	f7ff fe18 	bl	8006de8 <move_window>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d11f      	bne.n	80071fe <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	8992      	ldrh	r2, [r2, #12]
 80071cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80071d0:	fb02 f200 	mul.w	r2, r2, r0
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	440b      	add	r3, r1
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff fa29 	bl	8006630 <ld_dword>
 80071de:	4603      	mov	r3, r0
 80071e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071e4:	61fb      	str	r3, [r7, #28]
					break;
 80071e6:	e00b      	b.n	8007200 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80071e8:	2301      	movs	r3, #1
 80071ea:	61fb      	str	r3, [r7, #28]
 80071ec:	e008      	b.n	8007200 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071ee:	bf00      	nop
 80071f0:	e006      	b.n	8007200 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071f2:	bf00      	nop
 80071f4:	e004      	b.n	8007200 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071f6:	bf00      	nop
 80071f8:	e002      	b.n	8007200 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071fa:	bf00      	nop
 80071fc:	e000      	b.n	8007200 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071fe:	bf00      	nop
		}
	}

	return val;
 8007200:	69fb      	ldr	r3, [r7, #28]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3724      	adds	r7, #36	; 0x24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd90      	pop	{r4, r7, pc}
 800720a:	bf00      	nop

0800720c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800720c:	b590      	push	{r4, r7, lr}
 800720e:	b089      	sub	sp, #36	; 0x24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007218:	2302      	movs	r3, #2
 800721a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b01      	cmp	r3, #1
 8007220:	f240 8111 	bls.w	8007446 <put_fat+0x23a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	429a      	cmp	r2, r3
 800722c:	f080 810b 	bcs.w	8007446 <put_fat+0x23a>
		switch (fs->fs_type) {
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	3b01      	subs	r3, #1
 8007236:	2b03      	cmp	r3, #3
 8007238:	f200 8105 	bhi.w	8007446 <put_fat+0x23a>
 800723c:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <put_fat+0x38>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007255 	.word	0x08007255
 8007248:	08007359 	.word	0x08007359
 800724c:	080073af 	.word	0x080073af
 8007250:	080073af 	.word	0x080073af
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	4413      	add	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	899b      	ldrh	r3, [r3, #12]
 800726a:	4619      	mov	r1, r3
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007272:	4413      	add	r3, r2
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7ff fdb6 	bl	8006de8 <move_window>
 800727c:	4603      	mov	r3, r0
 800727e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007280:	7ffb      	ldrb	r3, [r7, #31]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 80d8 	bne.w	8007438 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	61ba      	str	r2, [r7, #24]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	8992      	ldrh	r2, [r2, #12]
 8007298:	fbb3 f0f2 	udiv	r0, r3, r2
 800729c:	fb02 f200 	mul.w	r2, r2, r0
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	440b      	add	r3, r1
 80072a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <put_fat+0xc0>
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	b25b      	sxtb	r3, r3
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	b25a      	sxtb	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	e001      	b.n	80072d0 <put_fat+0xc4>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	899b      	ldrh	r3, [r3, #12]
 80072e2:	4619      	mov	r1, r3
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80072ea:	4413      	add	r3, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff fd7a 	bl	8006de8 <move_window>
 80072f4:	4603      	mov	r3, r0
 80072f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072f8:	7ffb      	ldrb	r3, [r7, #31]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 809e 	bne.w	800743c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	899b      	ldrh	r3, [r3, #12]
 800730a:	461a      	mov	r2, r3
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007312:	fb02 f200 	mul.w	r2, r2, r0
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	440b      	add	r3, r1
 800731a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <put_fat+0x122>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	b2db      	uxtb	r3, r3
 800732c:	e00e      	b.n	800734c <put_fat+0x140>
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	b25b      	sxtb	r3, r3
 8007334:	f023 030f 	bic.w	r3, r3, #15
 8007338:	b25a      	sxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	b25b      	sxtb	r3, r3
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	b25b      	sxtb	r3, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	b25b      	sxtb	r3, r3
 800734a:	b2db      	uxtb	r3, r3
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	70da      	strb	r2, [r3, #3]
			break;
 8007356:	e076      	b.n	8007446 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	899b      	ldrh	r3, [r3, #12]
 8007360:	085b      	lsrs	r3, r3, #1
 8007362:	b29b      	uxth	r3, r3
 8007364:	4619      	mov	r1, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	fbb3 f3f1 	udiv	r3, r3, r1
 800736c:	4413      	add	r3, r2
 800736e:	4619      	mov	r1, r3
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff fd39 	bl	8006de8 <move_window>
 8007376:	4603      	mov	r3, r0
 8007378:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800737a:	7ffb      	ldrb	r3, [r7, #31]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d15f      	bne.n	8007440 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	8992      	ldrh	r2, [r2, #12]
 800738e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007392:	fb02 f200 	mul.w	r2, r2, r0
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	440b      	add	r3, r1
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	b292      	uxth	r2, r2
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fa25 	bl	80067f0 <st_word>
			fs->wflag = 1;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	70da      	strb	r2, [r3, #3]
			break;
 80073ac:	e04b      	b.n	8007446 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	899b      	ldrh	r3, [r3, #12]
 80073b6:	089b      	lsrs	r3, r3, #2
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4619      	mov	r1, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	fbb3 f3f1 	udiv	r3, r3, r1
 80073c2:	4413      	add	r3, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7ff fd0e 	bl	8006de8 <move_window>
 80073cc:	4603      	mov	r3, r0
 80073ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d136      	bne.n	8007444 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d017      	beq.n	800740e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	8992      	ldrh	r2, [r2, #12]
 80073f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80073f6:	fb02 f200 	mul.w	r2, r2, r0
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	440b      	add	r3, r1
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff f916 	bl	8006630 <ld_dword>
 8007404:	4603      	mov	r3, r0
 8007406:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800740a:	4323      	orrs	r3, r4
 800740c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	8992      	ldrh	r2, [r2, #12]
 800741c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007420:	fb02 f200 	mul.w	r2, r2, r0
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	440b      	add	r3, r1
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff f9fb 	bl	8006826 <st_dword>
			fs->wflag = 1;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	70da      	strb	r2, [r3, #3]
			break;
 8007436:	e006      	b.n	8007446 <put_fat+0x23a>
			if (res != FR_OK) break;
 8007438:	bf00      	nop
 800743a:	e004      	b.n	8007446 <put_fat+0x23a>
			if (res != FR_OK) break;
 800743c:	bf00      	nop
 800743e:	e002      	b.n	8007446 <put_fat+0x23a>
			if (res != FR_OK) break;
 8007440:	bf00      	nop
 8007442:	e000      	b.n	8007446 <put_fat+0x23a>
			if (res != FR_OK) break;
 8007444:	bf00      	nop
		}
	}
	return res;
 8007446:	7ffb      	ldrb	r3, [r7, #31]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3724      	adds	r7, #36	; 0x24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd90      	pop	{r4, r7, pc}

08007450 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3b02      	subs	r3, #2
 8007460:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	3b02      	subs	r3, #2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	d301      	bcc.n	8007472 <find_bitmap+0x22>
 800746e:	2300      	movs	r3, #0
 8007470:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	8989      	ldrh	r1, [r1, #12]
 800748a:	fbb3 f3f1 	udiv	r3, r3, r1
 800748e:	4413      	add	r3, r2
 8007490:	4619      	mov	r1, r3
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7ff fca8 	bl	8006de8 <move_window>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <find_bitmap+0x54>
 800749e:	f04f 33ff 	mov.w	r3, #4294967295
 80074a2:	e058      	b.n	8007556 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	08db      	lsrs	r3, r3, #3
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	8992      	ldrh	r2, [r2, #12]
 80074ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80074b0:	fb02 f201 	mul.w	r2, r2, r1
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	623b      	str	r3, [r7, #32]
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	2201      	movs	r2, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	4413      	add	r3, r2
 80074ce:	333c      	adds	r3, #60	; 0x3c
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d6:	4013      	ands	r3, r2
 80074d8:	74fb      	strb	r3, [r7, #19]
 80074da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	3301      	adds	r3, #1
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	3b02      	subs	r3, #2
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d307      	bcc.n	8007506 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	899b      	ldrh	r3, [r3, #12]
 8007504:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8007506:	7cfb      	ldrb	r3, [r7, #19]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	3301      	adds	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d106      	bne.n	8007528 <find_bitmap+0xd8>
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	3302      	adds	r3, #2
 800751e:	e01a      	b.n	8007556 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8007528:	69fa      	ldr	r2, [r7, #28]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	429a      	cmp	r2, r3
 800752e:	d101      	bne.n	8007534 <find_bitmap+0xe4>
 8007530:	2300      	movs	r3, #0
 8007532:	e010      	b.n	8007556 <find_bitmap+0x106>
			} while (bm);
 8007534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1c5      	bne.n	80074c8 <find_bitmap+0x78>
			bm = 1;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	3301      	adds	r3, #1
 8007546:	623b      	str	r3, [r7, #32]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	899b      	ldrh	r3, [r3, #12]
 800754c:	461a      	mov	r2, r3
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	4293      	cmp	r3, r2
 8007552:	d3b9      	bcc.n	80074c8 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8007554:	e793      	b.n	800747e <find_bitmap+0x2e>
	}
}
 8007556:	4618      	mov	r0, r3
 8007558:	3728      	adds	r7, #40	; 0x28
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b088      	sub	sp, #32
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	3b02      	subs	r3, #2
 8007570:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	08db      	lsrs	r3, r3, #3
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	8989      	ldrh	r1, [r1, #12]
 800757e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007582:	4413      	add	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	08db      	lsrs	r3, r3, #3
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	8992      	ldrh	r2, [r2, #12]
 800758e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007592:	fb02 f201 	mul.w	r2, r2, r1
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	2201      	movs	r2, #1
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	617a      	str	r2, [r7, #20]
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fc19 	bl	8006de8 <move_window>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <change_bitmap+0x62>
 80075bc:	2301      	movs	r3, #1
 80075be:	e03f      	b.n	8007640 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	4413      	add	r3, r2
 80075c6:	333c      	adds	r3, #60	; 0x3c
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	7ffb      	ldrb	r3, [r7, #31]
 80075cc:	4013      	ands	r3, r2
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bf14      	ite	ne
 80075d4:	2301      	movne	r3, #1
 80075d6:	2300      	moveq	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	4293      	cmp	r3, r2
 80075e0:	d101      	bne.n	80075e6 <change_bitmap+0x88>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e02c      	b.n	8007640 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	4413      	add	r3, r2
 80075ec:	333c      	adds	r3, #60	; 0x3c
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	7ffb      	ldrb	r3, [r7, #31]
 80075f2:	4053      	eors	r3, r2
 80075f4:	b2d9      	uxtb	r1, r3
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	4413      	add	r3, r2
 80075fc:	333c      	adds	r3, #60	; 0x3c
 80075fe:	460a      	mov	r2, r1
 8007600:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3b01      	subs	r3, #1
 800760c:	607b      	str	r3, [r7, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <change_bitmap+0xba>
 8007614:	2300      	movs	r3, #0
 8007616:	e013      	b.n	8007640 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8007618:	7ffb      	ldrb	r3, [r7, #31]
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	77fb      	strb	r3, [r7, #31]
 800761e:	7ffb      	ldrb	r3, [r7, #31]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1cd      	bne.n	80075c0 <change_bitmap+0x62>
			bm = 1;
 8007624:	2301      	movs	r3, #1
 8007626:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	3301      	adds	r3, #1
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	899b      	ldrh	r3, [r3, #12]
 8007632:	461a      	mov	r2, r3
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	4293      	cmp	r3, r2
 8007638:	d3c2      	bcc.n	80075c0 <change_bitmap+0x62>
		i = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800763e:	e7b3      	b.n	80075a8 <change_bitmap+0x4a>
	}
}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	79db      	ldrb	r3, [r3, #7]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d121      	bne.n	800769c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	613b      	str	r3, [r7, #16]
 8007664:	e014      	b.n	8007690 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	3301      	adds	r3, #1
 800766e:	461a      	mov	r2, r3
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	f7ff fdcb 	bl	800720c <put_fat>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <fill_first_frag+0x3c>
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	e00c      	b.n	800769e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	3301      	adds	r3, #1
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	3b01      	subs	r3, #1
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e7      	bne.n	8007666 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b086      	sub	sp, #24
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80076b2:	e020      	b.n	80076f6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	1c59      	adds	r1, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d905      	bls.n	80076d6 <fill_last_frag+0x30>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	3302      	adds	r3, #2
 80076d4:	e000      	b.n	80076d8 <fill_last_frag+0x32>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	461a      	mov	r2, r3
 80076da:	f7ff fd97 	bl	800720c <put_fat>
 80076de:	4603      	mov	r3, r0
 80076e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <fill_last_frag+0x46>
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	e009      	b.n	8007700 <fill_last_frag+0x5a>
		obj->n_frag--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	1e5a      	subs	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1da      	bne.n	80076b4 <fill_last_frag+0xe>
	}
	return FR_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	; 0x28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d904      	bls.n	8007736 <remove_chain+0x2e>
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d301      	bcc.n	800773a <remove_chain+0x32>
 8007736:	2302      	movs	r3, #2
 8007738:	e096      	b.n	8007868 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d014      	beq.n	800776a <remove_chain+0x62>
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b04      	cmp	r3, #4
 8007746:	d103      	bne.n	8007750 <remove_chain+0x48>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	79db      	ldrb	r3, [r3, #7]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d00c      	beq.n	800776a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007750:	f04f 32ff 	mov.w	r2, #4294967295
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	69b8      	ldr	r0, [r7, #24]
 8007758:	f7ff fd58 	bl	800720c <put_fat>
 800775c:	4603      	mov	r3, r0
 800775e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007760:	7ffb      	ldrb	r3, [r7, #31]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <remove_chain+0x62>
 8007766:	7ffb      	ldrb	r3, [r7, #31]
 8007768:	e07e      	b.n	8007868 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7ff fbf9 	bl	8006f64 <get_fat>
 8007772:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d055      	beq.n	8007826 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <remove_chain+0x7c>
 8007780:	2302      	movs	r3, #2
 8007782:	e071      	b.n	8007868 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d101      	bne.n	8007790 <remove_chain+0x88>
 800778c:	2301      	movs	r3, #1
 800778e:	e06b      	b.n	8007868 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d00b      	beq.n	80077b0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007798:	2200      	movs	r2, #0
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	69b8      	ldr	r0, [r7, #24]
 800779e:	f7ff fd35 	bl	800720c <put_fat>
 80077a2:	4603      	mov	r3, r0
 80077a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80077a6:	7ffb      	ldrb	r3, [r7, #31]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <remove_chain+0xa8>
 80077ac:	7ffb      	ldrb	r3, [r7, #31]
 80077ae:	e05b      	b.n	8007868 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	3b02      	subs	r3, #2
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d20b      	bcs.n	80077d6 <remove_chain+0xce>
			fs->free_clst++;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	791b      	ldrb	r3, [r3, #4]
 80077cc:	f043 0301 	orr.w	r3, r3, #1
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	3301      	adds	r3, #1
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d102      	bne.n	80077e6 <remove_chain+0xde>
			ecl = nxt;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	623b      	str	r3, [r7, #32]
 80077e4:	e017      	b.n	8007816 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d10f      	bne.n	800780e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80077ee:	6a3a      	ldr	r2, [r7, #32]
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	2300      	movs	r3, #0
 80077f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077fa:	69b8      	ldr	r0, [r7, #24]
 80077fc:	f7ff feaf 	bl	800755e <change_bitmap>
 8007800:	4603      	mov	r3, r0
 8007802:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8007804:	7ffb      	ldrb	r3, [r7, #31]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <remove_chain+0x106>
 800780a:	7ffb      	ldrb	r3, [r7, #31]
 800780c:	e02c      	b.n	8007868 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	623b      	str	r3, [r7, #32]
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d3a2      	bcc.n	800776a <remove_chain+0x62>
 8007824:	e000      	b.n	8007828 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8007826:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b04      	cmp	r3, #4
 800782e:	d11a      	bne.n	8007866 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	71da      	strb	r2, [r3, #7]
 800783c:	e013      	b.n	8007866 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	79db      	ldrb	r3, [r3, #7]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d10f      	bne.n	8007866 <remove_chain+0x15e>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d30a      	bcc.n	8007866 <remove_chain+0x15e>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	4413      	add	r3, r2
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d802      	bhi.n	8007866 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2202      	movs	r2, #2
 8007864:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3728      	adds	r7, #40	; 0x28
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <create_chain+0x2c>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	429a      	cmp	r2, r3
 800789a:	d31b      	bcc.n	80078d4 <create_chain+0x64>
 800789c:	2301      	movs	r3, #1
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	e018      	b.n	80078d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fb5d 	bl	8006f64 <get_fat>
 80078aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d801      	bhi.n	80078b6 <create_chain+0x46>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e0d9      	b.n	8007a6a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d101      	bne.n	80078c2 <create_chain+0x52>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	e0d3      	b.n	8007a6a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d201      	bcs.n	80078d0 <create_chain+0x60>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	e0cc      	b.n	8007a6a <create_chain+0x1fa>
		scl = clst;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d164      	bne.n	80079a6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80078dc:	2201      	movs	r2, #1
 80078de:	69b9      	ldr	r1, [r7, #24]
 80078e0:	6938      	ldr	r0, [r7, #16]
 80078e2:	f7ff fdb5 	bl	8007450 <find_bitmap>
 80078e6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <create_chain+0x86>
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d101      	bne.n	80078fa <create_chain+0x8a>
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	e0b7      	b.n	8007a6a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80078fa:	2301      	movs	r3, #1
 80078fc:	2201      	movs	r2, #1
 80078fe:	69f9      	ldr	r1, [r7, #28]
 8007900:	6938      	ldr	r0, [r7, #16]
 8007902:	f7ff fe2c 	bl	800755e <change_bitmap>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d101      	bne.n	8007914 <create_chain+0xa4>
 8007910:	2301      	movs	r3, #1
 8007912:	e0aa      	b.n	8007a6a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d102      	bne.n	8007920 <create_chain+0xb0>
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	e0a4      	b.n	8007a6a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	71da      	strb	r2, [r3, #7]
 800792c:	e011      	b.n	8007952 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	79db      	ldrb	r3, [r3, #7]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d10d      	bne.n	8007952 <create_chain+0xe2>
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	3301      	adds	r3, #1
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	429a      	cmp	r2, r3
 800793e:	d008      	beq.n	8007952 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2203      	movs	r2, #3
 8007950:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	79db      	ldrb	r3, [r3, #7]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d064      	beq.n	8007a24 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	3301      	adds	r3, #1
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	429a      	cmp	r2, r3
 8007962:	d10b      	bne.n	800797c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <create_chain+0x104>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	3301      	adds	r3, #1
 8007972:	e000      	b.n	8007976 <create_chain+0x106>
 8007974:	2302      	movs	r3, #2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	61d3      	str	r3, [r2, #28]
 800797a:	e053      	b.n	8007a24 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <create_chain+0x11a>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff fe89 	bl	80076a6 <fill_last_frag>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d142      	bne.n	8007a24 <create_chain+0x1b4>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	61da      	str	r2, [r3, #28]
 80079a4:	e03e      	b.n	8007a24 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	3301      	adds	r3, #1
 80079ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d307      	bcc.n	80079ca <create_chain+0x15a>
				ncl = 2;
 80079ba:	2302      	movs	r3, #2
 80079bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d901      	bls.n	80079ca <create_chain+0x15a>
 80079c6:	2300      	movs	r3, #0
 80079c8:	e04f      	b.n	8007a6a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80079ca:	69f9      	ldr	r1, [r7, #28]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fac9 	bl	8006f64 <get_fat>
 80079d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00e      	beq.n	80079f8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d003      	beq.n	80079e8 <create_chain+0x178>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e6:	d101      	bne.n	80079ec <create_chain+0x17c>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	e03e      	b.n	8007a6a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d1da      	bne.n	80079aa <create_chain+0x13a>
 80079f4:	2300      	movs	r3, #0
 80079f6:	e038      	b.n	8007a6a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80079f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295
 80079fe:	69f9      	ldr	r1, [r7, #28]
 8007a00:	6938      	ldr	r0, [r7, #16]
 8007a02:	f7ff fc03 	bl	800720c <put_fat>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <create_chain+0x1b4>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d006      	beq.n	8007a24 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	f7ff fbf6 	bl	800720c <put_fat>
 8007a20:	4603      	mov	r3, r0
 8007a22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d116      	bne.n	8007a58 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	3b02      	subs	r3, #2
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d804      	bhi.n	8007a48 <create_chain+0x1d8>
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	1e5a      	subs	r2, r3, #1
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	791b      	ldrb	r3, [r3, #4]
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	711a      	strb	r2, [r3, #4]
 8007a56:	e007      	b.n	8007a68 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d102      	bne.n	8007a64 <create_chain+0x1f4>
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	e000      	b.n	8007a66 <create_chain+0x1f6>
 8007a64:	2301      	movs	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a68:	69fb      	ldr	r3, [r7, #28]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3720      	adds	r7, #32
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a72:	b590      	push	{r4, r7, lr}
 8007a74:	b089      	sub	sp, #36	; 0x24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a88:	3304      	adds	r3, #4
 8007a8a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	899b      	ldrh	r3, [r3, #12]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f04f 0400 	mov.w	r4, #0
 8007a96:	461a      	mov	r2, r3
 8007a98:	4623      	mov	r3, r4
 8007a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a9e:	f7f9 f8f3 	bl	8000c88 <__aeabi_uldivmod>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	895b      	ldrh	r3, [r3, #10]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f04f 0400 	mov.w	r4, #0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	f7f9 f8e6 	bl	8000c88 <__aeabi_uldivmod>
 8007abc:	4603      	mov	r3, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	1d1a      	adds	r2, r3, #4
 8007ac6:	61ba      	str	r2, [r7, #24]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <clmt_clust+0x64>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e010      	b.n	8007af8 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d307      	bcc.n	8007aee <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	61fb      	str	r3, [r7, #28]
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007aec:	e7e9      	b.n	8007ac2 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 8007aee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3724      	adds	r7, #36	; 0x24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd90      	pop	{r4, r7, pc}

08007b00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d102      	bne.n	8007b1e <dir_sdi+0x1e>
 8007b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1c:	e001      	b.n	8007b22 <dir_sdi+0x22>
 8007b1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d904      	bls.n	8007b32 <dir_sdi+0x32>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <dir_sdi+0x36>
		return FR_INT_ERR;
 8007b32:	2302      	movs	r3, #2
 8007b34:	e074      	b.n	8007c20 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <dir_sdi+0x5c>
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d905      	bls.n	8007b5c <dir_sdi+0x5c>
		clst = fs->dirbase;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10c      	bne.n	8007b7c <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	8912      	ldrh	r2, [r2, #8]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d301      	bcc.n	8007b72 <dir_sdi+0x72>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e056      	b.n	8007c20 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38
 8007b7a:	e02d      	b.n	8007bd8 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	895b      	ldrh	r3, [r3, #10]
 8007b80:	461a      	mov	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	899b      	ldrh	r3, [r3, #12]
 8007b86:	fb03 f302 	mul.w	r3, r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b8c:	e019      	b.n	8007bc2 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff f9e6 	bl	8006f64 <get_fat>
 8007b98:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d101      	bne.n	8007ba6 <dir_sdi+0xa6>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e03c      	b.n	8007c20 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d904      	bls.n	8007bb6 <dir_sdi+0xb6>
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d301      	bcc.n	8007bba <dir_sdi+0xba>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e032      	b.n	8007c20 <dir_sdi+0x120>
			ofs -= csz;
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d2e1      	bcs.n	8007b8e <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8007bca:	6979      	ldr	r1, [r7, #20]
 8007bcc:	6938      	ldr	r0, [r7, #16]
 8007bce:	f7ff f9a9 	bl	8006f24 <clust2sect>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <dir_sdi+0xea>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e01a      	b.n	8007c20 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	899b      	ldrh	r3, [r3, #12]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bfa:	441a      	add	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	899b      	ldrh	r3, [r3, #12]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c12:	fb02 f200 	mul.w	r2, r2, r0
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	18ca      	adds	r2, r1, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	3320      	adds	r3, #32
 8007c3e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <dir_next+0x38>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d102      	bne.n	8007c56 <dir_next+0x2e>
 8007c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c54:	e001      	b.n	8007c5a <dir_next+0x32>
 8007c56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d801      	bhi.n	8007c64 <dir_next+0x3c>
 8007c60:	2304      	movs	r3, #4
 8007c62:	e0c3      	b.n	8007dec <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	899b      	ldrh	r3, [r3, #12]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c70:	fb02 f201 	mul.w	r2, r2, r1
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 80a5 	bne.w	8007dc6 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10b      	bne.n	8007ca6 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	8912      	ldrh	r2, [r2, #8]
 8007c96:	4293      	cmp	r3, r2
 8007c98:	f0c0 8095 	bcc.w	8007dc6 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	e0a2      	b.n	8007dec <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	899b      	ldrh	r3, [r3, #12]
 8007caa:	461a      	mov	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	8952      	ldrh	r2, [r2, #10]
 8007cb6:	3a01      	subs	r2, #1
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 8083 	bne.w	8007dc6 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f7ff f94b 	bl	8006f64 <get_fat>
 8007cce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d801      	bhi.n	8007cda <dir_next+0xb2>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e088      	b.n	8007dec <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce0:	d101      	bne.n	8007ce6 <dir_next+0xbe>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e082      	b.n	8007dec <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d360      	bcc.n	8007db2 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	e075      	b.n	8007dec <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f7ff fdb1 	bl	8007870 <create_chain>
 8007d0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <dir_next+0xf2>
 8007d16:	2307      	movs	r3, #7
 8007d18:	e068      	b.n	8007dec <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <dir_next+0xfc>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e063      	b.n	8007dec <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d101      	bne.n	8007d30 <dir_next+0x108>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e05d      	b.n	8007dec <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	79db      	ldrb	r3, [r3, #7]
 8007d34:	f043 0304 	orr.w	r3, r3, #4
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff f80e 	bl	8006d60 <sync_window>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <dir_next+0x126>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e04e      	b.n	8007dec <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	899b      	ldrh	r3, [r3, #12]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	f7fe fe37 	bl	80069ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d60:	2300      	movs	r3, #0
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	6979      	ldr	r1, [r7, #20]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7ff f8dc 	bl	8006f24 <clust2sect>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
 8007d72:	e012      	b.n	8007d9a <dir_next+0x172>
						fs->wflag = 1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7fe fff0 	bl	8006d60 <sync_window>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <dir_next+0x162>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e030      	b.n	8007dec <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	895b      	ldrh	r3, [r3, #10]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d3e6      	bcc.n	8007d74 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad2      	subs	r2, r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8007db8:	6979      	ldr	r1, [r7, #20]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f7ff f8b2 	bl	8006f24 <clust2sect>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	899b      	ldrh	r3, [r3, #12]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	fbb3 f0f2 	udiv	r0, r3, r2
 8007dde:	fb02 f200 	mul.w	r2, r2, r0
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	18ca      	adds	r2, r1, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff fe7a 	bl	8007b00 <dir_sdi>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d140      	bne.n	8007e98 <dir_alloc+0xa4>
		n = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7fe ffe1 	bl	8006de8 <move_window>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d132      	bne.n	8007e96 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d108      	bne.n	8007e4a <dir_alloc+0x56>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	b25b      	sxtb	r3, r3
 8007e40:	43db      	mvns	r3, r3
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	09db      	lsrs	r3, r3, #7
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	e00f      	b.n	8007e6a <dir_alloc+0x76>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2be5      	cmp	r3, #229	; 0xe5
 8007e52:	d004      	beq.n	8007e5e <dir_alloc+0x6a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <dir_alloc+0x6e>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e000      	b.n	8007e64 <dir_alloc+0x70>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	3301      	adds	r3, #1
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d102      	bne.n	8007e82 <dir_alloc+0x8e>
 8007e7c:	e00c      	b.n	8007e98 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff fecf 	bl	8007c28 <dir_next>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0c2      	beq.n	8007e1a <dir_alloc+0x26>
 8007e94:	e000      	b.n	8007e98 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8007e96:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d101      	bne.n	8007ea2 <dir_alloc+0xae>
 8007e9e:	2307      	movs	r3, #7
 8007ea0:	75fb      	strb	r3, [r7, #23]
	return res;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	331a      	adds	r3, #26
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fba0 	bl	8006600 <ld_word>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d109      	bne.n	8007ee0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fb95 	bl	8006600 <ld_word>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	041b      	lsls	r3, r3, #16
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	331a      	adds	r3, #26
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	b292      	uxth	r2, r2
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fc75 	bl	80067f0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d109      	bne.n	8007f22 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f103 0214 	add.w	r2, r3, #20
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	f7fe fc67 	bl	80067f0 <st_word>
	}
}
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	331a      	adds	r3, #26
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fb60 	bl	8006600 <ld_word>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <cmp_lfn+0x1e>
 8007f46:	2300      	movs	r3, #0
 8007f48:	e059      	b.n	8007ffe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f52:	1e5a      	subs	r2, r3, #1
 8007f54:	4613      	mov	r3, r2
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007f60:	2301      	movs	r3, #1
 8007f62:	81fb      	strh	r3, [r7, #14]
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	e033      	b.n	8007fd2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007f6a:	4a27      	ldr	r2, [pc, #156]	; (8008008 <cmp_lfn+0xdc>)
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	4413      	add	r3, r2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	4413      	add	r3, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fb41 	bl	8006600 <ld_word>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007f82:	89fb      	ldrh	r3, [r7, #14]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01a      	beq.n	8007fbe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2bfe      	cmp	r3, #254	; 0xfe
 8007f8c:	d812      	bhi.n	8007fb4 <cmp_lfn+0x88>
 8007f8e:	89bb      	ldrh	r3, [r7, #12]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f002 fe57 	bl	800ac44 <ff_wtoupper>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461c      	mov	r4, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	617a      	str	r2, [r7, #20]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f002 fe4b 	bl	800ac44 <ff_wtoupper>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	429c      	cmp	r4, r3
 8007fb2:	d001      	beq.n	8007fb8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e022      	b.n	8007ffe <cmp_lfn+0xd2>
			}
			wc = uc;
 8007fb8:	89bb      	ldrh	r3, [r7, #12]
 8007fba:	81fb      	strh	r3, [r7, #14]
 8007fbc:	e006      	b.n	8007fcc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007fbe:	89bb      	ldrh	r3, [r7, #12]
 8007fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d001      	beq.n	8007fcc <cmp_lfn+0xa0>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e018      	b.n	8007ffe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	2b0c      	cmp	r3, #12
 8007fd6:	d9c8      	bls.n	8007f6a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <cmp_lfn+0xd0>
 8007fe4:	89fb      	ldrh	r3, [r7, #14]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <cmp_lfn+0xd0>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <cmp_lfn+0xd0>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e000      	b.n	8007ffe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007ffc:	2301      	movs	r3, #1
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	bd90      	pop	{r4, r7, pc}
 8008006:	bf00      	nop
 8008008:	0800e990 	.word	0x0800e990

0800800c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	331a      	adds	r3, #26
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe faf0 	bl	8006600 <ld_word>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <pick_lfn+0x1e>
 8008026:	2300      	movs	r3, #0
 8008028:	e04d      	b.n	80080c6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008032:	1e5a      	subs	r2, r3, #1
 8008034:	4613      	mov	r3, r2
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008040:	2301      	movs	r3, #1
 8008042:	81fb      	strh	r3, [r7, #14]
 8008044:	2300      	movs	r3, #0
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	e028      	b.n	800809c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800804a:	4a21      	ldr	r2, [pc, #132]	; (80080d0 <pick_lfn+0xc4>)
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4413      	add	r3, r2
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	4413      	add	r3, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe fad1 	bl	8006600 <ld_word>
 800805e:	4603      	mov	r3, r0
 8008060:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008062:	89fb      	ldrh	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00f      	beq.n	8008088 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2bfe      	cmp	r3, #254	; 0xfe
 800806c:	d901      	bls.n	8008072 <pick_lfn+0x66>
 800806e:	2300      	movs	r3, #0
 8008070:	e029      	b.n	80080c6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008072:	89bb      	ldrh	r3, [r7, #12]
 8008074:	81fb      	strh	r3, [r7, #14]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	617a      	str	r2, [r7, #20]
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	4413      	add	r3, r2
 8008082:	89fa      	ldrh	r2, [r7, #14]
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	e006      	b.n	8008096 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008088:	89bb      	ldrh	r3, [r7, #12]
 800808a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800808e:	4293      	cmp	r3, r2
 8008090:	d001      	beq.n	8008096 <pick_lfn+0x8a>
 8008092:	2300      	movs	r3, #0
 8008094:	e017      	b.n	80080c6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	3301      	adds	r3, #1
 800809a:	613b      	str	r3, [r7, #16]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d9d3      	bls.n	800804a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2bfe      	cmp	r3, #254	; 0xfe
 80080b2:	d901      	bls.n	80080b8 <pick_lfn+0xac>
 80080b4:	2300      	movs	r3, #0
 80080b6:	e006      	b.n	80080c6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	2200      	movs	r2, #0
 80080c2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80080c4:	2301      	movs	r3, #1
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	0800e990 	.word	0x0800e990

080080d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4611      	mov	r1, r2
 80080e0:	461a      	mov	r2, r3
 80080e2:	460b      	mov	r3, r1
 80080e4:	71fb      	strb	r3, [r7, #7]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	330d      	adds	r3, #13
 80080ee:	79ba      	ldrb	r2, [r7, #6]
 80080f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	330b      	adds	r3, #11
 80080f6:	220f      	movs	r2, #15
 80080f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	330c      	adds	r3, #12
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	331a      	adds	r3, #26
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f7fe fb71 	bl	80067f0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	1e5a      	subs	r2, r3, #1
 8008112:	4613      	mov	r3, r2
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	82fb      	strh	r3, [r7, #22]
 8008122:	2300      	movs	r3, #0
 8008124:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008126:	8afb      	ldrh	r3, [r7, #22]
 8008128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <put_lfn+0x6c>
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	61fa      	str	r2, [r7, #28]
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008140:	4a17      	ldr	r2, [pc, #92]	; (80081a0 <put_lfn+0xcc>)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4413      	add	r3, r2
 800814e:	8afa      	ldrh	r2, [r7, #22]
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fb4c 	bl	80067f0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008158:	8afb      	ldrh	r3, [r7, #22]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <put_lfn+0x90>
 800815e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008162:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	3301      	adds	r3, #1
 8008168:	61bb      	str	r3, [r7, #24]
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b0c      	cmp	r3, #12
 800816e:	d9da      	bls.n	8008126 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008170:	8afb      	ldrh	r3, [r7, #22]
 8008172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008176:	4293      	cmp	r3, r2
 8008178:	d006      	beq.n	8008188 <put_lfn+0xb4>
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4413      	add	r3, r2
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <put_lfn+0xbc>
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800818e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	79fa      	ldrb	r2, [r7, #7]
 8008194:	701a      	strb	r2, [r3, #0]
}
 8008196:	bf00      	nop
 8008198:	3720      	adds	r7, #32
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	0800e990 	.word	0x0800e990

080081a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08c      	sub	sp, #48	; 0x30
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80081b2:	220b      	movs	r2, #11
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7fe fbe8 	bl	800698c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b05      	cmp	r3, #5
 80081c0:	d92b      	bls.n	800821a <gen_numname+0x76>
		sr = seq;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80081c6:	e022      	b.n	800820e <gen_numname+0x6a>
			wc = *lfn++;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	1c9a      	adds	r2, r3, #2
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80081d2:	2300      	movs	r3, #0
 80081d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081d6:	e017      	b.n	8008208 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	005a      	lsls	r2, r3, #1
 80081dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80081e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <gen_numname+0x5e>
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80081fc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008200:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	3301      	adds	r3, #1
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	2b0f      	cmp	r3, #15
 800820c:	d9e4      	bls.n	80081d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1d8      	bne.n	80081c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800821a:	2307      	movs	r3, #7
 800821c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 030f 	and.w	r3, r3, #15
 8008226:	b2db      	uxtb	r3, r3
 8008228:	3330      	adds	r3, #48	; 0x30
 800822a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800822e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008232:	2b39      	cmp	r3, #57	; 0x39
 8008234:	d904      	bls.n	8008240 <gen_numname+0x9c>
 8008236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800823a:	3307      	adds	r3, #7
 800823c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	1e5a      	subs	r2, r3, #1
 8008244:	62ba      	str	r2, [r7, #40]	; 0x28
 8008246:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800824a:	4413      	add	r3, r2
 800824c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008250:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	091b      	lsrs	r3, r3, #4
 8008258:	603b      	str	r3, [r7, #0]
	} while (seq);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1de      	bne.n	800821e <gen_numname+0x7a>
	ns[i] = '~';
 8008260:	f107 0214 	add.w	r2, r7, #20
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	4413      	add	r3, r2
 8008268:	227e      	movs	r2, #126	; 0x7e
 800826a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800826c:	2300      	movs	r3, #0
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
 8008270:	e002      	b.n	8008278 <gen_numname+0xd4>
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	3301      	adds	r3, #1
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
 8008278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	429a      	cmp	r2, r3
 800827e:	d205      	bcs.n	800828c <gen_numname+0xe8>
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	4413      	add	r3, r2
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b20      	cmp	r3, #32
 800828a:	d1f2      	bne.n	8008272 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	2b07      	cmp	r3, #7
 8008290:	d808      	bhi.n	80082a4 <gen_numname+0x100>
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	62ba      	str	r2, [r7, #40]	; 0x28
 8008298:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800829c:	4413      	add	r3, r2
 800829e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80082a2:	e000      	b.n	80082a6 <gen_numname+0x102>
 80082a4:	2120      	movs	r1, #32
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	627a      	str	r2, [r7, #36]	; 0x24
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4413      	add	r3, r2
 80082b0:	460a      	mov	r2, r1
 80082b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	d9e8      	bls.n	800828c <gen_numname+0xe8>
}
 80082ba:	bf00      	nop
 80082bc:	3730      	adds	r7, #48	; 0x30
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80082ce:	230b      	movs	r3, #11
 80082d0:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	0852      	lsrs	r2, r2, #1
 80082d8:	01db      	lsls	r3, r3, #7
 80082da:	4313      	orrs	r3, r2
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	1c59      	adds	r1, r3, #1
 80082e2:	6079      	str	r1, [r7, #4]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	4413      	add	r3, r2
 80082e8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	60bb      	str	r3, [r7, #8]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1ed      	bne.n	80082d2 <sum_sfn+0x10>
	return sum;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3301      	adds	r3, #1
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	015b      	lsls	r3, r3, #5
 8008316:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8008318:	2300      	movs	r3, #0
 800831a:	827b      	strh	r3, [r7, #18]
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e018      	b.n	8008354 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d103      	bne.n	8008330 <xdir_sum+0x2c>
			i++;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	3301      	adds	r3, #1
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e00e      	b.n	800834e <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8008330:	8a7b      	ldrh	r3, [r7, #18]
 8008332:	03db      	lsls	r3, r3, #15
 8008334:	b29a      	uxth	r2, r3
 8008336:	8a7b      	ldrh	r3, [r7, #18]
 8008338:	085b      	lsrs	r3, r3, #1
 800833a:	b29b      	uxth	r3, r3
 800833c:	4413      	add	r3, r2
 800833e:	b29a      	uxth	r2, r3
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	440b      	add	r3, r1
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	4413      	add	r3, r2
 800834c:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	3301      	adds	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	429a      	cmp	r2, r3
 800835a:	d3e2      	bcc.n	8008322 <xdir_sum+0x1e>
		}
	}
	return sum;
 800835c:	8a7b      	ldrh	r3, [r7, #18]
}
 800835e:	4618      	mov	r0, r3
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8008376:	e01f      	b.n	80083b8 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8008378:	89bb      	ldrh	r3, [r7, #12]
 800837a:	4618      	mov	r0, r3
 800837c:	f002 fc62 	bl	800ac44 <ff_wtoupper>
 8008380:	4603      	mov	r3, r0
 8008382:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8008384:	89fb      	ldrh	r3, [r7, #14]
 8008386:	03db      	lsls	r3, r3, #15
 8008388:	b29a      	uxth	r2, r3
 800838a:	89fb      	ldrh	r3, [r7, #14]
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	b29b      	uxth	r3, r3
 8008390:	4413      	add	r3, r2
 8008392:	b29a      	uxth	r2, r3
 8008394:	89bb      	ldrh	r3, [r7, #12]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	b29b      	uxth	r3, r3
 800839a:	4413      	add	r3, r2
 800839c:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800839e:	89fb      	ldrh	r3, [r7, #14]
 80083a0:	03db      	lsls	r3, r3, #15
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	89fb      	ldrh	r3, [r7, #14]
 80083a6:	085b      	lsrs	r3, r3, #1
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	4413      	add	r3, r2
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	89bb      	ldrh	r3, [r7, #12]
 80083b0:	0a1b      	lsrs	r3, r3, #8
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4413      	add	r3, r2
 80083b6:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	1c9a      	adds	r2, r3, #2
 80083bc:	607a      	str	r2, [r7, #4]
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	81bb      	strh	r3, [r7, #12]
 80083c2:	89bb      	ldrh	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1d7      	bne.n	8008378 <xname_sum+0xe>
	}
	return sum;
 80083c8:	89fb      	ldrh	r3, [r7, #14]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80083d4:	b590      	push	{r4, r7, lr}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7fe fcfa 	bl	8006de8 <move_window>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <load_xdir+0x2e>
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	e09f      	b.n	8008542 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b85      	cmp	r3, #133	; 0x85
 800840a:	d001      	beq.n	8008410 <load_xdir+0x3c>
 800840c:	2302      	movs	r3, #2
 800840e:	e098      	b.n	8008542 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008414:	2220      	movs	r2, #32
 8008416:	4619      	mov	r1, r3
 8008418:	6938      	ldr	r0, [r7, #16]
 800841a:	f7fe fab7 	bl	800698c <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	3301      	adds	r3, #1
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	015b      	lsls	r3, r3, #5
 8008428:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b5f      	cmp	r3, #95	; 0x5f
 800842e:	d903      	bls.n	8008438 <load_xdir+0x64>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8008436:	d901      	bls.n	800843c <load_xdir+0x68>
 8008438:	2302      	movs	r3, #2
 800843a:	e082      	b.n	8008542 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800843c:	2100      	movs	r1, #0
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff fbf2 	bl	8007c28 <dir_next>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <load_xdir+0x7e>
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	e077      	b.n	8008542 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f7fe fcc3 	bl	8006de8 <move_window>
 8008462:	4603      	mov	r3, r0
 8008464:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <load_xdir+0x9c>
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	e068      	b.n	8008542 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2bc0      	cmp	r3, #192	; 0xc0
 8008478:	d001      	beq.n	800847e <load_xdir+0xaa>
 800847a:	2302      	movs	r3, #2
 800847c:	e061      	b.n	8008542 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f103 0020 	add.w	r0, r3, #32
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008488:	2220      	movs	r2, #32
 800848a:	4619      	mov	r1, r3
 800848c:	f7fe fa7e 	bl	800698c <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3323      	adds	r3, #35	; 0x23
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	332c      	adds	r3, #44	; 0x2c
 8008498:	4a2c      	ldr	r2, [pc, #176]	; (800854c <load_xdir+0x178>)
 800849a:	fba2 2303 	umull	r2, r3, r2, r3
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	015b      	lsls	r3, r3, #5
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d201      	bcs.n	80084ac <load_xdir+0xd8>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e04a      	b.n	8008542 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80084ac:	2340      	movs	r3, #64	; 0x40
 80084ae:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80084b0:	2100      	movs	r1, #0
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff fbb8 	bl	8007c28 <dir_next>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <load_xdir+0xf2>
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	e03d      	b.n	8008542 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe fc89 	bl	8006de8 <move_window>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <load_xdir+0x110>
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	e02e      	b.n	8008542 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2bc1      	cmp	r3, #193	; 0xc1
 80084ec:	d001      	beq.n	80084f2 <load_xdir+0x11e>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e027      	b.n	8008542 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80084f8:	d208      	bcs.n	800850c <load_xdir+0x138>
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	18d0      	adds	r0, r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008504:	2220      	movs	r2, #32
 8008506:	4619      	mov	r1, r3
 8008508:	f7fe fa40 	bl	800698c <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	3320      	adds	r3, #32
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	429a      	cmp	r2, r3
 8008518:	d3ca      	bcc.n	80084b0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8008520:	d80e      	bhi.n	8008540 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8008522:	6938      	ldr	r0, [r7, #16]
 8008524:	f7ff feee 	bl	8008304 <xdir_sum>
 8008528:	4603      	mov	r3, r0
 800852a:	461c      	mov	r4, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3302      	adds	r3, #2
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe f865 	bl	8006600 <ld_word>
 8008536:	4603      	mov	r3, r0
 8008538:	429c      	cmp	r4, r3
 800853a:	d001      	beq.n	8008540 <load_xdir+0x16c>
 800853c:	2302      	movs	r3, #2
 800853e:	e000      	b.n	8008542 <load_xdir+0x16e>
	}
	return FR_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	bd90      	pop	{r4, r7, pc}
 800854a:	bf00      	nop
 800854c:	88888889 	.word	0x88888889

08008550 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8008550:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	6a1a      	ldr	r2, [r3, #32]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	b2da      	uxtb	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	469b      	mov	fp, r3
 800857c:	f04f 0c00 	mov.w	ip, #0
 8008580:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	ea0b 0301 	and.w	r3, fp, r1
 800858c:	ea0c 0402 	and.w	r4, ip, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff faab 	bl	8007b00 <dir_sdi>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff ff0d 	bl	80083d4 <load_xdir>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080085ca <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80085ca:	b590      	push	{r4, r7, lr}
 80085cc:	b087      	sub	sp, #28
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1c9c      	adds	r4, r3, #2
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff fe90 	bl	8008304 <xdir_sum>
 80085e4:	4603      	mov	r3, r0
 80085e6:	4619      	mov	r1, r3
 80085e8:	4620      	mov	r0, r4
 80085ea:	f7fe f901 	bl	80067f0 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	3301      	adds	r3, #1
 80085f6:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff fa7e 	bl	8007b00 <dir_sdi>
 8008604:	4603      	mov	r3, r0
 8008606:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8008608:	e026      	b.n	8008658 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f7fe fbe7 	bl	8006de8 <move_window>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d11d      	bne.n	8008660 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008628:	2220      	movs	r2, #32
 800862a:	68f9      	ldr	r1, [r7, #12]
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe f9ad 	bl	800698c <mem_cpy>
		dp->obj.fs->wflag = 1;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2201      	movs	r2, #1
 8008638:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3b01      	subs	r3, #1
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00e      	beq.n	8008664 <store_xdir+0x9a>
		dirb += SZDIRE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3320      	adds	r3, #32
 800864a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800864c:	2100      	movs	r1, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff faea 	bl	8007c28 <dir_next>
 8008654:	4603      	mov	r3, r0
 8008656:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0d5      	beq.n	800860a <store_xdir+0x40>
 800865e:	e002      	b.n	8008666 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8008660:	bf00      	nop
 8008662:	e000      	b.n	8008666 <store_xdir+0x9c>
		if (--nent == 0) break;
 8008664:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <store_xdir+0xa8>
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d101      	bne.n	8008676 <store_xdir+0xac>
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	e000      	b.n	8008678 <store_xdir+0xae>
 8008676:	2302      	movs	r3, #2
}
 8008678:	4618      	mov	r0, r3
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	bd90      	pop	{r4, r7, pc}

08008680 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8008680:	b590      	push	{r4, r7, lr}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800868a:	2240      	movs	r2, #64	; 0x40
 800868c:	2100      	movs	r1, #0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fe f99d 	bl	80069ce <mem_set>
	dirb[XDIR_Type] = 0x85;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2285      	movs	r2, #133	; 0x85
 8008698:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3320      	adds	r3, #32
 800869e:	22c0      	movs	r2, #192	; 0xc0
 80086a0:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80086a2:	2300      	movs	r3, #0
 80086a4:	72bb      	strb	r3, [r7, #10]
 80086a6:	2301      	movs	r3, #1
 80086a8:	72fb      	strb	r3, [r7, #11]
 80086aa:	2301      	movs	r3, #1
 80086ac:	813b      	strh	r3, [r7, #8]
 80086ae:	2340      	movs	r3, #64	; 0x40
 80086b0:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	60fa      	str	r2, [r7, #12]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	22c1      	movs	r2, #193	; 0xc1
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	60fa      	str	r2, [r7, #12]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4413      	add	r3, r2
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80086ce:	893b      	ldrh	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <create_xdir+0x6c>
 80086d4:	7abb      	ldrb	r3, [r7, #10]
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	4413      	add	r3, r2
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	813b      	strh	r3, [r7, #8]
 80086e0:	893b      	ldrh	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <create_xdir+0x6c>
 80086e6:	7abb      	ldrb	r3, [r7, #10]
 80086e8:	3301      	adds	r3, #1
 80086ea:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	893a      	ldrh	r2, [r7, #8]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe f87a 	bl	80067f0 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3302      	adds	r3, #2
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e0      	bne.n	80086ce <create_xdir+0x4e>
		nb++;
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	3301      	adds	r3, #1
 8008710:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8008712:	7abb      	ldrb	r3, [r7, #10]
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4413      	add	r3, r2
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1c8      	bne.n	80086b2 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3323      	adds	r3, #35	; 0x23
 8008724:	7aba      	ldrb	r2, [r7, #10]
 8008726:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3301      	adds	r3, #1
 800872c:	7afa      	ldrb	r2, [r7, #11]
 800872e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8008736:	6838      	ldr	r0, [r7, #0]
 8008738:	f7ff fe17 	bl	800836a <xname_sum>
 800873c:	4603      	mov	r3, r0
 800873e:	4619      	mov	r1, r3
 8008740:	4620      	mov	r0, r4
 8008742:	f7fe f855 	bl	80067f0 <st_word>
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	bd90      	pop	{r4, r7, pc}

0800874e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008758:	2304      	movs	r3, #4
 800875a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8008762:	23ff      	movs	r3, #255	; 0xff
 8008764:	757b      	strb	r3, [r7, #21]
 8008766:	23ff      	movs	r3, #255	; 0xff
 8008768:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800876a:	e09f      	b.n	80088ac <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	4619      	mov	r1, r3
 8008772:	6938      	ldr	r0, [r7, #16]
 8008774:	f7fe fb38 	bl	8006de8 <move_window>
 8008778:	4603      	mov	r3, r0
 800877a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 809a 	bne.w	80088b8 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800878c:	7dbb      	ldrb	r3, [r7, #22]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008792:	2304      	movs	r3, #4
 8008794:	75fb      	strb	r3, [r7, #23]
 8008796:	e096      	b.n	80088c6 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b04      	cmp	r3, #4
 800879e:	d118      	bne.n	80087d2 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80087a0:	7dbb      	ldrb	r3, [r7, #22]
 80087a2:	2b85      	cmp	r3, #133	; 0x85
 80087a4:	d179      	bne.n	800889a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff fe10 	bl	80083d4 <load_xdir>
 80087b4:	4603      	mov	r3, r0
 80087b6:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d17e      	bne.n	80088bc <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	3304      	adds	r3, #4
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	719a      	strb	r2, [r3, #6]
					}
					break;
 80087d0:	e074      	b.n	80088bc <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	330b      	adds	r3, #11
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087de:	73fb      	strb	r3, [r7, #15]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7bfa      	ldrb	r2, [r7, #15]
 80087e4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80087e6:	7dbb      	ldrb	r3, [r7, #22]
 80087e8:	2be5      	cmp	r3, #229	; 0xe5
 80087ea:	d00e      	beq.n	800880a <dir_read+0xbc>
 80087ec:	7dbb      	ldrb	r3, [r7, #22]
 80087ee:	2b2e      	cmp	r3, #46	; 0x2e
 80087f0:	d00b      	beq.n	800880a <dir_read+0xbc>
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	f023 0320 	bic.w	r3, r3, #32
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	bf0c      	ite	eq
 80087fc:	2301      	moveq	r3, #1
 80087fe:	2300      	movne	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	4293      	cmp	r3, r2
 8008808:	d002      	beq.n	8008810 <dir_read+0xc2>
				ord = 0xFF;
 800880a:	23ff      	movs	r3, #255	; 0xff
 800880c:	757b      	strb	r3, [r7, #21]
 800880e:	e044      	b.n	800889a <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	2b0f      	cmp	r3, #15
 8008814:	d12f      	bne.n	8008876 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008816:	7dbb      	ldrb	r3, [r7, #22]
 8008818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008824:	7b5b      	ldrb	r3, [r3, #13]
 8008826:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8008828:	7dbb      	ldrb	r3, [r7, #22]
 800882a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882e:	75bb      	strb	r3, [r7, #22]
 8008830:	7dbb      	ldrb	r3, [r7, #22]
 8008832:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800883c:	7dba      	ldrb	r2, [r7, #22]
 800883e:	7d7b      	ldrb	r3, [r7, #21]
 8008840:	429a      	cmp	r2, r3
 8008842:	d115      	bne.n	8008870 <dir_read+0x122>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008848:	330d      	adds	r3, #13
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	7d3a      	ldrb	r2, [r7, #20]
 800884e:	429a      	cmp	r2, r3
 8008850:	d10e      	bne.n	8008870 <dir_read+0x122>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7ff fbd5 	bl	800800c <pick_lfn>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <dir_read+0x122>
 8008868:	7d7b      	ldrb	r3, [r7, #21]
 800886a:	3b01      	subs	r3, #1
 800886c:	b2db      	uxtb	r3, r3
 800886e:	e000      	b.n	8008872 <dir_read+0x124>
 8008870:	23ff      	movs	r3, #255	; 0xff
 8008872:	757b      	strb	r3, [r7, #21]
 8008874:	e011      	b.n	800889a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008876:	7d7b      	ldrb	r3, [r7, #21]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d109      	bne.n	8008890 <dir_read+0x142>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fd1e 	bl	80082c2 <sum_sfn>
 8008886:	4603      	mov	r3, r0
 8008888:	461a      	mov	r2, r3
 800888a:	7d3b      	ldrb	r3, [r7, #20]
 800888c:	4293      	cmp	r3, r2
 800888e:	d017      	beq.n	80088c0 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f04f 32ff 	mov.w	r2, #4294967295
 8008896:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8008898:	e012      	b.n	80088c0 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800889a:	2100      	movs	r1, #0
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff f9c3 	bl	8007c28 <dir_next>
 80088a2:	4603      	mov	r3, r0
 80088a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10b      	bne.n	80088c4 <dir_read+0x176>
	while (dp->sect) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f47f af5b 	bne.w	800876c <dir_read+0x1e>
 80088b6:	e006      	b.n	80088c6 <dir_read+0x178>
		if (res != FR_OK) break;
 80088b8:	bf00      	nop
 80088ba:	e004      	b.n	80088c6 <dir_read+0x178>
					break;
 80088bc:	bf00      	nop
 80088be:	e002      	b.n	80088c6 <dir_read+0x178>
					break;
 80088c0:	bf00      	nop
 80088c2:	e000      	b.n	80088c6 <dir_read+0x178>
		if (res != FR_OK) break;
 80088c4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <dir_read+0x184>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80088dc:	b590      	push	{r4, r7, lr}
 80088de:	b089      	sub	sp, #36	; 0x24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80088ea:	2100      	movs	r1, #0
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff f907 	bl	8007b00 <dir_sdi>
 80088f2:	4603      	mov	r3, r0
 80088f4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80088f6:	7ffb      	ldrb	r3, [r7, #31]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <dir_find+0x24>
 80088fc:	7ffb      	ldrb	r3, [r7, #31]
 80088fe:	e112      	b.n	8008b26 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b04      	cmp	r3, #4
 8008906:	d164      	bne.n	80089d2 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fd2c 	bl	800836a <xname_sum>
 8008912:	4603      	mov	r3, r0
 8008914:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8008916:	e04f      	b.n	80089b8 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	3324      	adds	r3, #36	; 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd fe6e 	bl	8006600 <ld_word>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	893b      	ldrh	r3, [r7, #8]
 800892a:	4293      	cmp	r3, r2
 800892c:	d000      	beq.n	8008930 <dir_find+0x54>
 800892e:	e043      	b.n	80089b8 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008938:	76fb      	strb	r3, [r7, #27]
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	617b      	str	r3, [r7, #20]
 800893e:	2300      	movs	r3, #0
 8008940:	613b      	str	r3, [r7, #16]
 8008942:	e029      	b.n	8008998 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <dir_find+0x78>
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	3302      	adds	r3, #2
 8008952:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	695a      	ldr	r2, [r3, #20]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	4413      	add	r3, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd fe4f 	bl	8006600 <ld_word>
 8008962:	4603      	mov	r3, r0
 8008964:	4618      	mov	r0, r3
 8008966:	f002 f96d 	bl	800ac44 <ff_wtoupper>
 800896a:	4603      	mov	r3, r0
 800896c:	461c      	mov	r4, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	4413      	add	r3, r2
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	4618      	mov	r0, r3
 800897c:	f002 f962 	bl	800ac44 <ff_wtoupper>
 8008980:	4603      	mov	r3, r0
 8008982:	429c      	cmp	r4, r3
 8008984:	d10c      	bne.n	80089a0 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8008986:	7efb      	ldrb	r3, [r7, #27]
 8008988:	3b01      	subs	r3, #1
 800898a:	76fb      	strb	r3, [r7, #27]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	3302      	adds	r3, #2
 8008990:	617b      	str	r3, [r7, #20]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	3301      	adds	r3, #1
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	7efb      	ldrb	r3, [r7, #27]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1d2      	bne.n	8008944 <dir_find+0x68>
 800899e:	e000      	b.n	80089a2 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80089a0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80089a2:	7efb      	ldrb	r3, [r7, #27]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <dir_find+0xdc>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	4413      	add	r3, r2
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d009      	beq.n	80089cc <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80089b8:	2100      	movs	r1, #0
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff fec7 	bl	800874e <dir_read>
 80089c0:	4603      	mov	r3, r0
 80089c2:	77fb      	strb	r3, [r7, #31]
 80089c4:	7ffb      	ldrb	r3, [r7, #31]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0a6      	beq.n	8008918 <dir_find+0x3c>
 80089ca:	e000      	b.n	80089ce <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80089cc:	bf00      	nop
		}
		return res;
 80089ce:	7ffb      	ldrb	r3, [r7, #31]
 80089d0:	e0a9      	b.n	8008b26 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80089d2:	23ff      	movs	r3, #255	; 0xff
 80089d4:	773b      	strb	r3, [r7, #28]
 80089d6:	7f3b      	ldrb	r3, [r7, #28]
 80089d8:	777b      	strb	r3, [r7, #29]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
 80089e0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7fe f9fd 	bl	8006de8 <move_window>
 80089ee:	4603      	mov	r3, r0
 80089f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80089f2:	7ffb      	ldrb	r3, [r7, #31]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 8090 	bne.w	8008b1a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a02:	7fbb      	ldrb	r3, [r7, #30]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d102      	bne.n	8008a0e <dir_find+0x132>
 8008a08:	2304      	movs	r3, #4
 8008a0a:	77fb      	strb	r3, [r7, #31]
 8008a0c:	e08a      	b.n	8008b24 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	330b      	adds	r3, #11
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a1a:	72fb      	strb	r3, [r7, #11]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7afa      	ldrb	r2, [r7, #11]
 8008a20:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008a22:	7fbb      	ldrb	r3, [r7, #30]
 8008a24:	2be5      	cmp	r3, #229	; 0xe5
 8008a26:	d007      	beq.n	8008a38 <dir_find+0x15c>
 8008a28:	7afb      	ldrb	r3, [r7, #11]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <dir_find+0x16a>
 8008a32:	7afb      	ldrb	r3, [r7, #11]
 8008a34:	2b0f      	cmp	r3, #15
 8008a36:	d006      	beq.n	8008a46 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a38:	23ff      	movs	r3, #255	; 0xff
 8008a3a:	777b      	strb	r3, [r7, #29]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a42:	64da      	str	r2, [r3, #76]	; 0x4c
 8008a44:	e05e      	b.n	8008b04 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	2b0f      	cmp	r3, #15
 8008a4a:	d136      	bne.n	8008aba <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8008a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d154      	bne.n	8008b04 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008a5a:	7fbb      	ldrb	r3, [r7, #30]
 8008a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00d      	beq.n	8008a80 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a68:	7b5b      	ldrb	r3, [r3, #13]
 8008a6a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008a6c:	7fbb      	ldrb	r3, [r7, #30]
 8008a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a72:	77bb      	strb	r3, [r7, #30]
 8008a74:	7fbb      	ldrb	r3, [r7, #30]
 8008a76:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008a80:	7fba      	ldrb	r2, [r7, #30]
 8008a82:	7f7b      	ldrb	r3, [r7, #29]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d115      	bne.n	8008ab4 <dir_find+0x1d8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8c:	330d      	adds	r3, #13
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	7f3a      	ldrb	r2, [r7, #28]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d10e      	bne.n	8008ab4 <dir_find+0x1d8>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7ff fa43 	bl	8007f2c <cmp_lfn>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <dir_find+0x1d8>
 8008aac:	7f7b      	ldrb	r3, [r7, #29]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	e000      	b.n	8008ab6 <dir_find+0x1da>
 8008ab4:	23ff      	movs	r3, #255	; 0xff
 8008ab6:	777b      	strb	r3, [r7, #29]
 8008ab8:	e024      	b.n	8008b04 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008aba:	7f7b      	ldrb	r3, [r7, #29]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <dir_find+0x1f8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff fbfc 	bl	80082c2 <sum_sfn>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	7f3b      	ldrb	r3, [r7, #28]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d024      	beq.n	8008b1e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <dir_find+0x21c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3340      	adds	r3, #64	; 0x40
 8008aea:	220b      	movs	r2, #11
 8008aec:	4619      	mov	r1, r3
 8008aee:	f7fd ff88 	bl	8006a02 <mem_cmp>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d014      	beq.n	8008b22 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008af8:	23ff      	movs	r3, #255	; 0xff
 8008afa:	777b      	strb	r3, [r7, #29]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f04f 32ff 	mov.w	r2, #4294967295
 8008b02:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b04:	2100      	movs	r1, #0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff f88e 	bl	8007c28 <dir_next>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8008b10:	7ffb      	ldrb	r3, [r7, #31]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f43f af65 	beq.w	80089e2 <dir_find+0x106>
 8008b18:	e004      	b.n	8008b24 <dir_find+0x248>
		if (res != FR_OK) break;
 8008b1a:	bf00      	nop
 8008b1c:	e002      	b.n	8008b24 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008b1e:	bf00      	nop
 8008b20:	e000      	b.n	8008b24 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b22:	bf00      	nop

	return res;
 8008b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3724      	adds	r7, #36	; 0x24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd90      	pop	{r4, r7, pc}
	...

08008b30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008b30:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008b34:	b0a2      	sub	sp, #136	; 0x88
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	677b      	str	r3, [r7, #116]	; 0x74
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8008b46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <dir_register+0x22>
 8008b4e:	2306      	movs	r3, #6
 8008b50:	e19e      	b.n	8008e90 <dir_register+0x360>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008b52:	2300      	movs	r3, #0
 8008b54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b56:	e002      	b.n	8008b5e <dir_register+0x2e>
 8008b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	4413      	add	r3, r2
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f4      	bne.n	8008b58 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	f040 80a9 	bne.w	8008cca <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8008b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b7a:	330e      	adds	r3, #14
 8008b7c:	4aaa      	ldr	r2, [pc, #680]	; (8008e28 <dir_register+0x2f8>)
 8008b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b82:	08db      	lsrs	r3, r3, #3
 8008b84:	3302      	adds	r3, #2
 8008b86:	67bb      	str	r3, [r7, #120]	; 0x78
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8008b88:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff f932 	bl	8007df4 <dir_alloc>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res != FR_OK) return res;
 8008b96:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <dir_register+0x74>
 8008b9e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008ba2:	e175      	b.n	8008e90 <dir_register+0x360>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008baa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	015b      	lsls	r3, r3, #5
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d07a      	beq.n	8008cb6 <dir_register+0x186>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	79db      	ldrb	r3, [r3, #7]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d074      	beq.n	8008cb6 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8008bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd4:	895b      	ldrh	r3, [r3, #10]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bda:	899b      	ldrh	r3, [r3, #12]
 8008bdc:	fb03 f300 	mul.w	r3, r3, r0
 8008be0:	469b      	mov	fp, r3
 8008be2:	f04f 0c00 	mov.w	ip, #0
 8008be6:	eb1b 0301 	adds.w	r3, fp, r1
 8008bea:	eb4c 0402 	adc.w	r4, ip, r2
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fd26 	bl	8007648 <fill_first_frag>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 8008c02:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <dir_register+0xe0>
 8008c0a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c0e:	e13f      	b.n	8008e90 <dir_register+0x360>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f7fe fd43 	bl	80076a6 <fill_last_frag>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 8008c26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <dir_register+0x104>
 8008c2e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c32:	e12d      	b.n	8008e90 <dir_register+0x360>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	f107 0308 	add.w	r3, r7, #8
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff fc87 	bl	8008550 <load_obj_dir>
 8008c42:	4603      	mov	r3, r0
 8008c44:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 8008c48:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <dir_register+0x126>
 8008c50:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c54:	e11c      	b.n	8008e90 <dir_register+0x360>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8008c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008c64:	461a      	mov	r2, r3
 8008c66:	4623      	mov	r3, r4
 8008c68:	4608      	mov	r0, r1
 8008c6a:	f7fd fe08 	bl	800687e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8008c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4623      	mov	r3, r4
 8008c80:	4608      	mov	r0, r1
 8008c82:	f7fd fdfc 	bl	800687e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	79da      	ldrb	r2, [r3, #7]
 8008c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	3321      	adds	r3, #33	; 0x21
 8008c90:	f042 0201 	orr.w	r2, r2, #1
 8008c94:	b2d2      	uxtb	r2, r2
 8008c96:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff fc94 	bl	80085ca <store_xdir>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 8008ca8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <dir_register+0x186>
 8008cb0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008cb4:	e0ec      	b.n	8008e90 <dir_register+0x360>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8008cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb8:	695a      	ldr	r2, [r3, #20]
 8008cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7ff fcdd 	bl	8008680 <create_xdir>
		return FR_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e0e2      	b.n	8008e90 <dir_register+0x360>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008cd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008cd4:	220c      	movs	r2, #12
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fd fe58 	bl	800698c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008cdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d039      	beq.n	8008d5c <dir_register+0x22c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2240      	movs	r2, #64	; 0x40
 8008cec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cf6:	e019      	b.n	8008d2c <dir_register+0x1fc>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8008d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d0a:	f7ff fa4b 	bl	80081a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fde4 	bl	80088dc <dir_find>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) break;
 8008d1a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <dir_register+0x206>
		for (n = 1; n < 100; n++) {
 8008d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d26:	3301      	adds	r3, #1
 8008d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d30:	2b63      	cmp	r3, #99	; 0x63
 8008d32:	d9e1      	bls.n	8008cf8 <dir_register+0x1c8>
 8008d34:	e000      	b.n	8008d38 <dir_register+0x208>
			if (res != FR_OK) break;
 8008d36:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d3c:	2b64      	cmp	r3, #100	; 0x64
 8008d3e:	d101      	bne.n	8008d44 <dir_register+0x214>
 8008d40:	2307      	movs	r3, #7
 8008d42:	e0a5      	b.n	8008e90 <dir_register+0x360>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008d44:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d002      	beq.n	8008d52 <dir_register+0x222>
 8008d4c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008d50:	e09e      	b.n	8008e90 <dir_register+0x360>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008d52:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008d5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d007      	beq.n	8008d78 <dir_register+0x248>
 8008d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	4a2f      	ldr	r2, [pc, #188]	; (8008e2c <dir_register+0x2fc>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	089b      	lsrs	r3, r3, #2
 8008d74:	3301      	adds	r3, #1
 8008d76:	e000      	b.n	8008d7a <dir_register+0x24a>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	67bb      	str	r3, [r7, #120]	; 0x78
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008d7c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff f838 	bl	8007df4 <dir_alloc>
 8008d84:	4603      	mov	r3, r0
 8008d86:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008d8a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d14f      	bne.n	8008e32 <dir_register+0x302>
 8008d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d94:	3b01      	subs	r3, #1
 8008d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d049      	beq.n	8008e32 <dir_register+0x302>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da4:	015b      	lsls	r3, r3, #5
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fe fea8 	bl	8007b00 <dir_sdi>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 8008db6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d139      	bne.n	8008e32 <dir_register+0x302>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3340      	adds	r3, #64	; 0x40
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fa7d 	bl	80082c2 <sum_sfn>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008dd6:	f7fe f807 	bl	8006de8 <move_window>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res != FR_OK) break;
 8008de0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d123      	bne.n	8008e30 <dir_register+0x300>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dea:	6918      	ldr	r0, [r3, #16]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008df8:	f7ff f96c 	bl	80080d4 <put_lfn>
				fs->wflag = 1;
 8008dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dfe:	2201      	movs	r2, #1
 8008e00:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008e02:	2100      	movs	r1, #0
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7fe ff0f 	bl	8007c28 <dir_next>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			} while (res == FR_OK && --nent);
 8008e10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10c      	bne.n	8008e32 <dir_register+0x302>
 8008e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1d4      	bne.n	8008dce <dir_register+0x29e>
 8008e24:	e005      	b.n	8008e32 <dir_register+0x302>
 8008e26:	bf00      	nop
 8008e28:	88888889 	.word	0x88888889
 8008e2c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8008e30:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008e32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d128      	bne.n	8008e8c <dir_register+0x35c>
		res = move_window(fs, dp->sect);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008e42:	f7fd ffd1 	bl	8006de8 <move_window>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 8008e4c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d11b      	bne.n	8008e8c <dir_register+0x35c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e58:	2220      	movs	r2, #32
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd fdb6 	bl	80069ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3340      	adds	r3, #64	; 0x40
 8008e6a:	220b      	movs	r2, #11
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	f7fd fd8d 	bl	800698c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	f002 0218 	and.w	r2, r2, #24
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e88:	2201      	movs	r2, #1
 8008e8a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008e8c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3788      	adds	r7, #136	; 0x88
 8008e94:	46bd      	mov	sp, r7
 8008e96:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008e9a:	bf00      	nop

08008e9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08a      	sub	sp, #40	; 0x28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	61ba      	str	r2, [r7, #24]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ecc:	2b1f      	cmp	r3, #31
 8008ece:	d940      	bls.n	8008f52 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8008ed4:	d006      	beq.n	8008ee4 <create_name+0x48>
 8008ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8008eda:	d110      	bne.n	8008efe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008edc:	e002      	b.n	8008ee4 <create_name+0x48>
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	61bb      	str	r3, [r7, #24]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	4413      	add	r3, r2
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b2f      	cmp	r3, #47	; 0x2f
 8008eee:	d0f6      	beq.n	8008ede <create_name+0x42>
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8008efa:	d0f0      	beq.n	8008ede <create_name+0x42>
			break;
 8008efc:	e02a      	b.n	8008f54 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2bfe      	cmp	r3, #254	; 0xfe
 8008f02:	d901      	bls.n	8008f08 <create_name+0x6c>
 8008f04:	2306      	movs	r3, #6
 8008f06:	e177      	b.n	80091f8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f10:	2101      	movs	r1, #1
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 fe5a 	bl	800abcc <ff_convert>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <create_name+0x8a>
 8008f22:	2306      	movs	r3, #6
 8008f24:	e168      	b.n	80091f8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f28:	2b7f      	cmp	r3, #127	; 0x7f
 8008f2a:	d809      	bhi.n	8008f40 <create_name+0xa4>
 8008f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f2e:	4619      	mov	r1, r3
 8008f30:	48b3      	ldr	r0, [pc, #716]	; (8009200 <create_name+0x364>)
 8008f32:	f7fd fd8d 	bl	8006a50 <chk_chr>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <create_name+0xa4>
 8008f3c:	2306      	movs	r3, #6
 8008f3e:	e15b      	b.n	80091f8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	617a      	str	r2, [r7, #20]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f4e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008f50:	e7b4      	b.n	8008ebc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008f52:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	441a      	add	r2, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f60:	2b1f      	cmp	r3, #31
 8008f62:	d801      	bhi.n	8008f68 <create_name+0xcc>
 8008f64:	2304      	movs	r3, #4
 8008f66:	e000      	b.n	8008f6a <create_name+0xce>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008f6e:	e011      	b.n	8008f94 <create_name+0xf8>
		w = lfn[di - 1];
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f76:	3b01      	subs	r3, #1
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d002      	beq.n	8008f8e <create_name+0xf2>
 8008f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f8c:	d106      	bne.n	8008f9c <create_name+0x100>
		di--;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1ea      	bne.n	8008f70 <create_name+0xd4>
 8008f9a:	e000      	b.n	8008f9e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008f9c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <create_name+0x118>
 8008fb0:	2306      	movs	r3, #6
 8008fb2:	e121      	b.n	80091f8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3340      	adds	r3, #64	; 0x40
 8008fb8:	220b      	movs	r2, #11
 8008fba:	2120      	movs	r1, #32
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fd fd06 	bl	80069ce <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	e002      	b.n	8008fce <create_name+0x132>
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d0f5      	beq.n	8008fc8 <create_name+0x12c>
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8008fe8:	d0ee      	beq.n	8008fc8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d009      	beq.n	8009004 <create_name+0x168>
 8008ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff4:	f043 0303 	orr.w	r3, r3, #3
 8008ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008ffc:	e002      	b.n	8009004 <create_name+0x168>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	3b01      	subs	r3, #1
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d009      	beq.n	800901e <create_name+0x182>
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009010:	3b01      	subs	r3, #1
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	2b2e      	cmp	r3, #46	; 0x2e
 800901c:	d1ef      	bne.n	8008ffe <create_name+0x162>

	i = b = 0; ni = 8;
 800901e:	2300      	movs	r3, #0
 8009020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009024:	2300      	movs	r3, #0
 8009026:	623b      	str	r3, [r7, #32]
 8009028:	2308      	movs	r3, #8
 800902a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	61ba      	str	r2, [r7, #24]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	4413      	add	r3, r2
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800903c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 8090 	beq.w	8009164 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009046:	2b20      	cmp	r3, #32
 8009048:	d006      	beq.n	8009058 <create_name+0x1bc>
 800904a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800904c:	2b2e      	cmp	r3, #46	; 0x2e
 800904e:	d10a      	bne.n	8009066 <create_name+0x1ca>
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	429a      	cmp	r2, r3
 8009056:	d006      	beq.n	8009066 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905c:	f043 0303 	orr.w	r3, r3, #3
 8009060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009064:	e07d      	b.n	8009162 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009066:	6a3a      	ldr	r2, [r7, #32]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	429a      	cmp	r2, r3
 800906c:	d203      	bcs.n	8009076 <create_name+0x1da>
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	429a      	cmp	r2, r3
 8009074:	d123      	bne.n	80090be <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	2b0b      	cmp	r3, #11
 800907a:	d106      	bne.n	800908a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800907c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009080:	f043 0303 	orr.w	r3, r3, #3
 8009084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009088:	e06f      	b.n	800916a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	429a      	cmp	r2, r3
 8009090:	d005      	beq.n	800909e <create_name+0x202>
 8009092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009096:	f043 0303 	orr.w	r3, r3, #3
 800909a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d860      	bhi.n	8009168 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	61bb      	str	r3, [r7, #24]
 80090aa:	2308      	movs	r3, #8
 80090ac:	623b      	str	r3, [r7, #32]
 80090ae:	230b      	movs	r3, #11
 80090b0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80090b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090bc:	e051      	b.n	8009162 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80090be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090c0:	2b7f      	cmp	r3, #127	; 0x7f
 80090c2:	d914      	bls.n	80090ee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80090c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090c6:	2100      	movs	r1, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 fd7f 	bl	800abcc <ff_convert>
 80090ce:	4603      	mov	r3, r0
 80090d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80090d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <create_name+0x246>
 80090d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090da:	3b80      	subs	r3, #128	; 0x80
 80090dc:	4a49      	ldr	r2, [pc, #292]	; (8009204 <create_name+0x368>)
 80090de:	5cd3      	ldrb	r3, [r2, r3]
 80090e0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80090e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e6:	f043 0302 	orr.w	r3, r3, #2
 80090ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80090ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <create_name+0x268>
 80090f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090f6:	4619      	mov	r1, r3
 80090f8:	4843      	ldr	r0, [pc, #268]	; (8009208 <create_name+0x36c>)
 80090fa:	f7fd fca9 	bl	8006a50 <chk_chr>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d008      	beq.n	8009116 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009104:	235f      	movs	r3, #95	; 0x5f
 8009106:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800910c:	f043 0303 	orr.w	r3, r3, #3
 8009110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009114:	e01b      	b.n	800914e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009118:	2b40      	cmp	r3, #64	; 0x40
 800911a:	d909      	bls.n	8009130 <create_name+0x294>
 800911c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800911e:	2b5a      	cmp	r3, #90	; 0x5a
 8009120:	d806      	bhi.n	8009130 <create_name+0x294>
					b |= 2;
 8009122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009126:	f043 0302 	orr.w	r3, r3, #2
 800912a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800912e:	e00e      	b.n	800914e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009132:	2b60      	cmp	r3, #96	; 0x60
 8009134:	d90b      	bls.n	800914e <create_name+0x2b2>
 8009136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009138:	2b7a      	cmp	r3, #122	; 0x7a
 800913a:	d808      	bhi.n	800914e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800913c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800914a:	3b20      	subs	r3, #32
 800914c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	623a      	str	r2, [r7, #32]
 8009154:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009156:	b2d1      	uxtb	r1, r2
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	4413      	add	r3, r2
 800915c:	460a      	mov	r2, r1
 800915e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8009162:	e763      	b.n	800902c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009164:	bf00      	nop
 8009166:	e000      	b.n	800916a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009168:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009170:	2be5      	cmp	r3, #229	; 0xe5
 8009172:	d103      	bne.n	800917c <create_name+0x2e0>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2205      	movs	r2, #5
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	2b08      	cmp	r3, #8
 8009180:	d104      	bne.n	800918c <create_name+0x2f0>
 8009182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800918c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009190:	f003 030c 	and.w	r3, r3, #12
 8009194:	2b0c      	cmp	r3, #12
 8009196:	d005      	beq.n	80091a4 <create_name+0x308>
 8009198:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d105      	bne.n	80091b0 <create_name+0x314>
 80091a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091a8:	f043 0302 	orr.w	r3, r3, #2
 80091ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80091b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d117      	bne.n	80091ec <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80091bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d105      	bne.n	80091d4 <create_name+0x338>
 80091c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091cc:	f043 0310 	orr.w	r3, r3, #16
 80091d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80091d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091d8:	f003 030c 	and.w	r3, r3, #12
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d105      	bne.n	80091ec <create_name+0x350>
 80091e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091e4:	f043 0308 	orr.w	r3, r3, #8
 80091e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091f2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80091f6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3728      	adds	r7, #40	; 0x28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	0800e890 	.word	0x0800e890
 8009204:	0800e910 	.word	0x0800e910
 8009208:	0800e89c 	.word	0x0800e89c

0800920c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800920c:	b590      	push	{r4, r7, lr}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009220:	e002      	b.n	8009228 <follow_path+0x1c>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	3301      	adds	r3, #1
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b2f      	cmp	r3, #47	; 0x2f
 800922e:	d0f8      	beq.n	8009222 <follow_path+0x16>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b5c      	cmp	r3, #92	; 0x5c
 8009236:	d0f4      	beq.n	8009222 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	2200      	movs	r2, #0
 800923c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2200      	movs	r2, #0
 8009242:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b1f      	cmp	r3, #31
 800924a:	d80a      	bhi.n	8009262 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2280      	movs	r2, #128	; 0x80
 8009250:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8009254:	2100      	movs	r1, #0
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7fe fc52 	bl	8007b00 <dir_sdi>
 800925c:	4603      	mov	r3, r0
 800925e:	75fb      	strb	r3, [r7, #23]
 8009260:	e07c      	b.n	800935c <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009262:	463b      	mov	r3, r7
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff fe18 	bl	8008e9c <create_name>
 800926c:	4603      	mov	r3, r0
 800926e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d16d      	bne.n	8009352 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff fb30 	bl	80088dc <dir_find>
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009286:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	2b04      	cmp	r3, #4
 8009292:	d160      	bne.n	8009356 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d15b      	bne.n	8009356 <follow_path+0x14a>
 800929e:	2305      	movs	r3, #5
 80092a0:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80092a2:	e058      	b.n	8009356 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092a4:	7afb      	ldrb	r3, [r7, #11]
 80092a6:	f003 0304 	and.w	r3, r3, #4
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d155      	bne.n	800935a <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	799b      	ldrb	r3, [r3, #6]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d102      	bne.n	80092c0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 80092ba:	2305      	movs	r3, #5
 80092bc:	75fb      	strb	r3, [r7, #23]
 80092be:	e04d      	b.n	800935c <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d12f      	bne.n	8009328 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80092d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	79d2      	ldrb	r2, [r2, #7]
 80092de:	431a      	orrs	r2, r3
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	3334      	adds	r3, #52	; 0x34
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fd f99c 	bl	8006630 <ld_dword>
 80092f8:	4602      	mov	r2, r0
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	3321      	adds	r3, #33	; 0x21
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	b2da      	uxtb	r2, r3
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	3338      	adds	r3, #56	; 0x38
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd f9ad 	bl	8006676 <ld_qword>
 800931c:	4603      	mov	r3, r0
 800931e:	460c      	mov	r4, r1
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8009326:	e79c      	b.n	8009262 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	8992      	ldrh	r2, [r2, #12]
 8009336:	fbb3 f0f2 	udiv	r0, r3, r2
 800933a:	fb02 f200 	mul.w	r2, r2, r0
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	440b      	add	r3, r1
 8009342:	4619      	mov	r1, r3
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7fe fdb1 	bl	8007eac <ld_clust>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009350:	e787      	b.n	8009262 <follow_path+0x56>
			if (res != FR_OK) break;
 8009352:	bf00      	nop
 8009354:	e002      	b.n	800935c <follow_path+0x150>
				break;
 8009356:	bf00      	nop
 8009358:	e000      	b.n	800935c <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800935a:	bf00      	nop
			}
		}
	}

	return res;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	bd90      	pop	{r4, r7, pc}

08009366 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009366:	b480      	push	{r7}
 8009368:	b087      	sub	sp, #28
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800936e:	f04f 33ff 	mov.w	r3, #4294967295
 8009372:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d031      	beq.n	80093e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	e002      	b.n	800938a <get_ldnumber+0x24>
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	3301      	adds	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	2b1f      	cmp	r3, #31
 8009390:	d903      	bls.n	800939a <get_ldnumber+0x34>
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b3a      	cmp	r3, #58	; 0x3a
 8009398:	d1f4      	bne.n	8009384 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b3a      	cmp	r3, #58	; 0x3a
 80093a0:	d11c      	bne.n	80093dc <get_ldnumber+0x76>
			tp = *path;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	60fa      	str	r2, [r7, #12]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	3b30      	subs	r3, #48	; 0x30
 80093b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d80e      	bhi.n	80093d8 <get_ldnumber+0x72>
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d10a      	bne.n	80093d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d107      	bne.n	80093d8 <get_ldnumber+0x72>
					vol = (int)i;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	3301      	adds	r3, #1
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	e002      	b.n	80093e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80093dc:	2300      	movs	r3, #0
 80093de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80093e0:	693b      	ldr	r3, [r7, #16]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	70da      	strb	r2, [r3, #3]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f04f 32ff 	mov.w	r2, #4294967295
 8009406:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fd fcec 	bl	8006de8 <move_window>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <check_fs+0x2a>
 8009416:	2304      	movs	r3, #4
 8009418:	e044      	b.n	80094a4 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	333c      	adds	r3, #60	; 0x3c
 800941e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd f8ec 	bl	8006600 <ld_word>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009430:	429a      	cmp	r2, r3
 8009432:	d001      	beq.n	8009438 <check_fs+0x48>
 8009434:	2303      	movs	r3, #3
 8009436:	e035      	b.n	80094a4 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800943e:	2be9      	cmp	r3, #233	; 0xe9
 8009440:	d009      	beq.n	8009456 <check_fs+0x66>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009448:	2beb      	cmp	r3, #235	; 0xeb
 800944a:	d11e      	bne.n	800948a <check_fs+0x9a>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009452:	2b90      	cmp	r3, #144	; 0x90
 8009454:	d119      	bne.n	800948a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	333c      	adds	r3, #60	; 0x3c
 800945a:	3336      	adds	r3, #54	; 0x36
 800945c:	4618      	mov	r0, r3
 800945e:	f7fd f8e7 	bl	8006630 <ld_dword>
 8009462:	4603      	mov	r3, r0
 8009464:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009468:	4a10      	ldr	r2, [pc, #64]	; (80094ac <check_fs+0xbc>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d101      	bne.n	8009472 <check_fs+0x82>
 800946e:	2300      	movs	r3, #0
 8009470:	e018      	b.n	80094a4 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	333c      	adds	r3, #60	; 0x3c
 8009476:	3352      	adds	r3, #82	; 0x52
 8009478:	4618      	mov	r0, r3
 800947a:	f7fd f8d9 	bl	8006630 <ld_dword>
 800947e:	4602      	mov	r2, r0
 8009480:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <check_fs+0xc0>)
 8009482:	429a      	cmp	r2, r3
 8009484:	d101      	bne.n	800948a <check_fs+0x9a>
 8009486:	2300      	movs	r3, #0
 8009488:	e00c      	b.n	80094a4 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	333c      	adds	r3, #60	; 0x3c
 800948e:	220b      	movs	r2, #11
 8009490:	4908      	ldr	r1, [pc, #32]	; (80094b4 <check_fs+0xc4>)
 8009492:	4618      	mov	r0, r3
 8009494:	f7fd fab5 	bl	8006a02 <mem_cmp>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <check_fs+0xb2>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <check_fs+0xb4>
#endif
	return 2;
 80094a2:	2302      	movs	r3, #2
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	00544146 	.word	0x00544146
 80094b0:	33544146 	.word	0x33544146
 80094b4:	0800e8a4 	.word	0x0800e8a4

080094b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80094b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80094bc:	b098      	sub	sp, #96	; 0x60
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	4613      	mov	r3, r2
 80094c6:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7ff ff49 	bl	8009366 <get_ldnumber>
 80094d4:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 80094d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da01      	bge.n	80094e0 <find_volume+0x28>
 80094dc:	230b      	movs	r3, #11
 80094de:	e368      	b.n	8009bb2 <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80094e0:	4aaa      	ldr	r2, [pc, #680]	; (800978c <find_volume+0x2d4>)
 80094e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094e8:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80094ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <find_volume+0x3c>
 80094f0:	230c      	movs	r3, #12
 80094f2:	e35e      	b.n	8009bb2 <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094f8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	f023 0301 	bic.w	r3, r3, #1
 8009500:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01a      	beq.n	8009540 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800950a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	4618      	mov	r0, r3
 8009510:	f7fc ffd8 	bl	80064c4 <disk_status>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800951a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10c      	bne.n	8009540 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009526:	79fb      	ldrb	r3, [r7, #7]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d007      	beq.n	800953c <find_volume+0x84>
 800952c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8009538:	230a      	movs	r3, #10
 800953a:	e33a      	b.n	8009bb2 <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 800953c:	2300      	movs	r3, #0
 800953e:	e338      	b.n	8009bb2 <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009542:	2200      	movs	r2, #0
 8009544:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009548:	b2da      	uxtb	r2, r3
 800954a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800954e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009550:	785b      	ldrb	r3, [r3, #1]
 8009552:	4618      	mov	r0, r3
 8009554:	f7fc ffd0 	bl	80064f8 <disk_initialize>
 8009558:	4603      	mov	r3, r0
 800955a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800955e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800956a:	2303      	movs	r3, #3
 800956c:	e321      	b.n	8009bb2 <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d007      	beq.n	8009584 <find_volume+0xcc>
 8009574:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009580:	230a      	movs	r3, #10
 8009582:	e316      	b.n	8009bb2 <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009586:	7858      	ldrb	r0, [r3, #1]
 8009588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958a:	330c      	adds	r3, #12
 800958c:	461a      	mov	r2, r3
 800958e:	2102      	movs	r1, #2
 8009590:	f7fd f818 	bl	80065c4 <disk_ioctl>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <find_volume+0xe6>
 800959a:	2301      	movs	r3, #1
 800959c:	e309      	b.n	8009bb2 <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800959e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a0:	899b      	ldrh	r3, [r3, #12]
 80095a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095a6:	d80d      	bhi.n	80095c4 <find_volume+0x10c>
 80095a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095aa:	899b      	ldrh	r3, [r3, #12]
 80095ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b0:	d308      	bcc.n	80095c4 <find_volume+0x10c>
 80095b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b4:	899b      	ldrh	r3, [r3, #12]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ba:	899b      	ldrh	r3, [r3, #12]
 80095bc:	3b01      	subs	r3, #1
 80095be:	4013      	ands	r3, r2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <find_volume+0x110>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e2f4      	b.n	8009bb2 <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80095cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80095d0:	f7ff ff0e 	bl	80093f0 <check_fs>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80095da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d14b      	bne.n	800967a <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80095e2:	2300      	movs	r3, #0
 80095e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80095e6:	e01f      	b.n	8009628 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80095e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ea:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80095ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80095f6:	4413      	add	r3, r2
 80095f8:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	3304      	adds	r3, #4
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d006      	beq.n	8009612 <find_volume+0x15a>
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	3308      	adds	r3, #8
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd f811 	bl	8006630 <ld_dword>
 800960e:	4602      	mov	r2, r0
 8009610:	e000      	b.n	8009614 <find_volume+0x15c>
 8009612:	2200      	movs	r2, #0
 8009614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800961c:	440b      	add	r3, r1
 800961e:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009624:	3301      	adds	r3, #1
 8009626:	64bb      	str	r3, [r7, #72]	; 0x48
 8009628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962a:	2b03      	cmp	r3, #3
 800962c:	d9dc      	bls.n	80095e8 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800962e:	2300      	movs	r3, #0
 8009630:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8009632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <find_volume+0x186>
 8009638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800963a:	3b01      	subs	r3, #1
 800963c:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800963e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009646:	4413      	add	r3, r2
 8009648:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800964c:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800964e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <find_volume+0x1a8>
 8009654:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009656:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009658:	f7ff feca 	bl	80093f0 <check_fs>
 800965c:	4603      	mov	r3, r0
 800965e:	e000      	b.n	8009662 <find_volume+0x1aa>
 8009660:	2303      	movs	r3, #3
 8009662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800966a:	2b01      	cmp	r3, #1
 800966c:	d905      	bls.n	800967a <find_volume+0x1c2>
 800966e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009670:	3301      	adds	r3, #1
 8009672:	64bb      	str	r3, [r7, #72]	; 0x48
 8009674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009676:	2b03      	cmp	r3, #3
 8009678:	d9e1      	bls.n	800963e <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800967a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800967e:	2b04      	cmp	r3, #4
 8009680:	d101      	bne.n	8009686 <find_volume+0x1ce>
 8009682:	2301      	movs	r3, #1
 8009684:	e295      	b.n	8009bb2 <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800968a:	2b01      	cmp	r3, #1
 800968c:	d901      	bls.n	8009692 <find_volume+0x1da>
 800968e:	230d      	movs	r3, #13
 8009690:	e28f      	b.n	8009bb2 <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8009692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009696:	2b01      	cmp	r3, #1
 8009698:	f040 8101 	bne.w	800989e <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800969c:	230b      	movs	r3, #11
 800969e:	64bb      	str	r3, [r7, #72]	; 0x48
 80096a0:	e002      	b.n	80096a8 <find_volume+0x1f0>
 80096a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a4:	3301      	adds	r3, #1
 80096a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80096a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096aa:	2b3f      	cmp	r3, #63	; 0x3f
 80096ac:	d806      	bhi.n	80096bc <find_volume+0x204>
 80096ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096b2:	4413      	add	r3, r2
 80096b4:	333c      	adds	r3, #60	; 0x3c
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0f2      	beq.n	80096a2 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80096bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096be:	2b3f      	cmp	r3, #63	; 0x3f
 80096c0:	d801      	bhi.n	80096c6 <find_volume+0x20e>
 80096c2:	230d      	movs	r3, #13
 80096c4:	e275      	b.n	8009bb2 <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80096c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c8:	333c      	adds	r3, #60	; 0x3c
 80096ca:	3368      	adds	r3, #104	; 0x68
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fc ff97 	bl	8006600 <ld_word>
 80096d2:	4603      	mov	r3, r0
 80096d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d8:	d001      	beq.n	80096de <find_volume+0x226>
 80096da:	230d      	movs	r3, #13
 80096dc:	e269      	b.n	8009bb2 <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80096de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80096e4:	461a      	mov	r2, r3
 80096e6:	2301      	movs	r3, #1
 80096e8:	4093      	lsls	r3, r2
 80096ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096ec:	8992      	ldrh	r2, [r2, #12]
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d001      	beq.n	80096f6 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 80096f2:	230d      	movs	r3, #13
 80096f4:	e25d      	b.n	8009bb2 <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80096f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096f8:	333c      	adds	r3, #60	; 0x3c
 80096fa:	3348      	adds	r3, #72	; 0x48
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fc ffba 	bl	8006676 <ld_qword>
 8009702:	460a      	mov	r2, r1
 8009704:	4601      	mov	r1, r0
 8009706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009708:	469b      	mov	fp, r3
 800970a:	f04f 0c00 	mov.w	ip, #0
 800970e:	eb1b 0301 	adds.w	r3, fp, r1
 8009712:	eb4c 0402 	adc.w	r4, ip, r2
 8009716:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800971a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800971e:	2c01      	cmp	r4, #1
 8009720:	bf08      	it	eq
 8009722:	2b00      	cmpeq	r3, #0
 8009724:	d301      	bcc.n	800972a <find_volume+0x272>
 8009726:	230d      	movs	r3, #13
 8009728:	e243      	b.n	8009bb2 <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800972a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972c:	333c      	adds	r3, #60	; 0x3c
 800972e:	3354      	adds	r3, #84	; 0x54
 8009730:	4618      	mov	r0, r3
 8009732:	f7fc ff7d 	bl	8006630 <ld_dword>
 8009736:	4602      	mov	r2, r0
 8009738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800973c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8009742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009744:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8009746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009748:	789b      	ldrb	r3, [r3, #2]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d001      	beq.n	8009752 <find_volume+0x29a>
 800974e:	230d      	movs	r3, #13
 8009750:	e22f      	b.n	8009bb2 <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8009752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009754:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009758:	461a      	mov	r2, r3
 800975a:	2301      	movs	r3, #1
 800975c:	4093      	lsls	r3, r2
 800975e:	b29a      	uxth	r2, r3
 8009760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009762:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8009764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009766:	895b      	ldrh	r3, [r3, #10]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <find_volume+0x2b8>
 800976c:	230d      	movs	r3, #13
 800976e:	e220      	b.n	8009bb2 <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8009770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009772:	333c      	adds	r3, #60	; 0x3c
 8009774:	335c      	adds	r3, #92	; 0x5c
 8009776:	4618      	mov	r0, r3
 8009778:	f7fc ff5a 	bl	8006630 <ld_dword>
 800977c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	4a03      	ldr	r2, [pc, #12]	; (8009790 <find_volume+0x2d8>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d906      	bls.n	8009794 <find_volume+0x2dc>
 8009786:	230d      	movs	r3, #13
 8009788:	e213      	b.n	8009bb2 <find_volume+0x6fa>
 800978a:	bf00      	nop
 800978c:	2000020c 	.word	0x2000020c
 8009790:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	1c9a      	adds	r2, r3, #2
 8009798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979a:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800979c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097a0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80097a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097a4:	333c      	adds	r3, #60	; 0x3c
 80097a6:	3358      	adds	r3, #88	; 0x58
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fc ff41 	bl	8006630 <ld_dword>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097b2:	441a      	add	r2, r3
 80097b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b6:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80097b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ba:	333c      	adds	r3, #60	; 0x3c
 80097bc:	3350      	adds	r3, #80	; 0x50
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fc ff36 	bl	8006630 <ld_dword>
 80097c4:	4602      	mov	r2, r0
 80097c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097c8:	441a      	add	r2, r3
 80097ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097cc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80097ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d2:	4619      	mov	r1, r3
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097da:	895b      	ldrh	r3, [r3, #10]
 80097dc:	4618      	mov	r0, r3
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	fb03 f300 	mul.w	r3, r3, r0
 80097e4:	469b      	mov	fp, r3
 80097e6:	f04f 0c00 	mov.w	ip, #0
 80097ea:	eb1b 0301 	adds.w	r3, fp, r1
 80097ee:	eb4c 0402 	adc.w	r4, ip, r2
 80097f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80097f6:	42a2      	cmp	r2, r4
 80097f8:	bf08      	it	eq
 80097fa:	4299      	cmpeq	r1, r3
 80097fc:	d201      	bcs.n	8009802 <find_volume+0x34a>
 80097fe:	230d      	movs	r3, #13
 8009800:	e1d7      	b.n	8009bb2 <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8009802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009804:	333c      	adds	r3, #60	; 0x3c
 8009806:	3360      	adds	r3, #96	; 0x60
 8009808:	4618      	mov	r0, r3
 800980a:	f7fc ff11 	bl	8006630 <ld_dword>
 800980e:	4602      	mov	r2, r0
 8009810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009812:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8009814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009818:	4619      	mov	r1, r3
 800981a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800981c:	f7fd fb82 	bl	8006f24 <clust2sect>
 8009820:	4603      	mov	r3, r0
 8009822:	4619      	mov	r1, r3
 8009824:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009826:	f7fd fadf 	bl	8006de8 <move_window>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <find_volume+0x37c>
 8009830:	2301      	movs	r3, #1
 8009832:	e1be      	b.n	8009bb2 <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8009834:	2300      	movs	r3, #0
 8009836:	64bb      	str	r3, [r7, #72]	; 0x48
 8009838:	e015      	b.n	8009866 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800983a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800983c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983e:	4413      	add	r3, r2
 8009840:	333c      	adds	r3, #60	; 0x3c
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b81      	cmp	r3, #129	; 0x81
 8009846:	d10b      	bne.n	8009860 <find_volume+0x3a8>
 8009848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800984e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009850:	3314      	adds	r3, #20
 8009852:	4413      	add	r3, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f7fc feeb 	bl	8006630 <ld_dword>
 800985a:	4603      	mov	r3, r0
 800985c:	2b02      	cmp	r3, #2
 800985e:	d009      	beq.n	8009874 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8009860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009862:	3320      	adds	r3, #32
 8009864:	64bb      	str	r3, [r7, #72]	; 0x48
 8009866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009868:	899b      	ldrh	r3, [r3, #12]
 800986a:	461a      	mov	r2, r3
 800986c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800986e:	4293      	cmp	r3, r2
 8009870:	d3e3      	bcc.n	800983a <find_volume+0x382>
 8009872:	e000      	b.n	8009876 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8009874:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8009876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009878:	899b      	ldrh	r3, [r3, #12]
 800987a:	461a      	mov	r2, r3
 800987c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987e:	4293      	cmp	r3, r2
 8009880:	d101      	bne.n	8009886 <find_volume+0x3ce>
 8009882:	230d      	movs	r3, #13
 8009884:	e195      	b.n	8009bb2 <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009888:	f04f 32ff 	mov.w	r2, #4294967295
 800988c:	61da      	str	r2, [r3, #28]
 800988e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009890:	69da      	ldr	r2, [r3, #28]
 8009892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009894:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8009896:	2304      	movs	r3, #4
 8009898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800989c:	e177      	b.n	8009b8e <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800989e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a0:	333c      	adds	r3, #60	; 0x3c
 80098a2:	330b      	adds	r3, #11
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fc feab 	bl	8006600 <ld_word>
 80098aa:	4603      	mov	r3, r0
 80098ac:	461a      	mov	r2, r3
 80098ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b0:	899b      	ldrh	r3, [r3, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d001      	beq.n	80098ba <find_volume+0x402>
 80098b6:	230d      	movs	r3, #13
 80098b8:	e17b      	b.n	8009bb2 <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80098ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098bc:	333c      	adds	r3, #60	; 0x3c
 80098be:	3316      	adds	r3, #22
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fc fe9d 	bl	8006600 <ld_word>
 80098c6:	4603      	mov	r3, r0
 80098c8:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80098ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <find_volume+0x426>
 80098d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d2:	333c      	adds	r3, #60	; 0x3c
 80098d4:	3324      	adds	r3, #36	; 0x24
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fc feaa 	bl	8006630 <ld_dword>
 80098dc:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 80098de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80098e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098e6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80098ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ec:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80098ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f0:	789b      	ldrb	r3, [r3, #2]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d005      	beq.n	8009902 <find_volume+0x44a>
 80098f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d001      	beq.n	8009902 <find_volume+0x44a>
 80098fe:	230d      	movs	r3, #13
 8009900:	e157      	b.n	8009bb2 <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009904:	789b      	ldrb	r3, [r3, #2]
 8009906:	461a      	mov	r2, r3
 8009908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800990a:	fb02 f303 	mul.w	r3, r2, r3
 800990e:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009912:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009916:	b29a      	uxth	r2, r3
 8009918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800991a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800991c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800991e:	895b      	ldrh	r3, [r3, #10]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d008      	beq.n	8009936 <find_volume+0x47e>
 8009924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009926:	895b      	ldrh	r3, [r3, #10]
 8009928:	461a      	mov	r2, r3
 800992a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800992c:	895b      	ldrh	r3, [r3, #10]
 800992e:	3b01      	subs	r3, #1
 8009930:	4013      	ands	r3, r2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <find_volume+0x482>
 8009936:	230d      	movs	r3, #13
 8009938:	e13b      	b.n	8009bb2 <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800993a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800993c:	333c      	adds	r3, #60	; 0x3c
 800993e:	3311      	adds	r3, #17
 8009940:	4618      	mov	r0, r3
 8009942:	f7fc fe5d 	bl	8006600 <ld_word>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800994c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800994e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009950:	891b      	ldrh	r3, [r3, #8]
 8009952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009954:	8992      	ldrh	r2, [r2, #12]
 8009956:	0952      	lsrs	r2, r2, #5
 8009958:	b292      	uxth	r2, r2
 800995a:	fbb3 f1f2 	udiv	r1, r3, r2
 800995e:	fb02 f201 	mul.w	r2, r2, r1
 8009962:	1a9b      	subs	r3, r3, r2
 8009964:	b29b      	uxth	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <find_volume+0x4b6>
 800996a:	230d      	movs	r3, #13
 800996c:	e121      	b.n	8009bb2 <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800996e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009970:	333c      	adds	r3, #60	; 0x3c
 8009972:	3313      	adds	r3, #19
 8009974:	4618      	mov	r0, r3
 8009976:	f7fc fe43 	bl	8006600 <ld_word>
 800997a:	4603      	mov	r3, r0
 800997c:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800997e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <find_volume+0x4da>
 8009984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009986:	333c      	adds	r3, #60	; 0x3c
 8009988:	3320      	adds	r3, #32
 800998a:	4618      	mov	r0, r3
 800998c:	f7fc fe50 	bl	8006630 <ld_dword>
 8009990:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009994:	333c      	adds	r3, #60	; 0x3c
 8009996:	330e      	adds	r3, #14
 8009998:	4618      	mov	r0, r3
 800999a:	f7fc fe31 	bl	8006600 <ld_word>
 800999e:	4603      	mov	r3, r0
 80099a0:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80099a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <find_volume+0x4f4>
 80099a8:	230d      	movs	r3, #13
 80099aa:	e102      	b.n	8009bb2 <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80099ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80099ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099b0:	4413      	add	r3, r2
 80099b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099b4:	8911      	ldrh	r1, [r2, #8]
 80099b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099b8:	8992      	ldrh	r2, [r2, #12]
 80099ba:	0952      	lsrs	r2, r2, #5
 80099bc:	b292      	uxth	r2, r2
 80099be:	fbb1 f2f2 	udiv	r2, r1, r2
 80099c2:	b292      	uxth	r2, r2
 80099c4:	4413      	add	r3, r2
 80099c6:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80099c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d201      	bcs.n	80099d4 <find_volume+0x51c>
 80099d0:	230d      	movs	r3, #13
 80099d2:	e0ee      	b.n	8009bb2 <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80099d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099dc:	8952      	ldrh	r2, [r2, #10]
 80099de:	fbb3 f3f2 	udiv	r3, r3, r2
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <find_volume+0x536>
 80099ea:	230d      	movs	r3, #13
 80099ec:	e0e1      	b.n	8009bb2 <find_volume+0x6fa>
		fmt = FS_FAT32;
 80099ee:	2303      	movs	r3, #3
 80099f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d802      	bhi.n	8009a04 <find_volume+0x54c>
 80099fe:	2302      	movs	r3, #2
 8009a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d802      	bhi.n	8009a14 <find_volume+0x55c>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	1c9a      	adds	r2, r3, #2
 8009a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8009a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a20:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009a22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a26:	441a      	add	r2, r3
 8009a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a2a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8009a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	441a      	add	r2, r3
 8009a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a34:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8009a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d11e      	bne.n	8009a7c <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a40:	333c      	adds	r3, #60	; 0x3c
 8009a42:	332a      	adds	r3, #42	; 0x2a
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fc fddb 	bl	8006600 <ld_word>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <find_volume+0x59c>
 8009a50:	230d      	movs	r3, #13
 8009a52:	e0ae      	b.n	8009bb2 <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a56:	891b      	ldrh	r3, [r3, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <find_volume+0x5a8>
 8009a5c:	230d      	movs	r3, #13
 8009a5e:	e0a8      	b.n	8009bb2 <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a62:	333c      	adds	r3, #60	; 0x3c
 8009a64:	332c      	adds	r3, #44	; 0x2c
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fc fde2 	bl	8006630 <ld_dword>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a7a:	e01f      	b.n	8009abc <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a7e:	891b      	ldrh	r3, [r3, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <find_volume+0x5d0>
 8009a84:	230d      	movs	r3, #13
 8009a86:	e094      	b.n	8009bb2 <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a8e:	441a      	add	r2, r3
 8009a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a92:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d103      	bne.n	8009aa4 <find_volume+0x5ec>
 8009a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	e00a      	b.n	8009aba <find_volume+0x602>
 8009aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	4413      	add	r3, r2
 8009aae:	085a      	lsrs	r2, r3, #1
 8009ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009aba:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ac2:	899b      	ldrh	r3, [r3, #12]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac8:	440b      	add	r3, r1
 8009aca:	3b01      	subs	r3, #1
 8009acc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ace:	8989      	ldrh	r1, [r1, #12]
 8009ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d201      	bcs.n	8009adc <find_volume+0x624>
 8009ad8:	230d      	movs	r3, #13
 8009ada:	e06a      	b.n	8009bb2 <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ade:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae2:	61da      	str	r2, [r3, #28]
 8009ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aea:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8009aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aee:	2280      	movs	r2, #128	; 0x80
 8009af0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d149      	bne.n	8009b8e <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009afc:	333c      	adds	r3, #60	; 0x3c
 8009afe:	3330      	adds	r3, #48	; 0x30
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fc fd7d 	bl	8006600 <ld_word>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d140      	bne.n	8009b8e <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b0e:	3301      	adds	r3, #1
 8009b10:	4619      	mov	r1, r3
 8009b12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b14:	f7fd f968 	bl	8006de8 <move_window>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d137      	bne.n	8009b8e <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 8009b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b20:	2200      	movs	r2, #0
 8009b22:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b26:	333c      	adds	r3, #60	; 0x3c
 8009b28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fc fd67 	bl	8006600 <ld_word>
 8009b32:	4603      	mov	r3, r0
 8009b34:	461a      	mov	r2, r3
 8009b36:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d127      	bne.n	8009b8e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b40:	333c      	adds	r3, #60	; 0x3c
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fc fd74 	bl	8006630 <ld_dword>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	4b1c      	ldr	r3, [pc, #112]	; (8009bbc <find_volume+0x704>)
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d11e      	bne.n	8009b8e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b52:	333c      	adds	r3, #60	; 0x3c
 8009b54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fc fd69 	bl	8006630 <ld_dword>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	4b17      	ldr	r3, [pc, #92]	; (8009bc0 <find_volume+0x708>)
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d113      	bne.n	8009b8e <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b68:	333c      	adds	r3, #60	; 0x3c
 8009b6a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fc fd5e 	bl	8006630 <ld_dword>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b78:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b7c:	333c      	adds	r3, #60	; 0x3c
 8009b7e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fc fd54 	bl	8006630 <ld_dword>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b8c:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b90:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009b94:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b96:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <find_volume+0x70c>)
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <find_volume+0x70c>)
 8009ba0:	801a      	strh	r2, [r3, #0]
 8009ba2:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <find_volume+0x70c>)
 8009ba4:	881a      	ldrh	r2, [r3, #0]
 8009ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ba8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009baa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009bac:	f7fd f8b4 	bl	8006d18 <clear_lock>
#endif
	return FR_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3760      	adds	r7, #96	; 0x60
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009bbc:	41615252 	.word	0x41615252
 8009bc0:	61417272 	.word	0x61417272
 8009bc4:	20000210 	.word	0x20000210

08009bc8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009bd2:	2309      	movs	r3, #9
 8009bd4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01c      	beq.n	8009c16 <validate+0x4e>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d018      	beq.n	8009c16 <validate+0x4e>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d013      	beq.n	8009c16 <validate+0x4e>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	889a      	ldrh	r2, [r3, #4]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	88db      	ldrh	r3, [r3, #6]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d10c      	bne.n	8009c16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fc fc5e 	bl	80064c4 <disk_status>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <validate+0x4e>
			res = FR_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <validate+0x5a>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	e000      	b.n	8009c24 <validate+0x5c>
 8009c22:	2300      	movs	r3, #0
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	6013      	str	r3, [r2, #0]
	return res;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009c46:	f107 0310 	add.w	r3, r7, #16
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff fb8b 	bl	8009366 <get_ldnumber>
 8009c50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da01      	bge.n	8009c5c <f_mount+0x28>
 8009c58:	230b      	movs	r3, #11
 8009c5a:	e02b      	b.n	8009cb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c5c:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <f_mount+0x88>)
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c6c:	69b8      	ldr	r0, [r7, #24]
 8009c6e:	f7fd f853 	bl	8006d18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	490d      	ldr	r1, [pc, #52]	; (8009cbc <f_mount+0x88>)
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <f_mount+0x66>
 8009c94:	79fb      	ldrb	r3, [r7, #7]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d001      	beq.n	8009c9e <f_mount+0x6a>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e00a      	b.n	8009cb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009c9e:	f107 010c 	add.w	r1, r7, #12
 8009ca2:	f107 0308 	add.w	r3, r7, #8
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fc05 	bl	80094b8 <find_volume>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3720      	adds	r7, #32
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	2000020c 	.word	0x2000020c

08009cc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009cc0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009cc4:	f5ad 6d9e 	sub.w	sp, sp, #1264	; 0x4f0
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	f107 030c 	add.w	r3, r7, #12
 8009cce:	6018      	str	r0, [r3, #0]
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	6019      	str	r1, [r3, #0]
 8009cd6:	1dfb      	adds	r3, r7, #7
 8009cd8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009cda:	f107 030c 	add.w	r3, r7, #12
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <f_open+0x28>
 8009ce4:	2309      	movs	r3, #9
 8009ce6:	e369      	b.n	800a3bc <f_open+0x6fc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009ce8:	1dfb      	adds	r3, r7, #7
 8009cea:	1dfa      	adds	r2, r7, #7
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009cf2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8009cf4:	1dfb      	adds	r3, r7, #7
 8009cf6:	781a      	ldrb	r2, [r3, #0]
 8009cf8:	f207 4174 	addw	r1, r7, #1140	; 0x474
 8009cfc:	f107 0308 	add.w	r3, r7, #8
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff fbd9 	bl	80094b8 <find_volume>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
	if (res == FR_OK) {
 8009d0c:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f040 8348 	bne.w	800a3a6 <f_open+0x6e6>
		dj.obj.fs = fs;
 8009d16:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009d1a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		INIT_NAMBUF(fs);
 8009d1e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009d22:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8009d26:	611a      	str	r2, [r3, #16]
 8009d28:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009d2c:	f107 0214 	add.w	r2, r7, #20
 8009d30:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff fa64 	bl	800920c <follow_path>
 8009d44:	4603      	mov	r3, r0
 8009d46:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009d4a:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d11b      	bne.n	8009d8a <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d52:	f897 34c3 	ldrb.w	r3, [r7, #1219]	; 0x4c3
 8009d56:	b25b      	sxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da03      	bge.n	8009d64 <f_open+0xa4>
				res = FR_INVALID_NAME;
 8009d5c:	2306      	movs	r3, #6
 8009d5e:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 8009d62:	e012      	b.n	8009d8a <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d64:	1dfb      	adds	r3, r7, #7
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	461a      	mov	r2, r3
 8009d78:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fc fe82 	bl	8006a88 <chk_lock>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d8a:	1dfb      	adds	r3, r7, #7
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	f003 031c 	and.w	r3, r3, #28
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 8148 	beq.w	800a028 <f_open+0x368>
			if (res != FR_OK) {					/* No file, create new */
 8009d98:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d019      	beq.n	8009dd4 <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009da0:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8009da4:	2b04      	cmp	r3, #4
 8009da6:	d10e      	bne.n	8009dc6 <f_open+0x106>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009da8:	f7fc feca 	bl	8006b40 <enq_lock>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d006      	beq.n	8009dc0 <f_open+0x100>
 8009db2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe feba 	bl	8008b30 <dir_register>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	e000      	b.n	8009dc2 <f_open+0x102>
 8009dc0:	2312      	movs	r3, #18
 8009dc2:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009dc6:	1dfb      	adds	r3, r7, #7
 8009dc8:	1dfa      	adds	r2, r7, #7
 8009dca:	7812      	ldrb	r2, [r2, #0]
 8009dcc:	f042 0208 	orr.w	r2, r2, #8
 8009dd0:	701a      	strb	r2, [r3, #0]
 8009dd2:	e012      	b.n	8009dfa <f_open+0x13a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009dd4:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 8009dd8:	f003 0311 	and.w	r3, r3, #17
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <f_open+0x128>
					res = FR_DENIED;
 8009de0:	2307      	movs	r3, #7
 8009de2:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 8009de6:	e008      	b.n	8009dfa <f_open+0x13a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009de8:	1dfb      	adds	r3, r7, #7
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <f_open+0x13a>
 8009df4:	2308      	movs	r3, #8
 8009df6:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009dfa:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 812f 	bne.w	800a062 <f_open+0x3a2>
 8009e04:	1dfb      	adds	r3, r7, #7
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8128 	beq.w	800a062 <f_open+0x3a2>
				dw = GET_FATTIME();
 8009e12:	f7fc f907 	bl	8006024 <get_fattime>
 8009e16:	f8c7 04dc 	str.w	r0, [r7, #1244]	; 0x4dc
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8009e1a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	f040 80a6 	bne.w	8009f72 <f_open+0x2b2>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8009e26:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8009e2a:	f107 030c 	add.w	r3, r7, #12
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8009e32:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	3334      	adds	r3, #52	; 0x34
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fc fbf8 	bl	8006630 <ld_dword>
 8009e40:	4602      	mov	r2, r0
 8009e42:	f107 030c 	add.w	r3, r7, #12
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8009e4a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	3338      	adds	r3, #56	; 0x38
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fc fc0f 	bl	8006676 <ld_qword>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	f107 020c 	add.w	r2, r7, #12
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8009e66:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	3321      	adds	r3, #33	; 0x21
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	f003 0302 	and.w	r3, r3, #2
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	f107 030c 	add.w	r3, r7, #12
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8009e7e:	f107 030c 	add.w	r3, r7, #12
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2200      	movs	r2, #0
 8009e86:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8009e88:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fc fcc6 	bl	8006826 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8009e9a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	3314      	adds	r3, #20
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8009ea6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	330c      	adds	r3, #12
 8009eae:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fc fcb7 	bl	8006826 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8009eb8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	3315      	adds	r3, #21
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8009ec4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	2220      	movs	r2, #32
 8009ece:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8009ed0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	3334      	adds	r3, #52	; 0x34
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fc fca3 	bl	8006826 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8009ee0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009eea:	f04f 0200 	mov.w	r2, #0
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	f7fc fcc3 	bl	800687e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8009ef8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	f7fc fcb7 	bl	800687e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8009f10:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	3321      	adds	r3, #33	; 0x21
 8009f18:	2201      	movs	r2, #1
 8009f1a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8009f1c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe fb52 	bl	80085ca <store_xdir>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8009f2c:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f040 8096 	bne.w	800a062 <f_open+0x3a2>
 8009f36:	f107 030c 	add.w	r3, r7, #12
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 808f 	beq.w	800a062 <f_open+0x3a2>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8009f44:	f107 030c 	add.w	r3, r7, #12
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	f107 030c 	add.w	r3, r7, #12
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7fd fbd7 	bl	8007708 <remove_chain>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009f6c:	3a01      	subs	r2, #1
 8009f6e:	619a      	str	r2, [r3, #24]
 8009f70:	e077      	b.n	800a062 <f_open+0x3a2>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009f72:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8009f76:	330e      	adds	r3, #14
 8009f78:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fc fc52 	bl	8006826 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009f82:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8009f86:	3316      	adds	r3, #22
 8009f88:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fc fc4a 	bl	8006826 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009f92:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8009f96:	330b      	adds	r3, #11
 8009f98:	2220      	movs	r2, #32
 8009f9a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009f9c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009fa0:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fd ff80 	bl	8007eac <ld_clust>
 8009fac:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009fb0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009fb4:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	; 0x4b4
 8009fb8:	2200      	movs	r2, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fd ff95 	bl	8007eea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009fc0:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8009fc4:	331c      	adds	r3, #28
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fc fc2c 	bl	8006826 <st_dword>
					fs->wflag = 1;
 8009fce:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009fd6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d041      	beq.n	800a062 <f_open+0x3a2>
						dw = fs->winsect;
 8009fde:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
						res = remove_chain(&dj.obj, cl, 0);
 8009fe8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8009fec:	2200      	movs	r2, #0
 8009fee:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	; 0x4d8
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fd fb88 	bl	8007708 <remove_chain>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
						if (res == FR_OK) {
 8009ffe:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800a002:	2b00      	cmp	r3, #0
 800a004:	d12d      	bne.n	800a062 <f_open+0x3a2>
							res = move_window(fs, dw);
 800a006:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a00a:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fc feea 	bl	8006de8 <move_window>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a01a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a01e:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800a022:	3a01      	subs	r2, #1
 800a024:	619a      	str	r2, [r3, #24]
 800a026:	e01c      	b.n	800a062 <f_open+0x3a2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a028:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d118      	bne.n	800a062 <f_open+0x3a2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a030:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800a034:	f003 0310 	and.w	r3, r3, #16
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <f_open+0x384>
					res = FR_NO_FILE;
 800a03c:	2304      	movs	r3, #4
 800a03e:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 800a042:	e00e      	b.n	800a062 <f_open+0x3a2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a044:	1dfb      	adds	r3, r7, #7
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d008      	beq.n	800a062 <f_open+0x3a2>
 800a050:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <f_open+0x3a2>
						res = FR_DENIED;
 800a05c:	2307      	movs	r3, #7
 800a05e:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
					}
				}
			}
		}
		if (res == FR_OK) {
 800a062:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800a066:	2b00      	cmp	r3, #0
 800a068:	d136      	bne.n	800a0d8 <f_open+0x418>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a06a:	1dfb      	adds	r3, r7, #7
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d005      	beq.n	800a082 <f_open+0x3c2>
				mode |= FA_MODIFIED;
 800a076:	1dfb      	adds	r3, r7, #7
 800a078:	1dfa      	adds	r2, r7, #7
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a080:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a082:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a088:	f107 030c 	add.w	r3, r7, #12
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800a090:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800a094:	f107 030c 	add.w	r3, r7, #12
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a09c:	1dfb      	adds	r3, r7, #7
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bf14      	ite	ne
 800a0a8:	2301      	movne	r3, #1
 800a0aa:	2300      	moveq	r3, #0
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fc fd64 	bl	8006b84 <inc_lock>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	f107 030c 	add.w	r3, r7, #12
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a0c6:	f107 030c 	add.w	r3, r7, #12
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <f_open+0x418>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a0d8:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f040 8162 	bne.w	800a3a6 <f_open+0x6e6>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a0e2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d13f      	bne.n	800a16c <f_open+0x4ac>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800a0ec:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800a0f0:	f107 030c 	add.w	r3, r7, #12
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800a0f8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800a0fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a100:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a104:	f897 247f 	ldrb.w	r2, [r7, #1151]	; 0x47f
 800a108:	431a      	orrs	r2, r3
 800a10a:	f107 030c 	add.w	r3, r7, #12
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800a112:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 800a116:	f107 030c 	add.w	r3, r7, #12
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800a11e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	3334      	adds	r3, #52	; 0x34
 800a126:	4618      	mov	r0, r3
 800a128:	f7fc fa82 	bl	8006630 <ld_dword>
 800a12c:	4602      	mov	r2, r0
 800a12e:	f107 030c 	add.w	r3, r7, #12
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a136:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	3338      	adds	r3, #56	; 0x38
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fc fa99 	bl	8006676 <ld_qword>
 800a144:	4603      	mov	r3, r0
 800a146:	460c      	mov	r4, r1
 800a148:	f107 020c 	add.w	r2, r7, #12
 800a14c:	6812      	ldr	r2, [r2, #0]
 800a14e:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a152:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	3321      	adds	r3, #33	; 0x21
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	b2da      	uxtb	r2, r3
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	71da      	strb	r2, [r3, #7]
 800a16a:	e01a      	b.n	800a1a2 <f_open+0x4e2>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a16c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a170:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7fd fe98 	bl	8007eac <ld_clust>
 800a17c:	4602      	mov	r2, r0
 800a17e:	f107 030c 	add.w	r3, r7, #12
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a186:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800a18a:	331c      	adds	r3, #28
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fc fa4f 	bl	8006630 <ld_dword>
 800a192:	4603      	mov	r3, r0
 800a194:	f04f 0400 	mov.w	r4, #0
 800a198:	f107 020c 	add.w	r2, r7, #12
 800a19c:	6812      	ldr	r2, [r2, #0]
 800a19e:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a1ac:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800a1b0:	f107 030c 	add.w	r3, r7, #12
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a1b8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a1bc:	88da      	ldrh	r2, [r3, #6]
 800a1be:	f107 030c 	add.w	r3, r7, #12
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a1c6:	f107 030c 	add.w	r3, r7, #12
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	1dfa      	adds	r2, r7, #7
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800a1d4:	f107 030c 	add.w	r3, r7, #12
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a1ea:	f107 030c 	add.w	r3, r7, #12
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	f04f 0400 	mov.w	r4, #0
 800a1f8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a1fc:	f107 030c 	add.w	r3, r7, #12
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3354      	adds	r3, #84	; 0x54
 800a204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a208:	2100      	movs	r1, #0
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fc fbdf 	bl	80069ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a210:	1dfb      	adds	r3, r7, #7
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f003 0320 	and.w	r3, r3, #32
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80c4 	beq.w	800a3a6 <f_open+0x6e6>
 800a21e:	f107 030c 	add.w	r3, r7, #12
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a228:	4323      	orrs	r3, r4
 800a22a:	f000 80bc 	beq.w	800a3a6 <f_open+0x6e6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a22e:	f107 030c 	add.w	r3, r7, #12
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a238:	f107 020c 	add.w	r2, r7, #12
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a242:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a246:	895b      	ldrh	r3, [r3, #10]
 800a248:	461a      	mov	r2, r3
 800a24a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a24e:	899b      	ldrh	r3, [r3, #12]
 800a250:	fb03 f302 	mul.w	r3, r3, r2
 800a254:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a258:	f107 030c 	add.w	r3, r7, #12
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a26e:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800a272:	e9c2 3400 	strd	r3, r4, [r2]
 800a276:	e02b      	b.n	800a2d0 <f_open+0x610>
					clst = get_fat(&fp->obj, clst);
 800a278:	f107 030c 	add.w	r3, r7, #12
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 800a282:	4618      	mov	r0, r3
 800a284:	f7fc fe6e 	bl	8006f64 <get_fat>
 800a288:	f8c7 04e8 	str.w	r0, [r7, #1256]	; 0x4e8
					if (clst <= 1) res = FR_INT_ERR;
 800a28c:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 800a290:	2b01      	cmp	r3, #1
 800a292:	d802      	bhi.n	800a29a <f_open+0x5da>
 800a294:	2302      	movs	r3, #2
 800a296:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a29a:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a2:	d102      	bne.n	800a2aa <f_open+0x5ea>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2aa:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800a2ae:	469b      	mov	fp, r3
 800a2b0:	f04f 0c00 	mov.w	ip, #0
 800a2b4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800a2b8:	e9d3 1200 	ldrd	r1, r2, [r3]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4614      	mov	r4, r2
 800a2c0:	ebb3 030b 	subs.w	r3, r3, fp
 800a2c4:	eb64 040c 	sbc.w	r4, r4, ip
 800a2c8:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800a2cc:	e9c2 3400 	strd	r3, r4, [r2]
 800a2d0:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10c      	bne.n	800a2f2 <f_open+0x632>
 800a2d8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800a2e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2ea:	42a2      	cmp	r2, r4
 800a2ec:	bf08      	it	eq
 800a2ee:	4299      	cmpeq	r1, r3
 800a2f0:	d3c2      	bcc.n	800a278 <f_open+0x5b8>
				}
				fp->clust = clst;
 800a2f2:	f107 030c 	add.w	r3, r7, #12
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 800a2fc:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a2fe:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800a302:	2b00      	cmp	r3, #0
 800a304:	d14f      	bne.n	800a3a6 <f_open+0x6e6>
 800a306:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a30a:	899b      	ldrh	r3, [r3, #12]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f04f 0400 	mov.w	r4, #0
 800a312:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800a316:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a31a:	461a      	mov	r2, r3
 800a31c:	4623      	mov	r3, r4
 800a31e:	f7f6 fcb3 	bl	8000c88 <__aeabi_uldivmod>
 800a322:	461c      	mov	r4, r3
 800a324:	4613      	mov	r3, r2
 800a326:	4323      	orrs	r3, r4
 800a328:	d03d      	beq.n	800a3a6 <f_open+0x6e6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a32a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a32e:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 800a332:	4618      	mov	r0, r3
 800a334:	f7fc fdf6 	bl	8006f24 <clust2sect>
 800a338:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
 800a33c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d103      	bne.n	800a34c <f_open+0x68c>
						res = FR_INT_ERR;
 800a344:	2302      	movs	r3, #2
 800a346:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 800a34a:	e02c      	b.n	800a3a6 <f_open+0x6e6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a34c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a350:	899b      	ldrh	r3, [r3, #12]
 800a352:	b29b      	uxth	r3, r3
 800a354:	f04f 0400 	mov.w	r4, #0
 800a358:	461a      	mov	r2, r3
 800a35a:	4623      	mov	r3, r4
 800a35c:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 800a360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a364:	f7f6 fc90 	bl	8000c88 <__aeabi_uldivmod>
 800a368:	4603      	mov	r3, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	461a      	mov	r2, r3
 800a36e:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800a372:	441a      	add	r2, r3
 800a374:	f107 030c 	add.w	r3, r7, #12
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a37c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800a380:	7858      	ldrb	r0, [r3, #1]
 800a382:	f107 030c 	add.w	r3, r7, #12
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a394:	2301      	movs	r3, #1
 800a396:	f7fc f8d5 	bl	8006544 <disk_read>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <f_open+0x6e6>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a3a6:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <f_open+0x6f8>
 800a3ae:	f107 030c 	add.w	r3, r7, #12
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a3b8:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f507 679e 	add.w	r7, r7, #1264	; 0x4f0
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a3c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ca:	b08d      	sub	sp, #52	; 0x34
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f107 0210 	add.w	r2, r7, #16
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fbed 	bl	8009bc8 <validate>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a3f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d108      	bne.n	800a40e <f_write+0x46>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <f_write+0x4c>
 800a40e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a412:	e1ab      	b.n	800a76c <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <f_write+0x5e>
 800a422:	2307      	movs	r3, #7
 800a424:	e1a2      	b.n	800a76c <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	f000 818e 	beq.w	800a74c <f_write+0x384>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	441a      	add	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800a442:	429a      	cmp	r2, r3
 800a444:	f080 8182 	bcs.w	800a74c <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800a44e:	43db      	mvns	r3, r3
 800a450:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a452:	e17b      	b.n	800a74c <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	899b      	ldrh	r3, [r3, #12]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	f04f 0400 	mov.w	r4, #0
 800a464:	461a      	mov	r2, r3
 800a466:	4623      	mov	r3, r4
 800a468:	f7f6 fc0e 	bl	8000c88 <__aeabi_uldivmod>
 800a46c:	461c      	mov	r4, r3
 800a46e:	4613      	mov	r3, r2
 800a470:	4323      	orrs	r3, r4
 800a472:	f040 810c 	bne.w	800a68e <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	899b      	ldrh	r3, [r3, #12]
 800a480:	b29b      	uxth	r3, r3
 800a482:	f04f 0400 	mov.w	r4, #0
 800a486:	461a      	mov	r2, r3
 800a488:	4623      	mov	r3, r4
 800a48a:	f7f6 fbfd 	bl	8000c88 <__aeabi_uldivmod>
 800a48e:	4603      	mov	r3, r0
 800a490:	460c      	mov	r4, r1
 800a492:	461a      	mov	r2, r3
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	895b      	ldrh	r3, [r3, #10]
 800a498:	3b01      	subs	r3, #1
 800a49a:	4013      	ands	r3, r2
 800a49c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d148      	bne.n	800a536 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800a4aa:	4323      	orrs	r3, r4
 800a4ac:	d10c      	bne.n	800a4c8 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d11c      	bne.n	800a4f4 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fd f9d6 	bl	8007870 <create_chain>
 800a4c4:	62b8      	str	r0, [r7, #40]	; 0x28
 800a4c6:	e015      	b.n	800a4f4 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	4623      	mov	r3, r4
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7fd fac9 	bl	8007a72 <clmt_clust>
 800a4e0:	62b8      	str	r0, [r7, #40]	; 0x28
 800a4e2:	e007      	b.n	800a4f4 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7fd f9bf 	bl	8007870 <create_chain>
 800a4f2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 812d 	beq.w	800a756 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d105      	bne.n	800a50e <f_write+0x146>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2202      	movs	r2, #2
 800a506:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800a50a:	2302      	movs	r3, #2
 800a50c:	e12e      	b.n	800a76c <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d105      	bne.n	800a522 <f_write+0x15a>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800a51e:	2301      	movs	r3, #1
 800a520:	e124      	b.n	800a76c <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a526:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d102      	bne.n	800a536 <f_write+0x16e>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a534:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a53c:	b25b      	sxtb	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	da1b      	bge.n	800a57a <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	7858      	ldrb	r0, [r3, #1]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a550:	2301      	movs	r3, #1
 800a552:	f7fc f817 	bl	8006584 <disk_write>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <f_write+0x1a0>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800a564:	2301      	movs	r3, #1
 800a566:	e101      	b.n	800a76c <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7fc fcce 	bl	8006f24 <clust2sect>
 800a588:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d105      	bne.n	800a59c <f_write+0x1d4>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800a598:	2302      	movs	r3, #2
 800a59a:	e0e7      	b.n	800a76c <f_write+0x3a4>
			sect += csect;
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	899b      	ldrh	r3, [r3, #12]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d046      	beq.n	800a646 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a5b8:	69ba      	ldr	r2, [r7, #24]
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	4413      	add	r3, r2
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	8952      	ldrh	r2, [r2, #10]
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d905      	bls.n	800a5d2 <f_write+0x20a>
					cc = fs->csize - csect;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	895b      	ldrh	r3, [r3, #10]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	7858      	ldrb	r0, [r3, #1]
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	69f9      	ldr	r1, [r7, #28]
 800a5dc:	f7fb ffd2 	bl	8006584 <disk_write>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d005      	beq.n	800a5f2 <f_write+0x22a>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e0bc      	b.n	800a76c <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	6a3a      	ldr	r2, [r7, #32]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d91a      	bls.n	800a636 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	8992      	ldrh	r2, [r2, #12]
 800a612:	fb02 f303 	mul.w	r3, r2, r3
 800a616:	69fa      	ldr	r2, [r7, #28]
 800a618:	18d1      	adds	r1, r2, r3
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	899b      	ldrh	r3, [r3, #12]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7fc f9b4 	bl	800698c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	899b      	ldrh	r3, [r3, #12]
 800a63a:	461a      	mov	r2, r3
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	fb02 f303 	mul.w	r3, r2, r3
 800a642:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a644:	e058      	b.n	800a6f8 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d01b      	beq.n	800a688 <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a65c:	42a2      	cmp	r2, r4
 800a65e:	bf08      	it	eq
 800a660:	4299      	cmpeq	r1, r3
 800a662:	d211      	bcs.n	800a688 <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	7858      	ldrb	r0, [r3, #1]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a66e:	2301      	movs	r3, #1
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	f7fb ff67 	bl	8006544 <disk_read>
 800a676:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800a684:	2301      	movs	r3, #1
 800a686:	e071      	b.n	800a76c <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	899b      	ldrh	r3, [r3, #12]
 800a692:	4618      	mov	r0, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	8992      	ldrh	r2, [r2, #12]
 800a69e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6a2:	fb02 f201 	mul.w	r2, r2, r1
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	1ac3      	subs	r3, r0, r3
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d901      	bls.n	800a6b8 <f_write+0x2f0>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f103 0554 	add.w	r5, r3, #84	; 0x54
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	899b      	ldrh	r3, [r3, #12]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f04f 0400 	mov.w	r4, #0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	f7f6 fad9 	bl	8000c88 <__aeabi_uldivmod>
 800a6d6:	461c      	mov	r4, r3
 800a6d8:	4613      	mov	r3, r2
 800a6da:	442b      	add	r3, r5
 800a6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6de:	69f9      	ldr	r1, [r7, #28]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fc f953 	bl	800698c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a6f8:	69fa      	ldr	r2, [r7, #28]
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	4413      	add	r3, r2
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	461d      	mov	r5, r3
 800a70a:	f04f 0600 	mov.w	r6, #0
 800a70e:	186b      	adds	r3, r5, r1
 800a710:	eb46 0402 	adc.w	r4, r6, r2
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 800a726:	4294      	cmp	r4, r2
 800a728:	bf08      	it	eq
 800a72a:	428b      	cmpeq	r3, r1
 800a72c:	d201      	bcs.n	800a732 <f_write+0x36a>
 800a72e:	460b      	mov	r3, r1
 800a730:	4614      	mov	r4, r2
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	441a      	add	r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f47f ae80 	bne.w	800a454 <f_write+0x8c>
 800a754:	e000      	b.n	800a758 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a756:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a762:	b2da      	uxtb	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3734      	adds	r7, #52	; 0x34
 800a770:	46bd      	mov	sp, r7
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a774 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a774:	b590      	push	{r4, r7, lr}
 800a776:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	1d3b      	adds	r3, r7, #4
 800a77e:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a780:	1d3b      	adds	r3, r7, #4
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800a788:	4611      	mov	r1, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fa1c 	bl	8009bc8 <validate>
 800a790:	4603      	mov	r3, r0
 800a792:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
	if (res == FR_OK) {
 800a796:	f897 34cf 	ldrb.w	r3, [r7, #1231]	; 0x4cf
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f040 8143 	bne.w	800aa26 <f_sync+0x2b2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a7a0:	1d3b      	adds	r3, r7, #4
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 813a 	beq.w	800aa26 <f_sync+0x2b2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a7b2:	1d3b      	adds	r3, r7, #4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7ba:	b25b      	sxtb	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	da1c      	bge.n	800a7fa <f_sync+0x86>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a7c0:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a7c4:	7858      	ldrb	r0, [r3, #1]
 800a7c6:	1d3b      	adds	r3, r7, #4
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a7ce:	1d3b      	adds	r3, r7, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f7fb fed5 	bl	8006584 <disk_write>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <f_sync+0x70>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e122      	b.n	800aa2a <f_sync+0x2b6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a7e4:	1d3b      	adds	r3, r7, #4
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	1d3b      	adds	r3, r7, #4
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a7fa:	f7fb fc13 	bl	8006024 <get_fattime>
 800a7fe:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a802:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b04      	cmp	r3, #4
 800a80a:	f040 80af 	bne.w	800a96c <f_sync+0x1f8>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800a80e:	1d3b      	adds	r3, r7, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f7fc ff18 	bl	8007648 <fill_first_frag>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
				if (res == FR_OK) {
 800a81e:	f897 34cf 	ldrb.w	r3, [r7, #1231]	; 0x4cf
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10c      	bne.n	800a840 <f_sync+0xcc>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a826:	1d3b      	adds	r3, r7, #4
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	1d3b      	adds	r3, r7, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	f04f 32ff 	mov.w	r2, #4294967295
 800a834:	4619      	mov	r1, r3
 800a836:	f7fc ff36 	bl	80076a6 <fill_last_frag>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
				}
				if (res == FR_OK) {
 800a840:	f897 34cf 	ldrb.w	r3, [r7, #1231]	; 0x4cf
 800a844:	2b00      	cmp	r3, #0
 800a846:	f040 80ee 	bne.w	800aa26 <f_sync+0x2b2>
					INIT_NAMBUF(fs);
 800a84a:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a84e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800a852:	611a      	str	r2, [r3, #16]
 800a854:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a858:	f107 0208 	add.w	r2, r7, #8
 800a85c:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800a85e:	1d3b      	adds	r3, r7, #4
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fd fe71 	bl	8008550 <load_obj_dir>
 800a86e:	4603      	mov	r3, r0
 800a870:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
					if (res == FR_OK) {
 800a874:	f897 34cf 	ldrb.w	r3, [r7, #1231]	; 0x4cf
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f040 80d4 	bne.w	800aa26 <f_sync+0x2b2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800a87e:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	3304      	adds	r3, #4
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	3304      	adds	r3, #4
 800a890:	f042 0220 	orr.w	r2, r2, #32
 800a894:	b2d2      	uxtb	r2, r2
 800a896:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800a898:	1d3b      	adds	r3, r7, #4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	79da      	ldrb	r2, [r3, #7]
 800a89e:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	3321      	adds	r3, #33	; 0x21
 800a8a6:	f042 0201 	orr.w	r2, r2, #1
 800a8aa:	b2d2      	uxtb	r2, r2
 800a8ac:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800a8ae:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8b8:	1d3b      	adds	r3, r7, #4
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	f7fb ffb0 	bl	8006826 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800a8c6:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8d0:	1d3b      	adds	r3, r7, #4
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4623      	mov	r3, r4
 800a8dc:	4608      	mov	r0, r1
 800a8de:	f7fb ffce 	bl	800687e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800a8e2:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800a8ec:	1d3b      	adds	r3, r7, #4
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4623      	mov	r3, r4
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	f7fb ffc0 	bl	800687e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800a8fe:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	330c      	adds	r3, #12
 800a906:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fb ff8b 	bl	8006826 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800a910:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	3315      	adds	r3, #21
 800a918:	2200      	movs	r2, #0
 800a91a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800a91c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	3310      	adds	r3, #16
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f7fb ff7d 	bl	8006826 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800a92c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd fe4a 	bl	80085ca <store_xdir>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
						if (res == FR_OK) {
 800a93c:	f897 34cf 	ldrb.w	r3, [r7, #1231]	; 0x4cf
 800a940:	2b00      	cmp	r3, #0
 800a942:	d170      	bne.n	800aa26 <f_sync+0x2b2>
							res = sync_fs(fs);
 800a944:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fc fa7b 	bl	8006e44 <sync_fs>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
							fp->flag &= (BYTE)~FA_MODIFIED;
 800a954:	1d3b      	adds	r3, r7, #4
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a95c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a960:	b2da      	uxtb	r2, r3
 800a962:	1d3b      	adds	r3, r7, #4
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800a96a:	e05c      	b.n	800aa26 <f_sync+0x2b2>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a96c:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800a970:	1d3b      	adds	r3, r7, #4
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f7fc fa35 	bl	8006de8 <move_window>
 800a97e:	4603      	mov	r3, r0
 800a980:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
				if (res == FR_OK) {
 800a984:	f897 34cf 	ldrb.w	r3, [r7, #1231]	; 0x4cf
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d14c      	bne.n	800aa26 <f_sync+0x2b2>
					dir = fp->dir_ptr;
 800a98c:	1d3b      	adds	r3, r7, #4
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a992:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a996:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800a99a:	330b      	adds	r3, #11
 800a99c:	781a      	ldrb	r2, [r3, #0]
 800a99e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800a9a2:	330b      	adds	r3, #11
 800a9a4:	f042 0220 	orr.w	r2, r2, #32
 800a9a8:	b2d2      	uxtb	r2, r2
 800a9aa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a9ac:	1d3b      	adds	r3, r7, #4
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	1d3b      	adds	r3, r7, #4
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	; 0x4c4
 800a9be:	f7fd fa94 	bl	8007eea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a9c2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800a9c6:	f103 021c 	add.w	r2, r3, #28
 800a9ca:	1d3b      	adds	r3, r7, #4
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	f7fb ff26 	bl	8006826 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a9da:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800a9de:	3316      	adds	r3, #22
 800a9e0:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fb ff1e 	bl	8006826 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a9ea:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800a9ee:	3312      	adds	r3, #18
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fb fefc 	bl	80067f0 <st_word>
					fs->wflag = 1;
 800a9f8:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa00:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fc fa1d 	bl	8006e44 <sync_fs>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	f887 34cf 	strb.w	r3, [r7, #1231]	; 0x4cf
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	1d3b      	adds	r3, r7, #4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa26:	f897 34cf 	ldrb.w	r3, [r7, #1231]	; 0x4cf
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f207 47d4 	addw	r7, r7, #1236	; 0x4d4
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd90      	pop	{r4, r7, pc}

0800aa34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff fe99 	bl	800a774 <f_sync>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d118      	bne.n	800aa7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f107 0208 	add.w	r2, r7, #8
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff f8b7 	bl	8009bc8 <validate>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10c      	bne.n	800aa7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fc f919 	bl	8006ca0 <dec_lock>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa96:	2301      	movs	r3, #1
 800aa98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aa9e:	4b1f      	ldr	r3, [pc, #124]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aaa0:	7a5b      	ldrb	r3, [r3, #9]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d131      	bne.n	800ab0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aaa8:	4b1c      	ldr	r3, [pc, #112]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aaaa:	7a5b      	ldrb	r3, [r3, #9]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	461a      	mov	r2, r3
 800aab0:	4b1a      	ldr	r3, [pc, #104]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aab2:	2100      	movs	r1, #0
 800aab4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aab6:	4b19      	ldr	r3, [pc, #100]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aab8:	7a5b      	ldrb	r3, [r3, #9]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	4a17      	ldr	r2, [pc, #92]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aac6:	4b15      	ldr	r3, [pc, #84]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aac8:	7a5b      	ldrb	r3, [r3, #9]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	461a      	mov	r2, r3
 800aace:	4b13      	ldr	r3, [pc, #76]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aad0:	4413      	add	r3, r2
 800aad2:	79fa      	ldrb	r2, [r7, #7]
 800aad4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aad6:	4b11      	ldr	r3, [pc, #68]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aad8:	7a5b      	ldrb	r3, [r3, #9]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	b2d1      	uxtb	r1, r2
 800aae0:	4a0e      	ldr	r2, [pc, #56]	; (800ab1c <FATFS_LinkDriverEx+0x94>)
 800aae2:	7251      	strb	r1, [r2, #9]
 800aae4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aae6:	7dbb      	ldrb	r3, [r7, #22]
 800aae8:	3330      	adds	r3, #48	; 0x30
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	223a      	movs	r2, #58	; 0x3a
 800aaf6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	3302      	adds	r3, #2
 800aafc:	222f      	movs	r2, #47	; 0x2f
 800aafe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	3303      	adds	r3, #3
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	20000234 	.word	0x20000234

0800ab20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff ffaa 	bl	800aa88 <FATFS_LinkDriverEx>
 800ab34:	4603      	mov	r3, r0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800ab50:	2301      	movs	r3, #1
 800ab52:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800ab54:	4b15      	ldr	r3, [pc, #84]	; (800abac <FATFS_UnLinkDriverEx+0x6c>)
 800ab56:	7a5b      	ldrb	r3, [r3, #9]
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d01e      	beq.n	800ab9c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	3b30      	subs	r3, #48	; 0x30
 800ab64:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800ab66:	7bbb      	ldrb	r3, [r7, #14]
 800ab68:	4a10      	ldr	r2, [pc, #64]	; (800abac <FATFS_UnLinkDriverEx+0x6c>)
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d013      	beq.n	800ab9c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	4a0d      	ldr	r2, [pc, #52]	; (800abac <FATFS_UnLinkDriverEx+0x6c>)
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	4a0a      	ldr	r2, [pc, #40]	; (800abac <FATFS_UnLinkDriverEx+0x6c>)
 800ab84:	4413      	add	r3, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800ab8a:	4b08      	ldr	r3, [pc, #32]	; (800abac <FATFS_UnLinkDriverEx+0x6c>)
 800ab8c:	7a5b      	ldrb	r3, [r3, #9]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	3b01      	subs	r3, #1
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <FATFS_UnLinkDriverEx+0x6c>)
 800ab96:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000234 	.word	0x20000234

0800abb0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800abb8:	2100      	movs	r1, #0
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff ffc0 	bl	800ab40 <FATFS_UnLinkDriverEx>
 800abc0:	4603      	mov	r3, r0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	6039      	str	r1, [r7, #0]
 800abd6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800abd8:	88fb      	ldrh	r3, [r7, #6]
 800abda:	2b7f      	cmp	r3, #127	; 0x7f
 800abdc:	d802      	bhi.n	800abe4 <ff_convert+0x18>
		c = chr;
 800abde:	88fb      	ldrh	r3, [r7, #6]
 800abe0:	81fb      	strh	r3, [r7, #14]
 800abe2:	e025      	b.n	800ac30 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00b      	beq.n	800ac02 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800abea:	88fb      	ldrh	r3, [r7, #6]
 800abec:	2bff      	cmp	r3, #255	; 0xff
 800abee:	d805      	bhi.n	800abfc <ff_convert+0x30>
 800abf0:	88fb      	ldrh	r3, [r7, #6]
 800abf2:	3b80      	subs	r3, #128	; 0x80
 800abf4:	4a12      	ldr	r2, [pc, #72]	; (800ac40 <ff_convert+0x74>)
 800abf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abfa:	e000      	b.n	800abfe <ff_convert+0x32>
 800abfc:	2300      	movs	r3, #0
 800abfe:	81fb      	strh	r3, [r7, #14]
 800ac00:	e016      	b.n	800ac30 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ac02:	2300      	movs	r3, #0
 800ac04:	81fb      	strh	r3, [r7, #14]
 800ac06:	e009      	b.n	800ac1c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ac08:	89fb      	ldrh	r3, [r7, #14]
 800ac0a:	4a0d      	ldr	r2, [pc, #52]	; (800ac40 <ff_convert+0x74>)
 800ac0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac10:	88fa      	ldrh	r2, [r7, #6]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d006      	beq.n	800ac24 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ac16:	89fb      	ldrh	r3, [r7, #14]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	81fb      	strh	r3, [r7, #14]
 800ac1c:	89fb      	ldrh	r3, [r7, #14]
 800ac1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ac20:	d9f2      	bls.n	800ac08 <ff_convert+0x3c>
 800ac22:	e000      	b.n	800ac26 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ac24:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ac26:	89fb      	ldrh	r3, [r7, #14]
 800ac28:	3380      	adds	r3, #128	; 0x80
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ac30:	89fb      	ldrh	r3, [r7, #14]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	0800e9a0 	.word	0x0800e9a0

0800ac44 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ac4e:	88fb      	ldrh	r3, [r7, #6]
 800ac50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac54:	d201      	bcs.n	800ac5a <ff_wtoupper+0x16>
 800ac56:	4b3e      	ldr	r3, [pc, #248]	; (800ad50 <ff_wtoupper+0x10c>)
 800ac58:	e000      	b.n	800ac5c <ff_wtoupper+0x18>
 800ac5a:	4b3e      	ldr	r3, [pc, #248]	; (800ad54 <ff_wtoupper+0x110>)
 800ac5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	1c9a      	adds	r2, r3, #2
 800ac62:	617a      	str	r2, [r7, #20]
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ac68:	8a7b      	ldrh	r3, [r7, #18]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d068      	beq.n	800ad40 <ff_wtoupper+0xfc>
 800ac6e:	88fa      	ldrh	r2, [r7, #6]
 800ac70:	8a7b      	ldrh	r3, [r7, #18]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d364      	bcc.n	800ad40 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	1c9a      	adds	r2, r3, #2
 800ac7a:	617a      	str	r2, [r7, #20]
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	823b      	strh	r3, [r7, #16]
 800ac80:	8a3b      	ldrh	r3, [r7, #16]
 800ac82:	0a1b      	lsrs	r3, r3, #8
 800ac84:	81fb      	strh	r3, [r7, #14]
 800ac86:	8a3b      	ldrh	r3, [r7, #16]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ac8c:	88fa      	ldrh	r2, [r7, #6]
 800ac8e:	8a79      	ldrh	r1, [r7, #18]
 800ac90:	8a3b      	ldrh	r3, [r7, #16]
 800ac92:	440b      	add	r3, r1
 800ac94:	429a      	cmp	r2, r3
 800ac96:	da49      	bge.n	800ad2c <ff_wtoupper+0xe8>
			switch (cmd) {
 800ac98:	89fb      	ldrh	r3, [r7, #14]
 800ac9a:	2b08      	cmp	r3, #8
 800ac9c:	d84f      	bhi.n	800ad3e <ff_wtoupper+0xfa>
 800ac9e:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <ff_wtoupper+0x60>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acdb 	.word	0x0800acdb
 800acac:	0800acf1 	.word	0x0800acf1
 800acb0:	0800acf9 	.word	0x0800acf9
 800acb4:	0800ad01 	.word	0x0800ad01
 800acb8:	0800ad09 	.word	0x0800ad09
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ad19 	.word	0x0800ad19
 800acc4:	0800ad21 	.word	0x0800ad21
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800acc8:	88fa      	ldrh	r2, [r7, #6]
 800acca:	8a7b      	ldrh	r3, [r7, #18]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4413      	add	r3, r2
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	80fb      	strh	r3, [r7, #6]
 800acd8:	e027      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800acda:	88fa      	ldrh	r2, [r7, #6]
 800acdc:	8a7b      	ldrh	r3, [r7, #18]
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	88fa      	ldrh	r2, [r7, #6]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	80fb      	strh	r3, [r7, #6]
 800acee:	e01c      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	3b10      	subs	r3, #16
 800acf4:	80fb      	strh	r3, [r7, #6]
 800acf6:	e018      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800acf8:	88fb      	ldrh	r3, [r7, #6]
 800acfa:	3b20      	subs	r3, #32
 800acfc:	80fb      	strh	r3, [r7, #6]
 800acfe:	e014      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ad00:	88fb      	ldrh	r3, [r7, #6]
 800ad02:	3b30      	subs	r3, #48	; 0x30
 800ad04:	80fb      	strh	r3, [r7, #6]
 800ad06:	e010      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ad08:	88fb      	ldrh	r3, [r7, #6]
 800ad0a:	3b1a      	subs	r3, #26
 800ad0c:	80fb      	strh	r3, [r7, #6]
 800ad0e:	e00c      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ad10:	88fb      	ldrh	r3, [r7, #6]
 800ad12:	3308      	adds	r3, #8
 800ad14:	80fb      	strh	r3, [r7, #6]
 800ad16:	e008      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ad18:	88fb      	ldrh	r3, [r7, #6]
 800ad1a:	3b50      	subs	r3, #80	; 0x50
 800ad1c:	80fb      	strh	r3, [r7, #6]
 800ad1e:	e004      	b.n	800ad2a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ad20:	88fb      	ldrh	r3, [r7, #6]
 800ad22:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ad26:	80fb      	strh	r3, [r7, #6]
 800ad28:	bf00      	nop
			}
			break;
 800ad2a:	e008      	b.n	800ad3e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ad2c:	89fb      	ldrh	r3, [r7, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d195      	bne.n	800ac5e <ff_wtoupper+0x1a>
 800ad32:	8a3b      	ldrh	r3, [r7, #16]
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	4413      	add	r3, r2
 800ad3a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ad3c:	e78f      	b.n	800ac5e <ff_wtoupper+0x1a>
			break;
 800ad3e:	bf00      	nop
	}

	return chr;
 800ad40:	88fb      	ldrh	r3, [r7, #6]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	371c      	adds	r7, #28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	0800eaa0 	.word	0x0800eaa0
 800ad54:	0800ec94 	.word	0x0800ec94

0800ad58 <__errno>:
 800ad58:	4b01      	ldr	r3, [pc, #4]	; (800ad60 <__errno+0x8>)
 800ad5a:	6818      	ldr	r0, [r3, #0]
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	2000000c 	.word	0x2000000c

0800ad64 <__libc_init_array>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	4e0d      	ldr	r6, [pc, #52]	; (800ad9c <__libc_init_array+0x38>)
 800ad68:	4c0d      	ldr	r4, [pc, #52]	; (800ada0 <__libc_init_array+0x3c>)
 800ad6a:	1ba4      	subs	r4, r4, r6
 800ad6c:	10a4      	asrs	r4, r4, #2
 800ad6e:	2500      	movs	r5, #0
 800ad70:	42a5      	cmp	r5, r4
 800ad72:	d109      	bne.n	800ad88 <__libc_init_array+0x24>
 800ad74:	4e0b      	ldr	r6, [pc, #44]	; (800ada4 <__libc_init_array+0x40>)
 800ad76:	4c0c      	ldr	r4, [pc, #48]	; (800ada8 <__libc_init_array+0x44>)
 800ad78:	f003 fd58 	bl	800e82c <_init>
 800ad7c:	1ba4      	subs	r4, r4, r6
 800ad7e:	10a4      	asrs	r4, r4, #2
 800ad80:	2500      	movs	r5, #0
 800ad82:	42a5      	cmp	r5, r4
 800ad84:	d105      	bne.n	800ad92 <__libc_init_array+0x2e>
 800ad86:	bd70      	pop	{r4, r5, r6, pc}
 800ad88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad8c:	4798      	blx	r3
 800ad8e:	3501      	adds	r5, #1
 800ad90:	e7ee      	b.n	800ad70 <__libc_init_array+0xc>
 800ad92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad96:	4798      	blx	r3
 800ad98:	3501      	adds	r5, #1
 800ad9a:	e7f2      	b.n	800ad82 <__libc_init_array+0x1e>
 800ad9c:	0800f010 	.word	0x0800f010
 800ada0:	0800f010 	.word	0x0800f010
 800ada4:	0800f010 	.word	0x0800f010
 800ada8:	0800f014 	.word	0x0800f014

0800adac <memset>:
 800adac:	4402      	add	r2, r0
 800adae:	4603      	mov	r3, r0
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d100      	bne.n	800adb6 <memset+0xa>
 800adb4:	4770      	bx	lr
 800adb6:	f803 1b01 	strb.w	r1, [r3], #1
 800adba:	e7f9      	b.n	800adb0 <memset+0x4>

0800adbc <__cvt>:
 800adbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	ec55 4b10 	vmov	r4, r5, d0
 800adc4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800adc6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adca:	2d00      	cmp	r5, #0
 800adcc:	460e      	mov	r6, r1
 800adce:	4691      	mov	r9, r2
 800add0:	4619      	mov	r1, r3
 800add2:	bfb8      	it	lt
 800add4:	4622      	movlt	r2, r4
 800add6:	462b      	mov	r3, r5
 800add8:	f027 0720 	bic.w	r7, r7, #32
 800addc:	bfbb      	ittet	lt
 800adde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ade2:	461d      	movlt	r5, r3
 800ade4:	2300      	movge	r3, #0
 800ade6:	232d      	movlt	r3, #45	; 0x2d
 800ade8:	bfb8      	it	lt
 800adea:	4614      	movlt	r4, r2
 800adec:	2f46      	cmp	r7, #70	; 0x46
 800adee:	700b      	strb	r3, [r1, #0]
 800adf0:	d004      	beq.n	800adfc <__cvt+0x40>
 800adf2:	2f45      	cmp	r7, #69	; 0x45
 800adf4:	d100      	bne.n	800adf8 <__cvt+0x3c>
 800adf6:	3601      	adds	r6, #1
 800adf8:	2102      	movs	r1, #2
 800adfa:	e000      	b.n	800adfe <__cvt+0x42>
 800adfc:	2103      	movs	r1, #3
 800adfe:	ab03      	add	r3, sp, #12
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	ab02      	add	r3, sp, #8
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4632      	mov	r2, r6
 800ae08:	4653      	mov	r3, sl
 800ae0a:	ec45 4b10 	vmov	d0, r4, r5
 800ae0e:	f001 fd77 	bl	800c900 <_dtoa_r>
 800ae12:	2f47      	cmp	r7, #71	; 0x47
 800ae14:	4680      	mov	r8, r0
 800ae16:	d102      	bne.n	800ae1e <__cvt+0x62>
 800ae18:	f019 0f01 	tst.w	r9, #1
 800ae1c:	d026      	beq.n	800ae6c <__cvt+0xb0>
 800ae1e:	2f46      	cmp	r7, #70	; 0x46
 800ae20:	eb08 0906 	add.w	r9, r8, r6
 800ae24:	d111      	bne.n	800ae4a <__cvt+0x8e>
 800ae26:	f898 3000 	ldrb.w	r3, [r8]
 800ae2a:	2b30      	cmp	r3, #48	; 0x30
 800ae2c:	d10a      	bne.n	800ae44 <__cvt+0x88>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3a:	b918      	cbnz	r0, 800ae44 <__cvt+0x88>
 800ae3c:	f1c6 0601 	rsb	r6, r6, #1
 800ae40:	f8ca 6000 	str.w	r6, [sl]
 800ae44:	f8da 3000 	ldr.w	r3, [sl]
 800ae48:	4499      	add	r9, r3
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae56:	b938      	cbnz	r0, 800ae68 <__cvt+0xac>
 800ae58:	2230      	movs	r2, #48	; 0x30
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	454b      	cmp	r3, r9
 800ae5e:	d205      	bcs.n	800ae6c <__cvt+0xb0>
 800ae60:	1c59      	adds	r1, r3, #1
 800ae62:	9103      	str	r1, [sp, #12]
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e7f8      	b.n	800ae5a <__cvt+0x9e>
 800ae68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae70:	eba3 0308 	sub.w	r3, r3, r8
 800ae74:	4640      	mov	r0, r8
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	b004      	add	sp, #16
 800ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ae7e <__exponent>:
 800ae7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae80:	2900      	cmp	r1, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	bfba      	itte	lt
 800ae86:	4249      	neglt	r1, r1
 800ae88:	232d      	movlt	r3, #45	; 0x2d
 800ae8a:	232b      	movge	r3, #43	; 0x2b
 800ae8c:	2909      	cmp	r1, #9
 800ae8e:	f804 2b02 	strb.w	r2, [r4], #2
 800ae92:	7043      	strb	r3, [r0, #1]
 800ae94:	dd20      	ble.n	800aed8 <__exponent+0x5a>
 800ae96:	f10d 0307 	add.w	r3, sp, #7
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	260a      	movs	r6, #10
 800ae9e:	fb91 f5f6 	sdiv	r5, r1, r6
 800aea2:	fb06 1115 	mls	r1, r6, r5, r1
 800aea6:	3130      	adds	r1, #48	; 0x30
 800aea8:	2d09      	cmp	r5, #9
 800aeaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aeae:	f103 32ff 	add.w	r2, r3, #4294967295
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	dc09      	bgt.n	800aeca <__exponent+0x4c>
 800aeb6:	3130      	adds	r1, #48	; 0x30
 800aeb8:	3b02      	subs	r3, #2
 800aeba:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aebe:	42bb      	cmp	r3, r7
 800aec0:	4622      	mov	r2, r4
 800aec2:	d304      	bcc.n	800aece <__exponent+0x50>
 800aec4:	1a10      	subs	r0, r2, r0
 800aec6:	b003      	add	sp, #12
 800aec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeca:	4613      	mov	r3, r2
 800aecc:	e7e7      	b.n	800ae9e <__exponent+0x20>
 800aece:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed2:	f804 2b01 	strb.w	r2, [r4], #1
 800aed6:	e7f2      	b.n	800aebe <__exponent+0x40>
 800aed8:	2330      	movs	r3, #48	; 0x30
 800aeda:	4419      	add	r1, r3
 800aedc:	7083      	strb	r3, [r0, #2]
 800aede:	1d02      	adds	r2, r0, #4
 800aee0:	70c1      	strb	r1, [r0, #3]
 800aee2:	e7ef      	b.n	800aec4 <__exponent+0x46>

0800aee4 <_printf_float>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	b08d      	sub	sp, #52	; 0x34
 800aeea:	460c      	mov	r4, r1
 800aeec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aef0:	4616      	mov	r6, r2
 800aef2:	461f      	mov	r7, r3
 800aef4:	4605      	mov	r5, r0
 800aef6:	f002 fde7 	bl	800dac8 <_localeconv_r>
 800aefa:	6803      	ldr	r3, [r0, #0]
 800aefc:	9304      	str	r3, [sp, #16]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7f5 f966 	bl	80001d0 <strlen>
 800af04:	2300      	movs	r3, #0
 800af06:	930a      	str	r3, [sp, #40]	; 0x28
 800af08:	f8d8 3000 	ldr.w	r3, [r8]
 800af0c:	9005      	str	r0, [sp, #20]
 800af0e:	3307      	adds	r3, #7
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	f103 0208 	add.w	r2, r3, #8
 800af18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af1c:	f8d4 b000 	ldr.w	fp, [r4]
 800af20:	f8c8 2000 	str.w	r2, [r8]
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af2c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f8cd 8018 	str.w	r8, [sp, #24]
 800af3a:	f04f 32ff 	mov.w	r2, #4294967295
 800af3e:	4ba7      	ldr	r3, [pc, #668]	; (800b1dc <_printf_float+0x2f8>)
 800af40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af44:	f7f5 fdf2 	bl	8000b2c <__aeabi_dcmpun>
 800af48:	bb70      	cbnz	r0, 800afa8 <_printf_float+0xc4>
 800af4a:	f04f 32ff 	mov.w	r2, #4294967295
 800af4e:	4ba3      	ldr	r3, [pc, #652]	; (800b1dc <_printf_float+0x2f8>)
 800af50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af54:	f7f5 fdcc 	bl	8000af0 <__aeabi_dcmple>
 800af58:	bb30      	cbnz	r0, 800afa8 <_printf_float+0xc4>
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 fdbb 	bl	8000adc <__aeabi_dcmplt>
 800af66:	b110      	cbz	r0, 800af6e <_printf_float+0x8a>
 800af68:	232d      	movs	r3, #45	; 0x2d
 800af6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af6e:	4a9c      	ldr	r2, [pc, #624]	; (800b1e0 <_printf_float+0x2fc>)
 800af70:	4b9c      	ldr	r3, [pc, #624]	; (800b1e4 <_printf_float+0x300>)
 800af72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af76:	bf8c      	ite	hi
 800af78:	4690      	movhi	r8, r2
 800af7a:	4698      	movls	r8, r3
 800af7c:	2303      	movs	r3, #3
 800af7e:	f02b 0204 	bic.w	r2, fp, #4
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	f04f 0900 	mov.w	r9, #0
 800af8a:	9700      	str	r7, [sp, #0]
 800af8c:	4633      	mov	r3, r6
 800af8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f000 f9e6 	bl	800b364 <_printf_common>
 800af98:	3001      	adds	r0, #1
 800af9a:	f040 808d 	bne.w	800b0b8 <_printf_float+0x1d4>
 800af9e:	f04f 30ff 	mov.w	r0, #4294967295
 800afa2:	b00d      	add	sp, #52	; 0x34
 800afa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 fdbc 	bl	8000b2c <__aeabi_dcmpun>
 800afb4:	b110      	cbz	r0, 800afbc <_printf_float+0xd8>
 800afb6:	4a8c      	ldr	r2, [pc, #560]	; (800b1e8 <_printf_float+0x304>)
 800afb8:	4b8c      	ldr	r3, [pc, #560]	; (800b1ec <_printf_float+0x308>)
 800afba:	e7da      	b.n	800af72 <_printf_float+0x8e>
 800afbc:	6861      	ldr	r1, [r4, #4]
 800afbe:	1c4b      	adds	r3, r1, #1
 800afc0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800afc4:	a80a      	add	r0, sp, #40	; 0x28
 800afc6:	d13e      	bne.n	800b046 <_printf_float+0x162>
 800afc8:	2306      	movs	r3, #6
 800afca:	6063      	str	r3, [r4, #4]
 800afcc:	2300      	movs	r3, #0
 800afce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800afd2:	ab09      	add	r3, sp, #36	; 0x24
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	ec49 8b10 	vmov	d0, r8, r9
 800afda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afde:	6022      	str	r2, [r4, #0]
 800afe0:	f8cd a004 	str.w	sl, [sp, #4]
 800afe4:	6861      	ldr	r1, [r4, #4]
 800afe6:	4628      	mov	r0, r5
 800afe8:	f7ff fee8 	bl	800adbc <__cvt>
 800afec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800aff0:	2b47      	cmp	r3, #71	; 0x47
 800aff2:	4680      	mov	r8, r0
 800aff4:	d109      	bne.n	800b00a <_printf_float+0x126>
 800aff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff8:	1cd8      	adds	r0, r3, #3
 800affa:	db02      	blt.n	800b002 <_printf_float+0x11e>
 800affc:	6862      	ldr	r2, [r4, #4]
 800affe:	4293      	cmp	r3, r2
 800b000:	dd47      	ble.n	800b092 <_printf_float+0x1ae>
 800b002:	f1aa 0a02 	sub.w	sl, sl, #2
 800b006:	fa5f fa8a 	uxtb.w	sl, sl
 800b00a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b00e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b010:	d824      	bhi.n	800b05c <_printf_float+0x178>
 800b012:	3901      	subs	r1, #1
 800b014:	4652      	mov	r2, sl
 800b016:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b01a:	9109      	str	r1, [sp, #36]	; 0x24
 800b01c:	f7ff ff2f 	bl	800ae7e <__exponent>
 800b020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b022:	1813      	adds	r3, r2, r0
 800b024:	2a01      	cmp	r2, #1
 800b026:	4681      	mov	r9, r0
 800b028:	6123      	str	r3, [r4, #16]
 800b02a:	dc02      	bgt.n	800b032 <_printf_float+0x14e>
 800b02c:	6822      	ldr	r2, [r4, #0]
 800b02e:	07d1      	lsls	r1, r2, #31
 800b030:	d501      	bpl.n	800b036 <_printf_float+0x152>
 800b032:	3301      	adds	r3, #1
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0a5      	beq.n	800af8a <_printf_float+0xa6>
 800b03e:	232d      	movs	r3, #45	; 0x2d
 800b040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b044:	e7a1      	b.n	800af8a <_printf_float+0xa6>
 800b046:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b04a:	f000 8177 	beq.w	800b33c <_printf_float+0x458>
 800b04e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b052:	d1bb      	bne.n	800afcc <_printf_float+0xe8>
 800b054:	2900      	cmp	r1, #0
 800b056:	d1b9      	bne.n	800afcc <_printf_float+0xe8>
 800b058:	2301      	movs	r3, #1
 800b05a:	e7b6      	b.n	800afca <_printf_float+0xe6>
 800b05c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b060:	d119      	bne.n	800b096 <_printf_float+0x1b2>
 800b062:	2900      	cmp	r1, #0
 800b064:	6863      	ldr	r3, [r4, #4]
 800b066:	dd0c      	ble.n	800b082 <_printf_float+0x19e>
 800b068:	6121      	str	r1, [r4, #16]
 800b06a:	b913      	cbnz	r3, 800b072 <_printf_float+0x18e>
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	07d2      	lsls	r2, r2, #31
 800b070:	d502      	bpl.n	800b078 <_printf_float+0x194>
 800b072:	3301      	adds	r3, #1
 800b074:	440b      	add	r3, r1
 800b076:	6123      	str	r3, [r4, #16]
 800b078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b07c:	f04f 0900 	mov.w	r9, #0
 800b080:	e7d9      	b.n	800b036 <_printf_float+0x152>
 800b082:	b913      	cbnz	r3, 800b08a <_printf_float+0x1a6>
 800b084:	6822      	ldr	r2, [r4, #0]
 800b086:	07d0      	lsls	r0, r2, #31
 800b088:	d501      	bpl.n	800b08e <_printf_float+0x1aa>
 800b08a:	3302      	adds	r3, #2
 800b08c:	e7f3      	b.n	800b076 <_printf_float+0x192>
 800b08e:	2301      	movs	r3, #1
 800b090:	e7f1      	b.n	800b076 <_printf_float+0x192>
 800b092:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b096:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b09a:	4293      	cmp	r3, r2
 800b09c:	db05      	blt.n	800b0aa <_printf_float+0x1c6>
 800b09e:	6822      	ldr	r2, [r4, #0]
 800b0a0:	6123      	str	r3, [r4, #16]
 800b0a2:	07d1      	lsls	r1, r2, #31
 800b0a4:	d5e8      	bpl.n	800b078 <_printf_float+0x194>
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	e7e5      	b.n	800b076 <_printf_float+0x192>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bfd4      	ite	le
 800b0ae:	f1c3 0302 	rsble	r3, r3, #2
 800b0b2:	2301      	movgt	r3, #1
 800b0b4:	4413      	add	r3, r2
 800b0b6:	e7de      	b.n	800b076 <_printf_float+0x192>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	055a      	lsls	r2, r3, #21
 800b0bc:	d407      	bmi.n	800b0ce <_printf_float+0x1ea>
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	4642      	mov	r2, r8
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	47b8      	blx	r7
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d12b      	bne.n	800b124 <_printf_float+0x240>
 800b0cc:	e767      	b.n	800af9e <_printf_float+0xba>
 800b0ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b0d2:	f240 80dc 	bls.w	800b28e <_printf_float+0x3aa>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2300      	movs	r3, #0
 800b0da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0de:	f7f5 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d033      	beq.n	800b14e <_printf_float+0x26a>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4a41      	ldr	r2, [pc, #260]	; (800b1f0 <_printf_float+0x30c>)
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b8      	blx	r7
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f43f af54 	beq.w	800af9e <_printf_float+0xba>
 800b0f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	db02      	blt.n	800b104 <_printf_float+0x220>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	07d8      	lsls	r0, r3, #31
 800b102:	d50f      	bpl.n	800b124 <_printf_float+0x240>
 800b104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f af45 	beq.w	800af9e <_printf_float+0xba>
 800b114:	f04f 0800 	mov.w	r8, #0
 800b118:	f104 091a 	add.w	r9, r4, #26
 800b11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11e:	3b01      	subs	r3, #1
 800b120:	4543      	cmp	r3, r8
 800b122:	dc09      	bgt.n	800b138 <_printf_float+0x254>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	079b      	lsls	r3, r3, #30
 800b128:	f100 8103 	bmi.w	800b332 <_printf_float+0x44e>
 800b12c:	68e0      	ldr	r0, [r4, #12]
 800b12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b130:	4298      	cmp	r0, r3
 800b132:	bfb8      	it	lt
 800b134:	4618      	movlt	r0, r3
 800b136:	e734      	b.n	800afa2 <_printf_float+0xbe>
 800b138:	2301      	movs	r3, #1
 800b13a:	464a      	mov	r2, r9
 800b13c:	4631      	mov	r1, r6
 800b13e:	4628      	mov	r0, r5
 800b140:	47b8      	blx	r7
 800b142:	3001      	adds	r0, #1
 800b144:	f43f af2b 	beq.w	800af9e <_printf_float+0xba>
 800b148:	f108 0801 	add.w	r8, r8, #1
 800b14c:	e7e6      	b.n	800b11c <_printf_float+0x238>
 800b14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b150:	2b00      	cmp	r3, #0
 800b152:	dc2b      	bgt.n	800b1ac <_printf_float+0x2c8>
 800b154:	2301      	movs	r3, #1
 800b156:	4a26      	ldr	r2, [pc, #152]	; (800b1f0 <_printf_float+0x30c>)
 800b158:	4631      	mov	r1, r6
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b8      	blx	r7
 800b15e:	3001      	adds	r0, #1
 800b160:	f43f af1d 	beq.w	800af9e <_printf_float+0xba>
 800b164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b166:	b923      	cbnz	r3, 800b172 <_printf_float+0x28e>
 800b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16a:	b913      	cbnz	r3, 800b172 <_printf_float+0x28e>
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	07d9      	lsls	r1, r3, #31
 800b170:	d5d8      	bpl.n	800b124 <_printf_float+0x240>
 800b172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b176:	4631      	mov	r1, r6
 800b178:	4628      	mov	r0, r5
 800b17a:	47b8      	blx	r7
 800b17c:	3001      	adds	r0, #1
 800b17e:	f43f af0e 	beq.w	800af9e <_printf_float+0xba>
 800b182:	f04f 0900 	mov.w	r9, #0
 800b186:	f104 0a1a 	add.w	sl, r4, #26
 800b18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18c:	425b      	negs	r3, r3
 800b18e:	454b      	cmp	r3, r9
 800b190:	dc01      	bgt.n	800b196 <_printf_float+0x2b2>
 800b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b194:	e794      	b.n	800b0c0 <_printf_float+0x1dc>
 800b196:	2301      	movs	r3, #1
 800b198:	4652      	mov	r2, sl
 800b19a:	4631      	mov	r1, r6
 800b19c:	4628      	mov	r0, r5
 800b19e:	47b8      	blx	r7
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	f43f aefc 	beq.w	800af9e <_printf_float+0xba>
 800b1a6:	f109 0901 	add.w	r9, r9, #1
 800b1aa:	e7ee      	b.n	800b18a <_printf_float+0x2a6>
 800b1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	bfa8      	it	ge
 800b1b4:	461a      	movge	r2, r3
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	4691      	mov	r9, r2
 800b1ba:	dd07      	ble.n	800b1cc <_printf_float+0x2e8>
 800b1bc:	4613      	mov	r3, r2
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f43f aee9 	beq.w	800af9e <_printf_float+0xba>
 800b1cc:	f104 031a 	add.w	r3, r4, #26
 800b1d0:	f04f 0b00 	mov.w	fp, #0
 800b1d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1d8:	9306      	str	r3, [sp, #24]
 800b1da:	e015      	b.n	800b208 <_printf_float+0x324>
 800b1dc:	7fefffff 	.word	0x7fefffff
 800b1e0:	0800ed54 	.word	0x0800ed54
 800b1e4:	0800ed50 	.word	0x0800ed50
 800b1e8:	0800ed5c 	.word	0x0800ed5c
 800b1ec:	0800ed58 	.word	0x0800ed58
 800b1f0:	0800ed60 	.word	0x0800ed60
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	9a06      	ldr	r2, [sp, #24]
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	f43f aecd 	beq.w	800af9e <_printf_float+0xba>
 800b204:	f10b 0b01 	add.w	fp, fp, #1
 800b208:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b20c:	ebaa 0309 	sub.w	r3, sl, r9
 800b210:	455b      	cmp	r3, fp
 800b212:	dcef      	bgt.n	800b1f4 <_printf_float+0x310>
 800b214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b218:	429a      	cmp	r2, r3
 800b21a:	44d0      	add	r8, sl
 800b21c:	db15      	blt.n	800b24a <_printf_float+0x366>
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	07da      	lsls	r2, r3, #31
 800b222:	d412      	bmi.n	800b24a <_printf_float+0x366>
 800b224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b226:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b228:	eba3 020a 	sub.w	r2, r3, sl
 800b22c:	eba3 0a01 	sub.w	sl, r3, r1
 800b230:	4592      	cmp	sl, r2
 800b232:	bfa8      	it	ge
 800b234:	4692      	movge	sl, r2
 800b236:	f1ba 0f00 	cmp.w	sl, #0
 800b23a:	dc0e      	bgt.n	800b25a <_printf_float+0x376>
 800b23c:	f04f 0800 	mov.w	r8, #0
 800b240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b244:	f104 091a 	add.w	r9, r4, #26
 800b248:	e019      	b.n	800b27e <_printf_float+0x39a>
 800b24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	47b8      	blx	r7
 800b254:	3001      	adds	r0, #1
 800b256:	d1e5      	bne.n	800b224 <_printf_float+0x340>
 800b258:	e6a1      	b.n	800af9e <_printf_float+0xba>
 800b25a:	4653      	mov	r3, sl
 800b25c:	4642      	mov	r2, r8
 800b25e:	4631      	mov	r1, r6
 800b260:	4628      	mov	r0, r5
 800b262:	47b8      	blx	r7
 800b264:	3001      	adds	r0, #1
 800b266:	d1e9      	bne.n	800b23c <_printf_float+0x358>
 800b268:	e699      	b.n	800af9e <_printf_float+0xba>
 800b26a:	2301      	movs	r3, #1
 800b26c:	464a      	mov	r2, r9
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f ae92 	beq.w	800af9e <_printf_float+0xba>
 800b27a:	f108 0801 	add.w	r8, r8, #1
 800b27e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	eba3 030a 	sub.w	r3, r3, sl
 800b288:	4543      	cmp	r3, r8
 800b28a:	dcee      	bgt.n	800b26a <_printf_float+0x386>
 800b28c:	e74a      	b.n	800b124 <_printf_float+0x240>
 800b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b290:	2a01      	cmp	r2, #1
 800b292:	dc01      	bgt.n	800b298 <_printf_float+0x3b4>
 800b294:	07db      	lsls	r3, r3, #31
 800b296:	d53a      	bpl.n	800b30e <_printf_float+0x42a>
 800b298:	2301      	movs	r3, #1
 800b29a:	4642      	mov	r2, r8
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f ae7b 	beq.w	800af9e <_printf_float+0xba>
 800b2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	47b8      	blx	r7
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	f108 0801 	add.w	r8, r8, #1
 800b2b8:	f43f ae71 	beq.w	800af9e <_printf_float+0xba>
 800b2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f103 3aff 	add.w	sl, r3, #4294967295
 800b2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f7f5 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ce:	b9c8      	cbnz	r0, 800b304 <_printf_float+0x420>
 800b2d0:	4653      	mov	r3, sl
 800b2d2:	4642      	mov	r2, r8
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d10e      	bne.n	800b2fc <_printf_float+0x418>
 800b2de:	e65e      	b.n	800af9e <_printf_float+0xba>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4652      	mov	r2, sl
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	47b8      	blx	r7
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f43f ae57 	beq.w	800af9e <_printf_float+0xba>
 800b2f0:	f108 0801 	add.w	r8, r8, #1
 800b2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4543      	cmp	r3, r8
 800b2fa:	dcf1      	bgt.n	800b2e0 <_printf_float+0x3fc>
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b302:	e6de      	b.n	800b0c2 <_printf_float+0x1de>
 800b304:	f04f 0800 	mov.w	r8, #0
 800b308:	f104 0a1a 	add.w	sl, r4, #26
 800b30c:	e7f2      	b.n	800b2f4 <_printf_float+0x410>
 800b30e:	2301      	movs	r3, #1
 800b310:	e7df      	b.n	800b2d2 <_printf_float+0x3ee>
 800b312:	2301      	movs	r3, #1
 800b314:	464a      	mov	r2, r9
 800b316:	4631      	mov	r1, r6
 800b318:	4628      	mov	r0, r5
 800b31a:	47b8      	blx	r7
 800b31c:	3001      	adds	r0, #1
 800b31e:	f43f ae3e 	beq.w	800af9e <_printf_float+0xba>
 800b322:	f108 0801 	add.w	r8, r8, #1
 800b326:	68e3      	ldr	r3, [r4, #12]
 800b328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	4543      	cmp	r3, r8
 800b32e:	dcf0      	bgt.n	800b312 <_printf_float+0x42e>
 800b330:	e6fc      	b.n	800b12c <_printf_float+0x248>
 800b332:	f04f 0800 	mov.w	r8, #0
 800b336:	f104 0919 	add.w	r9, r4, #25
 800b33a:	e7f4      	b.n	800b326 <_printf_float+0x442>
 800b33c:	2900      	cmp	r1, #0
 800b33e:	f43f ae8b 	beq.w	800b058 <_printf_float+0x174>
 800b342:	2300      	movs	r3, #0
 800b344:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b348:	ab09      	add	r3, sp, #36	; 0x24
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	ec49 8b10 	vmov	d0, r8, r9
 800b350:	6022      	str	r2, [r4, #0]
 800b352:	f8cd a004 	str.w	sl, [sp, #4]
 800b356:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff fd2e 	bl	800adbc <__cvt>
 800b360:	4680      	mov	r8, r0
 800b362:	e648      	b.n	800aff6 <_printf_float+0x112>

0800b364 <_printf_common>:
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	4691      	mov	r9, r2
 800b36a:	461f      	mov	r7, r3
 800b36c:	688a      	ldr	r2, [r1, #8]
 800b36e:	690b      	ldr	r3, [r1, #16]
 800b370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b374:	4293      	cmp	r3, r2
 800b376:	bfb8      	it	lt
 800b378:	4613      	movlt	r3, r2
 800b37a:	f8c9 3000 	str.w	r3, [r9]
 800b37e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b382:	4606      	mov	r6, r0
 800b384:	460c      	mov	r4, r1
 800b386:	b112      	cbz	r2, 800b38e <_printf_common+0x2a>
 800b388:	3301      	adds	r3, #1
 800b38a:	f8c9 3000 	str.w	r3, [r9]
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	0699      	lsls	r1, r3, #26
 800b392:	bf42      	ittt	mi
 800b394:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b398:	3302      	addmi	r3, #2
 800b39a:	f8c9 3000 	strmi.w	r3, [r9]
 800b39e:	6825      	ldr	r5, [r4, #0]
 800b3a0:	f015 0506 	ands.w	r5, r5, #6
 800b3a4:	d107      	bne.n	800b3b6 <_printf_common+0x52>
 800b3a6:	f104 0a19 	add.w	sl, r4, #25
 800b3aa:	68e3      	ldr	r3, [r4, #12]
 800b3ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b3b0:	1a9b      	subs	r3, r3, r2
 800b3b2:	42ab      	cmp	r3, r5
 800b3b4:	dc28      	bgt.n	800b408 <_printf_common+0xa4>
 800b3b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	3300      	adds	r3, #0
 800b3be:	bf18      	it	ne
 800b3c0:	2301      	movne	r3, #1
 800b3c2:	0692      	lsls	r2, r2, #26
 800b3c4:	d42d      	bmi.n	800b422 <_printf_common+0xbe>
 800b3c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	47c0      	blx	r8
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d020      	beq.n	800b416 <_printf_common+0xb2>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	68e5      	ldr	r5, [r4, #12]
 800b3d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b3dc:	f003 0306 	and.w	r3, r3, #6
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	bf08      	it	eq
 800b3e4:	1aad      	subeq	r5, r5, r2
 800b3e6:	68a3      	ldr	r3, [r4, #8]
 800b3e8:	6922      	ldr	r2, [r4, #16]
 800b3ea:	bf0c      	ite	eq
 800b3ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3f0:	2500      	movne	r5, #0
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	bfc4      	itt	gt
 800b3f6:	1a9b      	subgt	r3, r3, r2
 800b3f8:	18ed      	addgt	r5, r5, r3
 800b3fa:	f04f 0900 	mov.w	r9, #0
 800b3fe:	341a      	adds	r4, #26
 800b400:	454d      	cmp	r5, r9
 800b402:	d11a      	bne.n	800b43a <_printf_common+0xd6>
 800b404:	2000      	movs	r0, #0
 800b406:	e008      	b.n	800b41a <_printf_common+0xb6>
 800b408:	2301      	movs	r3, #1
 800b40a:	4652      	mov	r2, sl
 800b40c:	4639      	mov	r1, r7
 800b40e:	4630      	mov	r0, r6
 800b410:	47c0      	blx	r8
 800b412:	3001      	adds	r0, #1
 800b414:	d103      	bne.n	800b41e <_printf_common+0xba>
 800b416:	f04f 30ff 	mov.w	r0, #4294967295
 800b41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41e:	3501      	adds	r5, #1
 800b420:	e7c3      	b.n	800b3aa <_printf_common+0x46>
 800b422:	18e1      	adds	r1, r4, r3
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	2030      	movs	r0, #48	; 0x30
 800b428:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b42c:	4422      	add	r2, r4
 800b42e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b436:	3302      	adds	r3, #2
 800b438:	e7c5      	b.n	800b3c6 <_printf_common+0x62>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4622      	mov	r2, r4
 800b43e:	4639      	mov	r1, r7
 800b440:	4630      	mov	r0, r6
 800b442:	47c0      	blx	r8
 800b444:	3001      	adds	r0, #1
 800b446:	d0e6      	beq.n	800b416 <_printf_common+0xb2>
 800b448:	f109 0901 	add.w	r9, r9, #1
 800b44c:	e7d8      	b.n	800b400 <_printf_common+0x9c>
	...

0800b450 <_printf_i>:
 800b450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b454:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b458:	460c      	mov	r4, r1
 800b45a:	7e09      	ldrb	r1, [r1, #24]
 800b45c:	b085      	sub	sp, #20
 800b45e:	296e      	cmp	r1, #110	; 0x6e
 800b460:	4617      	mov	r7, r2
 800b462:	4606      	mov	r6, r0
 800b464:	4698      	mov	r8, r3
 800b466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b468:	f000 80b3 	beq.w	800b5d2 <_printf_i+0x182>
 800b46c:	d822      	bhi.n	800b4b4 <_printf_i+0x64>
 800b46e:	2963      	cmp	r1, #99	; 0x63
 800b470:	d036      	beq.n	800b4e0 <_printf_i+0x90>
 800b472:	d80a      	bhi.n	800b48a <_printf_i+0x3a>
 800b474:	2900      	cmp	r1, #0
 800b476:	f000 80b9 	beq.w	800b5ec <_printf_i+0x19c>
 800b47a:	2958      	cmp	r1, #88	; 0x58
 800b47c:	f000 8083 	beq.w	800b586 <_printf_i+0x136>
 800b480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b484:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b488:	e032      	b.n	800b4f0 <_printf_i+0xa0>
 800b48a:	2964      	cmp	r1, #100	; 0x64
 800b48c:	d001      	beq.n	800b492 <_printf_i+0x42>
 800b48e:	2969      	cmp	r1, #105	; 0x69
 800b490:	d1f6      	bne.n	800b480 <_printf_i+0x30>
 800b492:	6820      	ldr	r0, [r4, #0]
 800b494:	6813      	ldr	r3, [r2, #0]
 800b496:	0605      	lsls	r5, r0, #24
 800b498:	f103 0104 	add.w	r1, r3, #4
 800b49c:	d52a      	bpl.n	800b4f4 <_printf_i+0xa4>
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6011      	str	r1, [r2, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da03      	bge.n	800b4ae <_printf_i+0x5e>
 800b4a6:	222d      	movs	r2, #45	; 0x2d
 800b4a8:	425b      	negs	r3, r3
 800b4aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b4ae:	486f      	ldr	r0, [pc, #444]	; (800b66c <_printf_i+0x21c>)
 800b4b0:	220a      	movs	r2, #10
 800b4b2:	e039      	b.n	800b528 <_printf_i+0xd8>
 800b4b4:	2973      	cmp	r1, #115	; 0x73
 800b4b6:	f000 809d 	beq.w	800b5f4 <_printf_i+0x1a4>
 800b4ba:	d808      	bhi.n	800b4ce <_printf_i+0x7e>
 800b4bc:	296f      	cmp	r1, #111	; 0x6f
 800b4be:	d020      	beq.n	800b502 <_printf_i+0xb2>
 800b4c0:	2970      	cmp	r1, #112	; 0x70
 800b4c2:	d1dd      	bne.n	800b480 <_printf_i+0x30>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	f043 0320 	orr.w	r3, r3, #32
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	e003      	b.n	800b4d6 <_printf_i+0x86>
 800b4ce:	2975      	cmp	r1, #117	; 0x75
 800b4d0:	d017      	beq.n	800b502 <_printf_i+0xb2>
 800b4d2:	2978      	cmp	r1, #120	; 0x78
 800b4d4:	d1d4      	bne.n	800b480 <_printf_i+0x30>
 800b4d6:	2378      	movs	r3, #120	; 0x78
 800b4d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4dc:	4864      	ldr	r0, [pc, #400]	; (800b670 <_printf_i+0x220>)
 800b4de:	e055      	b.n	800b58c <_printf_i+0x13c>
 800b4e0:	6813      	ldr	r3, [r2, #0]
 800b4e2:	1d19      	adds	r1, r3, #4
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6011      	str	r1, [r2, #0]
 800b4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e08c      	b.n	800b60e <_printf_i+0x1be>
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6011      	str	r1, [r2, #0]
 800b4f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4fc:	bf18      	it	ne
 800b4fe:	b21b      	sxthne	r3, r3
 800b500:	e7cf      	b.n	800b4a2 <_printf_i+0x52>
 800b502:	6813      	ldr	r3, [r2, #0]
 800b504:	6825      	ldr	r5, [r4, #0]
 800b506:	1d18      	adds	r0, r3, #4
 800b508:	6010      	str	r0, [r2, #0]
 800b50a:	0628      	lsls	r0, r5, #24
 800b50c:	d501      	bpl.n	800b512 <_printf_i+0xc2>
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	e002      	b.n	800b518 <_printf_i+0xc8>
 800b512:	0668      	lsls	r0, r5, #25
 800b514:	d5fb      	bpl.n	800b50e <_printf_i+0xbe>
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	4854      	ldr	r0, [pc, #336]	; (800b66c <_printf_i+0x21c>)
 800b51a:	296f      	cmp	r1, #111	; 0x6f
 800b51c:	bf14      	ite	ne
 800b51e:	220a      	movne	r2, #10
 800b520:	2208      	moveq	r2, #8
 800b522:	2100      	movs	r1, #0
 800b524:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b528:	6865      	ldr	r5, [r4, #4]
 800b52a:	60a5      	str	r5, [r4, #8]
 800b52c:	2d00      	cmp	r5, #0
 800b52e:	f2c0 8095 	blt.w	800b65c <_printf_i+0x20c>
 800b532:	6821      	ldr	r1, [r4, #0]
 800b534:	f021 0104 	bic.w	r1, r1, #4
 800b538:	6021      	str	r1, [r4, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d13d      	bne.n	800b5ba <_printf_i+0x16a>
 800b53e:	2d00      	cmp	r5, #0
 800b540:	f040 808e 	bne.w	800b660 <_printf_i+0x210>
 800b544:	4665      	mov	r5, ip
 800b546:	2a08      	cmp	r2, #8
 800b548:	d10b      	bne.n	800b562 <_printf_i+0x112>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	07db      	lsls	r3, r3, #31
 800b54e:	d508      	bpl.n	800b562 <_printf_i+0x112>
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	6862      	ldr	r2, [r4, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	bfde      	ittt	le
 800b558:	2330      	movle	r3, #48	; 0x30
 800b55a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b55e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b562:	ebac 0305 	sub.w	r3, ip, r5
 800b566:	6123      	str	r3, [r4, #16]
 800b568:	f8cd 8000 	str.w	r8, [sp]
 800b56c:	463b      	mov	r3, r7
 800b56e:	aa03      	add	r2, sp, #12
 800b570:	4621      	mov	r1, r4
 800b572:	4630      	mov	r0, r6
 800b574:	f7ff fef6 	bl	800b364 <_printf_common>
 800b578:	3001      	adds	r0, #1
 800b57a:	d14d      	bne.n	800b618 <_printf_i+0x1c8>
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	b005      	add	sp, #20
 800b582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b586:	4839      	ldr	r0, [pc, #228]	; (800b66c <_printf_i+0x21c>)
 800b588:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b58c:	6813      	ldr	r3, [r2, #0]
 800b58e:	6821      	ldr	r1, [r4, #0]
 800b590:	1d1d      	adds	r5, r3, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6015      	str	r5, [r2, #0]
 800b596:	060a      	lsls	r2, r1, #24
 800b598:	d50b      	bpl.n	800b5b2 <_printf_i+0x162>
 800b59a:	07ca      	lsls	r2, r1, #31
 800b59c:	bf44      	itt	mi
 800b59e:	f041 0120 	orrmi.w	r1, r1, #32
 800b5a2:	6021      	strmi	r1, [r4, #0]
 800b5a4:	b91b      	cbnz	r3, 800b5ae <_printf_i+0x15e>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	f022 0220 	bic.w	r2, r2, #32
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	e7b7      	b.n	800b522 <_printf_i+0xd2>
 800b5b2:	064d      	lsls	r5, r1, #25
 800b5b4:	bf48      	it	mi
 800b5b6:	b29b      	uxthmi	r3, r3
 800b5b8:	e7ef      	b.n	800b59a <_printf_i+0x14a>
 800b5ba:	4665      	mov	r5, ip
 800b5bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c0:	fb02 3311 	mls	r3, r2, r1, r3
 800b5c4:	5cc3      	ldrb	r3, [r0, r3]
 800b5c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	2900      	cmp	r1, #0
 800b5ce:	d1f5      	bne.n	800b5bc <_printf_i+0x16c>
 800b5d0:	e7b9      	b.n	800b546 <_printf_i+0xf6>
 800b5d2:	6813      	ldr	r3, [r2, #0]
 800b5d4:	6825      	ldr	r5, [r4, #0]
 800b5d6:	6961      	ldr	r1, [r4, #20]
 800b5d8:	1d18      	adds	r0, r3, #4
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	0628      	lsls	r0, r5, #24
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	d501      	bpl.n	800b5e6 <_printf_i+0x196>
 800b5e2:	6019      	str	r1, [r3, #0]
 800b5e4:	e002      	b.n	800b5ec <_printf_i+0x19c>
 800b5e6:	066a      	lsls	r2, r5, #25
 800b5e8:	d5fb      	bpl.n	800b5e2 <_printf_i+0x192>
 800b5ea:	8019      	strh	r1, [r3, #0]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	4665      	mov	r5, ip
 800b5f2:	e7b9      	b.n	800b568 <_printf_i+0x118>
 800b5f4:	6813      	ldr	r3, [r2, #0]
 800b5f6:	1d19      	adds	r1, r3, #4
 800b5f8:	6011      	str	r1, [r2, #0]
 800b5fa:	681d      	ldr	r5, [r3, #0]
 800b5fc:	6862      	ldr	r2, [r4, #4]
 800b5fe:	2100      	movs	r1, #0
 800b600:	4628      	mov	r0, r5
 800b602:	f7f4 fded 	bl	80001e0 <memchr>
 800b606:	b108      	cbz	r0, 800b60c <_printf_i+0x1bc>
 800b608:	1b40      	subs	r0, r0, r5
 800b60a:	6060      	str	r0, [r4, #4]
 800b60c:	6863      	ldr	r3, [r4, #4]
 800b60e:	6123      	str	r3, [r4, #16]
 800b610:	2300      	movs	r3, #0
 800b612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b616:	e7a7      	b.n	800b568 <_printf_i+0x118>
 800b618:	6923      	ldr	r3, [r4, #16]
 800b61a:	462a      	mov	r2, r5
 800b61c:	4639      	mov	r1, r7
 800b61e:	4630      	mov	r0, r6
 800b620:	47c0      	blx	r8
 800b622:	3001      	adds	r0, #1
 800b624:	d0aa      	beq.n	800b57c <_printf_i+0x12c>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	079b      	lsls	r3, r3, #30
 800b62a:	d413      	bmi.n	800b654 <_printf_i+0x204>
 800b62c:	68e0      	ldr	r0, [r4, #12]
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	4298      	cmp	r0, r3
 800b632:	bfb8      	it	lt
 800b634:	4618      	movlt	r0, r3
 800b636:	e7a3      	b.n	800b580 <_printf_i+0x130>
 800b638:	2301      	movs	r3, #1
 800b63a:	464a      	mov	r2, r9
 800b63c:	4639      	mov	r1, r7
 800b63e:	4630      	mov	r0, r6
 800b640:	47c0      	blx	r8
 800b642:	3001      	adds	r0, #1
 800b644:	d09a      	beq.n	800b57c <_printf_i+0x12c>
 800b646:	3501      	adds	r5, #1
 800b648:	68e3      	ldr	r3, [r4, #12]
 800b64a:	9a03      	ldr	r2, [sp, #12]
 800b64c:	1a9b      	subs	r3, r3, r2
 800b64e:	42ab      	cmp	r3, r5
 800b650:	dcf2      	bgt.n	800b638 <_printf_i+0x1e8>
 800b652:	e7eb      	b.n	800b62c <_printf_i+0x1dc>
 800b654:	2500      	movs	r5, #0
 800b656:	f104 0919 	add.w	r9, r4, #25
 800b65a:	e7f5      	b.n	800b648 <_printf_i+0x1f8>
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1ac      	bne.n	800b5ba <_printf_i+0x16a>
 800b660:	7803      	ldrb	r3, [r0, #0]
 800b662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b666:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b66a:	e76c      	b.n	800b546 <_printf_i+0xf6>
 800b66c:	0800ed62 	.word	0x0800ed62
 800b670:	0800ed73 	.word	0x0800ed73

0800b674 <_scanf_float>:
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	469a      	mov	sl, r3
 800b67a:	688b      	ldr	r3, [r1, #8]
 800b67c:	4616      	mov	r6, r2
 800b67e:	1e5a      	subs	r2, r3, #1
 800b680:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b684:	b087      	sub	sp, #28
 800b686:	bf83      	ittte	hi
 800b688:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b68c:	189b      	addhi	r3, r3, r2
 800b68e:	9301      	strhi	r3, [sp, #4]
 800b690:	2300      	movls	r3, #0
 800b692:	bf86      	itte	hi
 800b694:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b698:	608b      	strhi	r3, [r1, #8]
 800b69a:	9301      	strls	r3, [sp, #4]
 800b69c:	680b      	ldr	r3, [r1, #0]
 800b69e:	4688      	mov	r8, r1
 800b6a0:	f04f 0b00 	mov.w	fp, #0
 800b6a4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b6a8:	f848 3b1c 	str.w	r3, [r8], #28
 800b6ac:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4645      	mov	r5, r8
 800b6b6:	465a      	mov	r2, fp
 800b6b8:	46d9      	mov	r9, fp
 800b6ba:	f8cd b008 	str.w	fp, [sp, #8]
 800b6be:	68a1      	ldr	r1, [r4, #8]
 800b6c0:	b181      	cbz	r1, 800b6e4 <_scanf_float+0x70>
 800b6c2:	6833      	ldr	r3, [r6, #0]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	2b49      	cmp	r3, #73	; 0x49
 800b6c8:	d071      	beq.n	800b7ae <_scanf_float+0x13a>
 800b6ca:	d84d      	bhi.n	800b768 <_scanf_float+0xf4>
 800b6cc:	2b39      	cmp	r3, #57	; 0x39
 800b6ce:	d840      	bhi.n	800b752 <_scanf_float+0xde>
 800b6d0:	2b31      	cmp	r3, #49	; 0x31
 800b6d2:	f080 8088 	bcs.w	800b7e6 <_scanf_float+0x172>
 800b6d6:	2b2d      	cmp	r3, #45	; 0x2d
 800b6d8:	f000 8090 	beq.w	800b7fc <_scanf_float+0x188>
 800b6dc:	d815      	bhi.n	800b70a <_scanf_float+0x96>
 800b6de:	2b2b      	cmp	r3, #43	; 0x2b
 800b6e0:	f000 808c 	beq.w	800b7fc <_scanf_float+0x188>
 800b6e4:	f1b9 0f00 	cmp.w	r9, #0
 800b6e8:	d003      	beq.n	800b6f2 <_scanf_float+0x7e>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	3a01      	subs	r2, #1
 800b6f4:	2a01      	cmp	r2, #1
 800b6f6:	f200 80ea 	bhi.w	800b8ce <_scanf_float+0x25a>
 800b6fa:	4545      	cmp	r5, r8
 800b6fc:	f200 80dc 	bhi.w	800b8b8 <_scanf_float+0x244>
 800b700:	2601      	movs	r6, #1
 800b702:	4630      	mov	r0, r6
 800b704:	b007      	add	sp, #28
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	2b2e      	cmp	r3, #46	; 0x2e
 800b70c:	f000 809f 	beq.w	800b84e <_scanf_float+0x1da>
 800b710:	2b30      	cmp	r3, #48	; 0x30
 800b712:	d1e7      	bne.n	800b6e4 <_scanf_float+0x70>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b71a:	d064      	beq.n	800b7e6 <_scanf_float+0x172>
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b722:	6020      	str	r0, [r4, #0]
 800b724:	f109 0901 	add.w	r9, r9, #1
 800b728:	b11b      	cbz	r3, 800b732 <_scanf_float+0xbe>
 800b72a:	3b01      	subs	r3, #1
 800b72c:	3101      	adds	r1, #1
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	60a1      	str	r1, [r4, #8]
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	3b01      	subs	r3, #1
 800b736:	60a3      	str	r3, [r4, #8]
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	3301      	adds	r3, #1
 800b73c:	6123      	str	r3, [r4, #16]
 800b73e:	6873      	ldr	r3, [r6, #4]
 800b740:	3b01      	subs	r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	6073      	str	r3, [r6, #4]
 800b746:	f340 80ac 	ble.w	800b8a2 <_scanf_float+0x22e>
 800b74a:	6833      	ldr	r3, [r6, #0]
 800b74c:	3301      	adds	r3, #1
 800b74e:	6033      	str	r3, [r6, #0]
 800b750:	e7b5      	b.n	800b6be <_scanf_float+0x4a>
 800b752:	2b45      	cmp	r3, #69	; 0x45
 800b754:	f000 8085 	beq.w	800b862 <_scanf_float+0x1ee>
 800b758:	2b46      	cmp	r3, #70	; 0x46
 800b75a:	d06a      	beq.n	800b832 <_scanf_float+0x1be>
 800b75c:	2b41      	cmp	r3, #65	; 0x41
 800b75e:	d1c1      	bne.n	800b6e4 <_scanf_float+0x70>
 800b760:	2a01      	cmp	r2, #1
 800b762:	d1bf      	bne.n	800b6e4 <_scanf_float+0x70>
 800b764:	2202      	movs	r2, #2
 800b766:	e046      	b.n	800b7f6 <_scanf_float+0x182>
 800b768:	2b65      	cmp	r3, #101	; 0x65
 800b76a:	d07a      	beq.n	800b862 <_scanf_float+0x1ee>
 800b76c:	d818      	bhi.n	800b7a0 <_scanf_float+0x12c>
 800b76e:	2b54      	cmp	r3, #84	; 0x54
 800b770:	d066      	beq.n	800b840 <_scanf_float+0x1cc>
 800b772:	d811      	bhi.n	800b798 <_scanf_float+0x124>
 800b774:	2b4e      	cmp	r3, #78	; 0x4e
 800b776:	d1b5      	bne.n	800b6e4 <_scanf_float+0x70>
 800b778:	2a00      	cmp	r2, #0
 800b77a:	d146      	bne.n	800b80a <_scanf_float+0x196>
 800b77c:	f1b9 0f00 	cmp.w	r9, #0
 800b780:	d145      	bne.n	800b80e <_scanf_float+0x19a>
 800b782:	6821      	ldr	r1, [r4, #0]
 800b784:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b788:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b78c:	d13f      	bne.n	800b80e <_scanf_float+0x19a>
 800b78e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b792:	6021      	str	r1, [r4, #0]
 800b794:	2201      	movs	r2, #1
 800b796:	e02e      	b.n	800b7f6 <_scanf_float+0x182>
 800b798:	2b59      	cmp	r3, #89	; 0x59
 800b79a:	d01e      	beq.n	800b7da <_scanf_float+0x166>
 800b79c:	2b61      	cmp	r3, #97	; 0x61
 800b79e:	e7de      	b.n	800b75e <_scanf_float+0xea>
 800b7a0:	2b6e      	cmp	r3, #110	; 0x6e
 800b7a2:	d0e9      	beq.n	800b778 <_scanf_float+0x104>
 800b7a4:	d815      	bhi.n	800b7d2 <_scanf_float+0x15e>
 800b7a6:	2b66      	cmp	r3, #102	; 0x66
 800b7a8:	d043      	beq.n	800b832 <_scanf_float+0x1be>
 800b7aa:	2b69      	cmp	r3, #105	; 0x69
 800b7ac:	d19a      	bne.n	800b6e4 <_scanf_float+0x70>
 800b7ae:	f1bb 0f00 	cmp.w	fp, #0
 800b7b2:	d138      	bne.n	800b826 <_scanf_float+0x1b2>
 800b7b4:	f1b9 0f00 	cmp.w	r9, #0
 800b7b8:	d197      	bne.n	800b6ea <_scanf_float+0x76>
 800b7ba:	6821      	ldr	r1, [r4, #0]
 800b7bc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b7c0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b7c4:	d195      	bne.n	800b6f2 <_scanf_float+0x7e>
 800b7c6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b7ca:	6021      	str	r1, [r4, #0]
 800b7cc:	f04f 0b01 	mov.w	fp, #1
 800b7d0:	e011      	b.n	800b7f6 <_scanf_float+0x182>
 800b7d2:	2b74      	cmp	r3, #116	; 0x74
 800b7d4:	d034      	beq.n	800b840 <_scanf_float+0x1cc>
 800b7d6:	2b79      	cmp	r3, #121	; 0x79
 800b7d8:	d184      	bne.n	800b6e4 <_scanf_float+0x70>
 800b7da:	f1bb 0f07 	cmp.w	fp, #7
 800b7de:	d181      	bne.n	800b6e4 <_scanf_float+0x70>
 800b7e0:	f04f 0b08 	mov.w	fp, #8
 800b7e4:	e007      	b.n	800b7f6 <_scanf_float+0x182>
 800b7e6:	eb12 0f0b 	cmn.w	r2, fp
 800b7ea:	f47f af7b 	bne.w	800b6e4 <_scanf_float+0x70>
 800b7ee:	6821      	ldr	r1, [r4, #0]
 800b7f0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b7f4:	6021      	str	r1, [r4, #0]
 800b7f6:	702b      	strb	r3, [r5, #0]
 800b7f8:	3501      	adds	r5, #1
 800b7fa:	e79a      	b.n	800b732 <_scanf_float+0xbe>
 800b7fc:	6821      	ldr	r1, [r4, #0]
 800b7fe:	0608      	lsls	r0, r1, #24
 800b800:	f57f af70 	bpl.w	800b6e4 <_scanf_float+0x70>
 800b804:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b808:	e7f4      	b.n	800b7f4 <_scanf_float+0x180>
 800b80a:	2a02      	cmp	r2, #2
 800b80c:	d047      	beq.n	800b89e <_scanf_float+0x22a>
 800b80e:	f1bb 0f01 	cmp.w	fp, #1
 800b812:	d003      	beq.n	800b81c <_scanf_float+0x1a8>
 800b814:	f1bb 0f04 	cmp.w	fp, #4
 800b818:	f47f af64 	bne.w	800b6e4 <_scanf_float+0x70>
 800b81c:	f10b 0b01 	add.w	fp, fp, #1
 800b820:	fa5f fb8b 	uxtb.w	fp, fp
 800b824:	e7e7      	b.n	800b7f6 <_scanf_float+0x182>
 800b826:	f1bb 0f03 	cmp.w	fp, #3
 800b82a:	d0f7      	beq.n	800b81c <_scanf_float+0x1a8>
 800b82c:	f1bb 0f05 	cmp.w	fp, #5
 800b830:	e7f2      	b.n	800b818 <_scanf_float+0x1a4>
 800b832:	f1bb 0f02 	cmp.w	fp, #2
 800b836:	f47f af55 	bne.w	800b6e4 <_scanf_float+0x70>
 800b83a:	f04f 0b03 	mov.w	fp, #3
 800b83e:	e7da      	b.n	800b7f6 <_scanf_float+0x182>
 800b840:	f1bb 0f06 	cmp.w	fp, #6
 800b844:	f47f af4e 	bne.w	800b6e4 <_scanf_float+0x70>
 800b848:	f04f 0b07 	mov.w	fp, #7
 800b84c:	e7d3      	b.n	800b7f6 <_scanf_float+0x182>
 800b84e:	6821      	ldr	r1, [r4, #0]
 800b850:	0588      	lsls	r0, r1, #22
 800b852:	f57f af47 	bpl.w	800b6e4 <_scanf_float+0x70>
 800b856:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b85a:	6021      	str	r1, [r4, #0]
 800b85c:	f8cd 9008 	str.w	r9, [sp, #8]
 800b860:	e7c9      	b.n	800b7f6 <_scanf_float+0x182>
 800b862:	6821      	ldr	r1, [r4, #0]
 800b864:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b868:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b86c:	d006      	beq.n	800b87c <_scanf_float+0x208>
 800b86e:	0548      	lsls	r0, r1, #21
 800b870:	f57f af38 	bpl.w	800b6e4 <_scanf_float+0x70>
 800b874:	f1b9 0f00 	cmp.w	r9, #0
 800b878:	f43f af3b 	beq.w	800b6f2 <_scanf_float+0x7e>
 800b87c:	0588      	lsls	r0, r1, #22
 800b87e:	bf58      	it	pl
 800b880:	9802      	ldrpl	r0, [sp, #8]
 800b882:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b886:	bf58      	it	pl
 800b888:	eba9 0000 	subpl.w	r0, r9, r0
 800b88c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b890:	bf58      	it	pl
 800b892:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b896:	6021      	str	r1, [r4, #0]
 800b898:	f04f 0900 	mov.w	r9, #0
 800b89c:	e7ab      	b.n	800b7f6 <_scanf_float+0x182>
 800b89e:	2203      	movs	r2, #3
 800b8a0:	e7a9      	b.n	800b7f6 <_scanf_float+0x182>
 800b8a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8a6:	9205      	str	r2, [sp, #20]
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	4798      	blx	r3
 800b8ae:	9a05      	ldr	r2, [sp, #20]
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	f43f af04 	beq.w	800b6be <_scanf_float+0x4a>
 800b8b6:	e715      	b.n	800b6e4 <_scanf_float+0x70>
 800b8b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	4798      	blx	r3
 800b8c6:	6923      	ldr	r3, [r4, #16]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	e715      	b.n	800b6fa <_scanf_float+0x86>
 800b8ce:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b8d2:	2b06      	cmp	r3, #6
 800b8d4:	d80a      	bhi.n	800b8ec <_scanf_float+0x278>
 800b8d6:	f1bb 0f02 	cmp.w	fp, #2
 800b8da:	d968      	bls.n	800b9ae <_scanf_float+0x33a>
 800b8dc:	f1ab 0b03 	sub.w	fp, fp, #3
 800b8e0:	fa5f fb8b 	uxtb.w	fp, fp
 800b8e4:	eba5 0b0b 	sub.w	fp, r5, fp
 800b8e8:	455d      	cmp	r5, fp
 800b8ea:	d14b      	bne.n	800b984 <_scanf_float+0x310>
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	05da      	lsls	r2, r3, #23
 800b8f0:	d51f      	bpl.n	800b932 <_scanf_float+0x2be>
 800b8f2:	055b      	lsls	r3, r3, #21
 800b8f4:	d468      	bmi.n	800b9c8 <_scanf_float+0x354>
 800b8f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b8fa:	6923      	ldr	r3, [r4, #16]
 800b8fc:	2965      	cmp	r1, #101	; 0x65
 800b8fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800b902:	f105 3bff 	add.w	fp, r5, #4294967295
 800b906:	6123      	str	r3, [r4, #16]
 800b908:	d00d      	beq.n	800b926 <_scanf_float+0x2b2>
 800b90a:	2945      	cmp	r1, #69	; 0x45
 800b90c:	d00b      	beq.n	800b926 <_scanf_float+0x2b2>
 800b90e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b912:	4632      	mov	r2, r6
 800b914:	4638      	mov	r0, r7
 800b916:	4798      	blx	r3
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b91e:	3b01      	subs	r3, #1
 800b920:	f1a5 0b02 	sub.w	fp, r5, #2
 800b924:	6123      	str	r3, [r4, #16]
 800b926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b92a:	4632      	mov	r2, r6
 800b92c:	4638      	mov	r0, r7
 800b92e:	4798      	blx	r3
 800b930:	465d      	mov	r5, fp
 800b932:	6826      	ldr	r6, [r4, #0]
 800b934:	f016 0610 	ands.w	r6, r6, #16
 800b938:	d17a      	bne.n	800ba30 <_scanf_float+0x3bc>
 800b93a:	702e      	strb	r6, [r5, #0]
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b946:	d142      	bne.n	800b9ce <_scanf_float+0x35a>
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	eba9 0303 	sub.w	r3, r9, r3
 800b94e:	425a      	negs	r2, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d149      	bne.n	800b9e8 <_scanf_float+0x374>
 800b954:	2200      	movs	r2, #0
 800b956:	4641      	mov	r1, r8
 800b958:	4638      	mov	r0, r7
 800b95a:	f000 fea5 	bl	800c6a8 <_strtod_r>
 800b95e:	6825      	ldr	r5, [r4, #0]
 800b960:	f8da 3000 	ldr.w	r3, [sl]
 800b964:	f015 0f02 	tst.w	r5, #2
 800b968:	f103 0204 	add.w	r2, r3, #4
 800b96c:	ec59 8b10 	vmov	r8, r9, d0
 800b970:	f8ca 2000 	str.w	r2, [sl]
 800b974:	d043      	beq.n	800b9fe <_scanf_float+0x38a>
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	e9c3 8900 	strd	r8, r9, [r3]
 800b97c:	68e3      	ldr	r3, [r4, #12]
 800b97e:	3301      	adds	r3, #1
 800b980:	60e3      	str	r3, [r4, #12]
 800b982:	e6be      	b.n	800b702 <_scanf_float+0x8e>
 800b984:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b988:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b98c:	4632      	mov	r2, r6
 800b98e:	4638      	mov	r0, r7
 800b990:	4798      	blx	r3
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	3b01      	subs	r3, #1
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	e7a6      	b.n	800b8e8 <_scanf_float+0x274>
 800b99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b99e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b9a2:	4632      	mov	r2, r6
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	4798      	blx	r3
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	6123      	str	r3, [r4, #16]
 800b9ae:	4545      	cmp	r5, r8
 800b9b0:	d8f3      	bhi.n	800b99a <_scanf_float+0x326>
 800b9b2:	e6a5      	b.n	800b700 <_scanf_float+0x8c>
 800b9b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b9bc:	4632      	mov	r2, r6
 800b9be:	4638      	mov	r0, r7
 800b9c0:	4798      	blx	r3
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	6123      	str	r3, [r4, #16]
 800b9c8:	4545      	cmp	r5, r8
 800b9ca:	d8f3      	bhi.n	800b9b4 <_scanf_float+0x340>
 800b9cc:	e698      	b.n	800b700 <_scanf_float+0x8c>
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d0bf      	beq.n	800b954 <_scanf_float+0x2e0>
 800b9d4:	9904      	ldr	r1, [sp, #16]
 800b9d6:	230a      	movs	r3, #10
 800b9d8:	4632      	mov	r2, r6
 800b9da:	3101      	adds	r1, #1
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f000 feef 	bl	800c7c0 <_strtol_r>
 800b9e2:	9b03      	ldr	r3, [sp, #12]
 800b9e4:	9d04      	ldr	r5, [sp, #16]
 800b9e6:	1ac2      	subs	r2, r0, r3
 800b9e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b9ec:	429d      	cmp	r5, r3
 800b9ee:	bf28      	it	cs
 800b9f0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b9f4:	490f      	ldr	r1, [pc, #60]	; (800ba34 <_scanf_float+0x3c0>)
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f824 	bl	800ba44 <siprintf>
 800b9fc:	e7aa      	b.n	800b954 <_scanf_float+0x2e0>
 800b9fe:	f015 0504 	ands.w	r5, r5, #4
 800ba02:	d1b8      	bne.n	800b976 <_scanf_float+0x302>
 800ba04:	681f      	ldr	r7, [r3, #0]
 800ba06:	ee10 2a10 	vmov	r2, s0
 800ba0a:	464b      	mov	r3, r9
 800ba0c:	ee10 0a10 	vmov	r0, s0
 800ba10:	4649      	mov	r1, r9
 800ba12:	f7f5 f88b 	bl	8000b2c <__aeabi_dcmpun>
 800ba16:	b128      	cbz	r0, 800ba24 <_scanf_float+0x3b0>
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f000 f80d 	bl	800ba38 <nanf>
 800ba1e:	ed87 0a00 	vstr	s0, [r7]
 800ba22:	e7ab      	b.n	800b97c <_scanf_float+0x308>
 800ba24:	4640      	mov	r0, r8
 800ba26:	4649      	mov	r1, r9
 800ba28:	f7f5 f8de 	bl	8000be8 <__aeabi_d2f>
 800ba2c:	6038      	str	r0, [r7, #0]
 800ba2e:	e7a5      	b.n	800b97c <_scanf_float+0x308>
 800ba30:	2600      	movs	r6, #0
 800ba32:	e666      	b.n	800b702 <_scanf_float+0x8e>
 800ba34:	0800ed84 	.word	0x0800ed84

0800ba38 <nanf>:
 800ba38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba40 <nanf+0x8>
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	7fc00000 	.word	0x7fc00000

0800ba44 <siprintf>:
 800ba44:	b40e      	push	{r1, r2, r3}
 800ba46:	b500      	push	{lr}
 800ba48:	b09c      	sub	sp, #112	; 0x70
 800ba4a:	ab1d      	add	r3, sp, #116	; 0x74
 800ba4c:	9002      	str	r0, [sp, #8]
 800ba4e:	9006      	str	r0, [sp, #24]
 800ba50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba54:	4809      	ldr	r0, [pc, #36]	; (800ba7c <siprintf+0x38>)
 800ba56:	9107      	str	r1, [sp, #28]
 800ba58:	9104      	str	r1, [sp, #16]
 800ba5a:	4909      	ldr	r1, [pc, #36]	; (800ba80 <siprintf+0x3c>)
 800ba5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba60:	9105      	str	r1, [sp, #20]
 800ba62:	6800      	ldr	r0, [r0, #0]
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	a902      	add	r1, sp, #8
 800ba68:	f002 fd70 	bl	800e54c <_svfiprintf_r>
 800ba6c:	9b02      	ldr	r3, [sp, #8]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	b01c      	add	sp, #112	; 0x70
 800ba74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba78:	b003      	add	sp, #12
 800ba7a:	4770      	bx	lr
 800ba7c:	2000000c 	.word	0x2000000c
 800ba80:	ffff0208 	.word	0xffff0208

0800ba84 <sulp>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	4604      	mov	r4, r0
 800ba88:	460d      	mov	r5, r1
 800ba8a:	ec45 4b10 	vmov	d0, r4, r5
 800ba8e:	4616      	mov	r6, r2
 800ba90:	f002 fb18 	bl	800e0c4 <__ulp>
 800ba94:	ec51 0b10 	vmov	r0, r1, d0
 800ba98:	b17e      	cbz	r6, 800baba <sulp+0x36>
 800ba9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dd09      	ble.n	800baba <sulp+0x36>
 800baa6:	051b      	lsls	r3, r3, #20
 800baa8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800baac:	2400      	movs	r4, #0
 800baae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bab2:	4622      	mov	r2, r4
 800bab4:	462b      	mov	r3, r5
 800bab6:	f7f4 fd9f 	bl	80005f8 <__aeabi_dmul>
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	0000      	movs	r0, r0
	...

0800bac0 <_strtod_l>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	461f      	mov	r7, r3
 800bac6:	b0a1      	sub	sp, #132	; 0x84
 800bac8:	2300      	movs	r3, #0
 800baca:	4681      	mov	r9, r0
 800bacc:	4638      	mov	r0, r7
 800bace:	460e      	mov	r6, r1
 800bad0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bad2:	931c      	str	r3, [sp, #112]	; 0x70
 800bad4:	f001 fff5 	bl	800dac2 <__localeconv_l>
 800bad8:	4680      	mov	r8, r0
 800bada:	6800      	ldr	r0, [r0, #0]
 800badc:	f7f4 fb78 	bl	80001d0 <strlen>
 800bae0:	f04f 0a00 	mov.w	sl, #0
 800bae4:	4604      	mov	r4, r0
 800bae6:	f04f 0b00 	mov.w	fp, #0
 800baea:	961b      	str	r6, [sp, #108]	; 0x6c
 800baec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	2a0d      	cmp	r2, #13
 800baf2:	d832      	bhi.n	800bb5a <_strtod_l+0x9a>
 800baf4:	2a09      	cmp	r2, #9
 800baf6:	d236      	bcs.n	800bb66 <_strtod_l+0xa6>
 800baf8:	2a00      	cmp	r2, #0
 800bafa:	d03e      	beq.n	800bb7a <_strtod_l+0xba>
 800bafc:	2300      	movs	r3, #0
 800bafe:	930d      	str	r3, [sp, #52]	; 0x34
 800bb00:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bb02:	782b      	ldrb	r3, [r5, #0]
 800bb04:	2b30      	cmp	r3, #48	; 0x30
 800bb06:	f040 80ac 	bne.w	800bc62 <_strtod_l+0x1a2>
 800bb0a:	786b      	ldrb	r3, [r5, #1]
 800bb0c:	2b58      	cmp	r3, #88	; 0x58
 800bb0e:	d001      	beq.n	800bb14 <_strtod_l+0x54>
 800bb10:	2b78      	cmp	r3, #120	; 0x78
 800bb12:	d167      	bne.n	800bbe4 <_strtod_l+0x124>
 800bb14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	ab1c      	add	r3, sp, #112	; 0x70
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	9702      	str	r7, [sp, #8]
 800bb1e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb20:	4a88      	ldr	r2, [pc, #544]	; (800bd44 <_strtod_l+0x284>)
 800bb22:	a91b      	add	r1, sp, #108	; 0x6c
 800bb24:	4648      	mov	r0, r9
 800bb26:	f001 fcf2 	bl	800d50e <__gethex>
 800bb2a:	f010 0407 	ands.w	r4, r0, #7
 800bb2e:	4606      	mov	r6, r0
 800bb30:	d005      	beq.n	800bb3e <_strtod_l+0x7e>
 800bb32:	2c06      	cmp	r4, #6
 800bb34:	d12b      	bne.n	800bb8e <_strtod_l+0xce>
 800bb36:	3501      	adds	r5, #1
 800bb38:	2300      	movs	r3, #0
 800bb3a:	951b      	str	r5, [sp, #108]	; 0x6c
 800bb3c:	930d      	str	r3, [sp, #52]	; 0x34
 800bb3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f040 859a 	bne.w	800c67a <_strtod_l+0xbba>
 800bb46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb48:	b1e3      	cbz	r3, 800bb84 <_strtod_l+0xc4>
 800bb4a:	4652      	mov	r2, sl
 800bb4c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb50:	ec43 2b10 	vmov	d0, r2, r3
 800bb54:	b021      	add	sp, #132	; 0x84
 800bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5a:	2a2b      	cmp	r2, #43	; 0x2b
 800bb5c:	d015      	beq.n	800bb8a <_strtod_l+0xca>
 800bb5e:	2a2d      	cmp	r2, #45	; 0x2d
 800bb60:	d004      	beq.n	800bb6c <_strtod_l+0xac>
 800bb62:	2a20      	cmp	r2, #32
 800bb64:	d1ca      	bne.n	800bafc <_strtod_l+0x3c>
 800bb66:	3301      	adds	r3, #1
 800bb68:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb6a:	e7bf      	b.n	800baec <_strtod_l+0x2c>
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	920d      	str	r2, [sp, #52]	; 0x34
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb74:	785b      	ldrb	r3, [r3, #1]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1c2      	bne.n	800bb00 <_strtod_l+0x40>
 800bb7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb7c:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f040 8579 	bne.w	800c676 <_strtod_l+0xbb6>
 800bb84:	4652      	mov	r2, sl
 800bb86:	465b      	mov	r3, fp
 800bb88:	e7e2      	b.n	800bb50 <_strtod_l+0x90>
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	e7ef      	b.n	800bb6e <_strtod_l+0xae>
 800bb8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb90:	b13a      	cbz	r2, 800bba2 <_strtod_l+0xe2>
 800bb92:	2135      	movs	r1, #53	; 0x35
 800bb94:	a81e      	add	r0, sp, #120	; 0x78
 800bb96:	f002 fb8d 	bl	800e2b4 <__copybits>
 800bb9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb9c:	4648      	mov	r0, r9
 800bb9e:	f001 fffa 	bl	800db96 <_Bfree>
 800bba2:	3c01      	subs	r4, #1
 800bba4:	2c04      	cmp	r4, #4
 800bba6:	d806      	bhi.n	800bbb6 <_strtod_l+0xf6>
 800bba8:	e8df f004 	tbb	[pc, r4]
 800bbac:	1714030a 	.word	0x1714030a
 800bbb0:	0a          	.byte	0x0a
 800bbb1:	00          	.byte	0x00
 800bbb2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bbb6:	0730      	lsls	r0, r6, #28
 800bbb8:	d5c1      	bpl.n	800bb3e <_strtod_l+0x7e>
 800bbba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bbbe:	e7be      	b.n	800bb3e <_strtod_l+0x7e>
 800bbc0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bbc4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bbc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bbca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bbce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bbd2:	e7f0      	b.n	800bbb6 <_strtod_l+0xf6>
 800bbd4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bd48 <_strtod_l+0x288>
 800bbd8:	e7ed      	b.n	800bbb6 <_strtod_l+0xf6>
 800bbda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bbde:	f04f 3aff 	mov.w	sl, #4294967295
 800bbe2:	e7e8      	b.n	800bbb6 <_strtod_l+0xf6>
 800bbe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bbea:	785b      	ldrb	r3, [r3, #1]
 800bbec:	2b30      	cmp	r3, #48	; 0x30
 800bbee:	d0f9      	beq.n	800bbe4 <_strtod_l+0x124>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d0a4      	beq.n	800bb3e <_strtod_l+0x7e>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	2500      	movs	r5, #0
 800bbf8:	9306      	str	r3, [sp, #24]
 800bbfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbfc:	9308      	str	r3, [sp, #32]
 800bbfe:	9507      	str	r5, [sp, #28]
 800bc00:	9505      	str	r5, [sp, #20]
 800bc02:	220a      	movs	r2, #10
 800bc04:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bc06:	7807      	ldrb	r7, [r0, #0]
 800bc08:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bc0c:	b2d9      	uxtb	r1, r3
 800bc0e:	2909      	cmp	r1, #9
 800bc10:	d929      	bls.n	800bc66 <_strtod_l+0x1a6>
 800bc12:	4622      	mov	r2, r4
 800bc14:	f8d8 1000 	ldr.w	r1, [r8]
 800bc18:	f002 fda0 	bl	800e75c <strncmp>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d031      	beq.n	800bc84 <_strtod_l+0x1c4>
 800bc20:	2000      	movs	r0, #0
 800bc22:	9c05      	ldr	r4, [sp, #20]
 800bc24:	9004      	str	r0, [sp, #16]
 800bc26:	463b      	mov	r3, r7
 800bc28:	4602      	mov	r2, r0
 800bc2a:	2b65      	cmp	r3, #101	; 0x65
 800bc2c:	d001      	beq.n	800bc32 <_strtod_l+0x172>
 800bc2e:	2b45      	cmp	r3, #69	; 0x45
 800bc30:	d114      	bne.n	800bc5c <_strtod_l+0x19c>
 800bc32:	b924      	cbnz	r4, 800bc3e <_strtod_l+0x17e>
 800bc34:	b910      	cbnz	r0, 800bc3c <_strtod_l+0x17c>
 800bc36:	9b06      	ldr	r3, [sp, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d09e      	beq.n	800bb7a <_strtod_l+0xba>
 800bc3c:	2400      	movs	r4, #0
 800bc3e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bc40:	1c73      	adds	r3, r6, #1
 800bc42:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc44:	7873      	ldrb	r3, [r6, #1]
 800bc46:	2b2b      	cmp	r3, #43	; 0x2b
 800bc48:	d078      	beq.n	800bd3c <_strtod_l+0x27c>
 800bc4a:	2b2d      	cmp	r3, #45	; 0x2d
 800bc4c:	d070      	beq.n	800bd30 <_strtod_l+0x270>
 800bc4e:	f04f 0c00 	mov.w	ip, #0
 800bc52:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bc56:	2f09      	cmp	r7, #9
 800bc58:	d97c      	bls.n	800bd54 <_strtod_l+0x294>
 800bc5a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bc5c:	f04f 0e00 	mov.w	lr, #0
 800bc60:	e09a      	b.n	800bd98 <_strtod_l+0x2d8>
 800bc62:	2300      	movs	r3, #0
 800bc64:	e7c7      	b.n	800bbf6 <_strtod_l+0x136>
 800bc66:	9905      	ldr	r1, [sp, #20]
 800bc68:	2908      	cmp	r1, #8
 800bc6a:	bfdd      	ittte	le
 800bc6c:	9907      	ldrle	r1, [sp, #28]
 800bc6e:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc72:	9307      	strle	r3, [sp, #28]
 800bc74:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bc78:	9b05      	ldr	r3, [sp, #20]
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	9305      	str	r3, [sp, #20]
 800bc80:	901b      	str	r0, [sp, #108]	; 0x6c
 800bc82:	e7bf      	b.n	800bc04 <_strtod_l+0x144>
 800bc84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc86:	191a      	adds	r2, r3, r4
 800bc88:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc8a:	9a05      	ldr	r2, [sp, #20]
 800bc8c:	5d1b      	ldrb	r3, [r3, r4]
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d037      	beq.n	800bd02 <_strtod_l+0x242>
 800bc92:	9c05      	ldr	r4, [sp, #20]
 800bc94:	4602      	mov	r2, r0
 800bc96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bc9a:	2909      	cmp	r1, #9
 800bc9c:	d913      	bls.n	800bcc6 <_strtod_l+0x206>
 800bc9e:	2101      	movs	r1, #1
 800bca0:	9104      	str	r1, [sp, #16]
 800bca2:	e7c2      	b.n	800bc2a <_strtod_l+0x16a>
 800bca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcaa:	785b      	ldrb	r3, [r3, #1]
 800bcac:	3001      	adds	r0, #1
 800bcae:	2b30      	cmp	r3, #48	; 0x30
 800bcb0:	d0f8      	beq.n	800bca4 <_strtod_l+0x1e4>
 800bcb2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bcb6:	2a08      	cmp	r2, #8
 800bcb8:	f200 84e4 	bhi.w	800c684 <_strtod_l+0xbc4>
 800bcbc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bcbe:	9208      	str	r2, [sp, #32]
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bcca:	f100 0101 	add.w	r1, r0, #1
 800bcce:	d012      	beq.n	800bcf6 <_strtod_l+0x236>
 800bcd0:	440a      	add	r2, r1
 800bcd2:	eb00 0c04 	add.w	ip, r0, r4
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	270a      	movs	r7, #10
 800bcda:	458c      	cmp	ip, r1
 800bcdc:	d113      	bne.n	800bd06 <_strtod_l+0x246>
 800bcde:	1821      	adds	r1, r4, r0
 800bce0:	2908      	cmp	r1, #8
 800bce2:	f104 0401 	add.w	r4, r4, #1
 800bce6:	4404      	add	r4, r0
 800bce8:	dc19      	bgt.n	800bd1e <_strtod_l+0x25e>
 800bcea:	9b07      	ldr	r3, [sp, #28]
 800bcec:	210a      	movs	r1, #10
 800bcee:	fb01 e303 	mla	r3, r1, r3, lr
 800bcf2:	9307      	str	r3, [sp, #28]
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcf8:	1c58      	adds	r0, r3, #1
 800bcfa:	901b      	str	r0, [sp, #108]	; 0x6c
 800bcfc:	785b      	ldrb	r3, [r3, #1]
 800bcfe:	4608      	mov	r0, r1
 800bd00:	e7c9      	b.n	800bc96 <_strtod_l+0x1d6>
 800bd02:	9805      	ldr	r0, [sp, #20]
 800bd04:	e7d3      	b.n	800bcae <_strtod_l+0x1ee>
 800bd06:	2908      	cmp	r1, #8
 800bd08:	f101 0101 	add.w	r1, r1, #1
 800bd0c:	dc03      	bgt.n	800bd16 <_strtod_l+0x256>
 800bd0e:	9b07      	ldr	r3, [sp, #28]
 800bd10:	437b      	muls	r3, r7
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	e7e1      	b.n	800bcda <_strtod_l+0x21a>
 800bd16:	2910      	cmp	r1, #16
 800bd18:	bfd8      	it	le
 800bd1a:	437d      	mulle	r5, r7
 800bd1c:	e7dd      	b.n	800bcda <_strtod_l+0x21a>
 800bd1e:	2c10      	cmp	r4, #16
 800bd20:	bfdc      	itt	le
 800bd22:	210a      	movle	r1, #10
 800bd24:	fb01 e505 	mlale	r5, r1, r5, lr
 800bd28:	e7e4      	b.n	800bcf4 <_strtod_l+0x234>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	9304      	str	r3, [sp, #16]
 800bd2e:	e781      	b.n	800bc34 <_strtod_l+0x174>
 800bd30:	f04f 0c01 	mov.w	ip, #1
 800bd34:	1cb3      	adds	r3, r6, #2
 800bd36:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd38:	78b3      	ldrb	r3, [r6, #2]
 800bd3a:	e78a      	b.n	800bc52 <_strtod_l+0x192>
 800bd3c:	f04f 0c00 	mov.w	ip, #0
 800bd40:	e7f8      	b.n	800bd34 <_strtod_l+0x274>
 800bd42:	bf00      	nop
 800bd44:	0800ed8c 	.word	0x0800ed8c
 800bd48:	7ff00000 	.word	0x7ff00000
 800bd4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd4e:	1c5f      	adds	r7, r3, #1
 800bd50:	971b      	str	r7, [sp, #108]	; 0x6c
 800bd52:	785b      	ldrb	r3, [r3, #1]
 800bd54:	2b30      	cmp	r3, #48	; 0x30
 800bd56:	d0f9      	beq.n	800bd4c <_strtod_l+0x28c>
 800bd58:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bd5c:	2f08      	cmp	r7, #8
 800bd5e:	f63f af7d 	bhi.w	800bc5c <_strtod_l+0x19c>
 800bd62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bd66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd68:	930a      	str	r3, [sp, #40]	; 0x28
 800bd6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd6c:	1c5f      	adds	r7, r3, #1
 800bd6e:	971b      	str	r7, [sp, #108]	; 0x6c
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bd76:	f1b8 0f09 	cmp.w	r8, #9
 800bd7a:	d937      	bls.n	800bdec <_strtod_l+0x32c>
 800bd7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd7e:	1a7f      	subs	r7, r7, r1
 800bd80:	2f08      	cmp	r7, #8
 800bd82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bd86:	dc37      	bgt.n	800bdf8 <_strtod_l+0x338>
 800bd88:	45be      	cmp	lr, r7
 800bd8a:	bfa8      	it	ge
 800bd8c:	46be      	movge	lr, r7
 800bd8e:	f1bc 0f00 	cmp.w	ip, #0
 800bd92:	d001      	beq.n	800bd98 <_strtod_l+0x2d8>
 800bd94:	f1ce 0e00 	rsb	lr, lr, #0
 800bd98:	2c00      	cmp	r4, #0
 800bd9a:	d151      	bne.n	800be40 <_strtod_l+0x380>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f47f aece 	bne.w	800bb3e <_strtod_l+0x7e>
 800bda2:	9a06      	ldr	r2, [sp, #24]
 800bda4:	2a00      	cmp	r2, #0
 800bda6:	f47f aeca 	bne.w	800bb3e <_strtod_l+0x7e>
 800bdaa:	9a04      	ldr	r2, [sp, #16]
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	f47f aee4 	bne.w	800bb7a <_strtod_l+0xba>
 800bdb2:	2b4e      	cmp	r3, #78	; 0x4e
 800bdb4:	d027      	beq.n	800be06 <_strtod_l+0x346>
 800bdb6:	dc21      	bgt.n	800bdfc <_strtod_l+0x33c>
 800bdb8:	2b49      	cmp	r3, #73	; 0x49
 800bdba:	f47f aede 	bne.w	800bb7a <_strtod_l+0xba>
 800bdbe:	49a0      	ldr	r1, [pc, #640]	; (800c040 <_strtod_l+0x580>)
 800bdc0:	a81b      	add	r0, sp, #108	; 0x6c
 800bdc2:	f001 fdd7 	bl	800d974 <__match>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f43f aed7 	beq.w	800bb7a <_strtod_l+0xba>
 800bdcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdce:	499d      	ldr	r1, [pc, #628]	; (800c044 <_strtod_l+0x584>)
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	a81b      	add	r0, sp, #108	; 0x6c
 800bdd4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bdd6:	f001 fdcd 	bl	800d974 <__match>
 800bdda:	b910      	cbnz	r0, 800bde2 <_strtod_l+0x322>
 800bddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdde:	3301      	adds	r3, #1
 800bde0:	931b      	str	r3, [sp, #108]	; 0x6c
 800bde2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c058 <_strtod_l+0x598>
 800bde6:	f04f 0a00 	mov.w	sl, #0
 800bdea:	e6a8      	b.n	800bb3e <_strtod_l+0x7e>
 800bdec:	210a      	movs	r1, #10
 800bdee:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bdf2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bdf6:	e7b8      	b.n	800bd6a <_strtod_l+0x2aa>
 800bdf8:	46be      	mov	lr, r7
 800bdfa:	e7c8      	b.n	800bd8e <_strtod_l+0x2ce>
 800bdfc:	2b69      	cmp	r3, #105	; 0x69
 800bdfe:	d0de      	beq.n	800bdbe <_strtod_l+0x2fe>
 800be00:	2b6e      	cmp	r3, #110	; 0x6e
 800be02:	f47f aeba 	bne.w	800bb7a <_strtod_l+0xba>
 800be06:	4990      	ldr	r1, [pc, #576]	; (800c048 <_strtod_l+0x588>)
 800be08:	a81b      	add	r0, sp, #108	; 0x6c
 800be0a:	f001 fdb3 	bl	800d974 <__match>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f43f aeb3 	beq.w	800bb7a <_strtod_l+0xba>
 800be14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b28      	cmp	r3, #40	; 0x28
 800be1a:	d10e      	bne.n	800be3a <_strtod_l+0x37a>
 800be1c:	aa1e      	add	r2, sp, #120	; 0x78
 800be1e:	498b      	ldr	r1, [pc, #556]	; (800c04c <_strtod_l+0x58c>)
 800be20:	a81b      	add	r0, sp, #108	; 0x6c
 800be22:	f001 fdbb 	bl	800d99c <__hexnan>
 800be26:	2805      	cmp	r0, #5
 800be28:	d107      	bne.n	800be3a <_strtod_l+0x37a>
 800be2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be2c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800be30:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800be34:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800be38:	e681      	b.n	800bb3e <_strtod_l+0x7e>
 800be3a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c060 <_strtod_l+0x5a0>
 800be3e:	e7d2      	b.n	800bde6 <_strtod_l+0x326>
 800be40:	ebae 0302 	sub.w	r3, lr, r2
 800be44:	9306      	str	r3, [sp, #24]
 800be46:	9b05      	ldr	r3, [sp, #20]
 800be48:	9807      	ldr	r0, [sp, #28]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	bf08      	it	eq
 800be4e:	4623      	moveq	r3, r4
 800be50:	2c10      	cmp	r4, #16
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	46a0      	mov	r8, r4
 800be56:	bfa8      	it	ge
 800be58:	f04f 0810 	movge.w	r8, #16
 800be5c:	f7f4 fb52 	bl	8000504 <__aeabi_ui2d>
 800be60:	2c09      	cmp	r4, #9
 800be62:	4682      	mov	sl, r0
 800be64:	468b      	mov	fp, r1
 800be66:	dc13      	bgt.n	800be90 <_strtod_l+0x3d0>
 800be68:	9b06      	ldr	r3, [sp, #24]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f43f ae67 	beq.w	800bb3e <_strtod_l+0x7e>
 800be70:	9b06      	ldr	r3, [sp, #24]
 800be72:	dd7a      	ble.n	800bf6a <_strtod_l+0x4aa>
 800be74:	2b16      	cmp	r3, #22
 800be76:	dc61      	bgt.n	800bf3c <_strtod_l+0x47c>
 800be78:	4a75      	ldr	r2, [pc, #468]	; (800c050 <_strtod_l+0x590>)
 800be7a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800be7e:	e9de 0100 	ldrd	r0, r1, [lr]
 800be82:	4652      	mov	r2, sl
 800be84:	465b      	mov	r3, fp
 800be86:	f7f4 fbb7 	bl	80005f8 <__aeabi_dmul>
 800be8a:	4682      	mov	sl, r0
 800be8c:	468b      	mov	fp, r1
 800be8e:	e656      	b.n	800bb3e <_strtod_l+0x7e>
 800be90:	4b6f      	ldr	r3, [pc, #444]	; (800c050 <_strtod_l+0x590>)
 800be92:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be9a:	f7f4 fbad 	bl	80005f8 <__aeabi_dmul>
 800be9e:	4606      	mov	r6, r0
 800bea0:	4628      	mov	r0, r5
 800bea2:	460f      	mov	r7, r1
 800bea4:	f7f4 fb2e 	bl	8000504 <__aeabi_ui2d>
 800bea8:	4602      	mov	r2, r0
 800beaa:	460b      	mov	r3, r1
 800beac:	4630      	mov	r0, r6
 800beae:	4639      	mov	r1, r7
 800beb0:	f7f4 f9ec 	bl	800028c <__adddf3>
 800beb4:	2c0f      	cmp	r4, #15
 800beb6:	4682      	mov	sl, r0
 800beb8:	468b      	mov	fp, r1
 800beba:	ddd5      	ble.n	800be68 <_strtod_l+0x3a8>
 800bebc:	9b06      	ldr	r3, [sp, #24]
 800bebe:	eba4 0808 	sub.w	r8, r4, r8
 800bec2:	4498      	add	r8, r3
 800bec4:	f1b8 0f00 	cmp.w	r8, #0
 800bec8:	f340 8096 	ble.w	800bff8 <_strtod_l+0x538>
 800becc:	f018 030f 	ands.w	r3, r8, #15
 800bed0:	d00a      	beq.n	800bee8 <_strtod_l+0x428>
 800bed2:	495f      	ldr	r1, [pc, #380]	; (800c050 <_strtod_l+0x590>)
 800bed4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bed8:	4652      	mov	r2, sl
 800beda:	465b      	mov	r3, fp
 800bedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bee0:	f7f4 fb8a 	bl	80005f8 <__aeabi_dmul>
 800bee4:	4682      	mov	sl, r0
 800bee6:	468b      	mov	fp, r1
 800bee8:	f038 080f 	bics.w	r8, r8, #15
 800beec:	d073      	beq.n	800bfd6 <_strtod_l+0x516>
 800beee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bef2:	dd47      	ble.n	800bf84 <_strtod_l+0x4c4>
 800bef4:	2400      	movs	r4, #0
 800bef6:	46a0      	mov	r8, r4
 800bef8:	9407      	str	r4, [sp, #28]
 800befa:	9405      	str	r4, [sp, #20]
 800befc:	2322      	movs	r3, #34	; 0x22
 800befe:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c058 <_strtod_l+0x598>
 800bf02:	f8c9 3000 	str.w	r3, [r9]
 800bf06:	f04f 0a00 	mov.w	sl, #0
 800bf0a:	9b07      	ldr	r3, [sp, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f43f ae16 	beq.w	800bb3e <_strtod_l+0x7e>
 800bf12:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf14:	4648      	mov	r0, r9
 800bf16:	f001 fe3e 	bl	800db96 <_Bfree>
 800bf1a:	9905      	ldr	r1, [sp, #20]
 800bf1c:	4648      	mov	r0, r9
 800bf1e:	f001 fe3a 	bl	800db96 <_Bfree>
 800bf22:	4641      	mov	r1, r8
 800bf24:	4648      	mov	r0, r9
 800bf26:	f001 fe36 	bl	800db96 <_Bfree>
 800bf2a:	9907      	ldr	r1, [sp, #28]
 800bf2c:	4648      	mov	r0, r9
 800bf2e:	f001 fe32 	bl	800db96 <_Bfree>
 800bf32:	4621      	mov	r1, r4
 800bf34:	4648      	mov	r0, r9
 800bf36:	f001 fe2e 	bl	800db96 <_Bfree>
 800bf3a:	e600      	b.n	800bb3e <_strtod_l+0x7e>
 800bf3c:	9a06      	ldr	r2, [sp, #24]
 800bf3e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bf42:	4293      	cmp	r3, r2
 800bf44:	dbba      	blt.n	800bebc <_strtod_l+0x3fc>
 800bf46:	4d42      	ldr	r5, [pc, #264]	; (800c050 <_strtod_l+0x590>)
 800bf48:	f1c4 040f 	rsb	r4, r4, #15
 800bf4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bf50:	4652      	mov	r2, sl
 800bf52:	465b      	mov	r3, fp
 800bf54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf58:	f7f4 fb4e 	bl	80005f8 <__aeabi_dmul>
 800bf5c:	9b06      	ldr	r3, [sp, #24]
 800bf5e:	1b1c      	subs	r4, r3, r4
 800bf60:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bf64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf68:	e78d      	b.n	800be86 <_strtod_l+0x3c6>
 800bf6a:	f113 0f16 	cmn.w	r3, #22
 800bf6e:	dba5      	blt.n	800bebc <_strtod_l+0x3fc>
 800bf70:	4a37      	ldr	r2, [pc, #220]	; (800c050 <_strtod_l+0x590>)
 800bf72:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bf76:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bf7a:	4650      	mov	r0, sl
 800bf7c:	4659      	mov	r1, fp
 800bf7e:	f7f4 fc65 	bl	800084c <__aeabi_ddiv>
 800bf82:	e782      	b.n	800be8a <_strtod_l+0x3ca>
 800bf84:	2300      	movs	r3, #0
 800bf86:	4e33      	ldr	r6, [pc, #204]	; (800c054 <_strtod_l+0x594>)
 800bf88:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bf8c:	4650      	mov	r0, sl
 800bf8e:	4659      	mov	r1, fp
 800bf90:	461d      	mov	r5, r3
 800bf92:	f1b8 0f01 	cmp.w	r8, #1
 800bf96:	dc21      	bgt.n	800bfdc <_strtod_l+0x51c>
 800bf98:	b10b      	cbz	r3, 800bf9e <_strtod_l+0x4de>
 800bf9a:	4682      	mov	sl, r0
 800bf9c:	468b      	mov	fp, r1
 800bf9e:	4b2d      	ldr	r3, [pc, #180]	; (800c054 <_strtod_l+0x594>)
 800bfa0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bfa4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bfa8:	4652      	mov	r2, sl
 800bfaa:	465b      	mov	r3, fp
 800bfac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bfb0:	f7f4 fb22 	bl	80005f8 <__aeabi_dmul>
 800bfb4:	4b28      	ldr	r3, [pc, #160]	; (800c058 <_strtod_l+0x598>)
 800bfb6:	460a      	mov	r2, r1
 800bfb8:	400b      	ands	r3, r1
 800bfba:	4928      	ldr	r1, [pc, #160]	; (800c05c <_strtod_l+0x59c>)
 800bfbc:	428b      	cmp	r3, r1
 800bfbe:	4682      	mov	sl, r0
 800bfc0:	d898      	bhi.n	800bef4 <_strtod_l+0x434>
 800bfc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bfc6:	428b      	cmp	r3, r1
 800bfc8:	bf86      	itte	hi
 800bfca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c064 <_strtod_l+0x5a4>
 800bfce:	f04f 3aff 	movhi.w	sl, #4294967295
 800bfd2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9304      	str	r3, [sp, #16]
 800bfda:	e077      	b.n	800c0cc <_strtod_l+0x60c>
 800bfdc:	f018 0f01 	tst.w	r8, #1
 800bfe0:	d006      	beq.n	800bff0 <_strtod_l+0x530>
 800bfe2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f7f4 fb05 	bl	80005f8 <__aeabi_dmul>
 800bfee:	2301      	movs	r3, #1
 800bff0:	3501      	adds	r5, #1
 800bff2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bff6:	e7cc      	b.n	800bf92 <_strtod_l+0x4d2>
 800bff8:	d0ed      	beq.n	800bfd6 <_strtod_l+0x516>
 800bffa:	f1c8 0800 	rsb	r8, r8, #0
 800bffe:	f018 020f 	ands.w	r2, r8, #15
 800c002:	d00a      	beq.n	800c01a <_strtod_l+0x55a>
 800c004:	4b12      	ldr	r3, [pc, #72]	; (800c050 <_strtod_l+0x590>)
 800c006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c00a:	4650      	mov	r0, sl
 800c00c:	4659      	mov	r1, fp
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 fc1b 	bl	800084c <__aeabi_ddiv>
 800c016:	4682      	mov	sl, r0
 800c018:	468b      	mov	fp, r1
 800c01a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c01e:	d0da      	beq.n	800bfd6 <_strtod_l+0x516>
 800c020:	f1b8 0f1f 	cmp.w	r8, #31
 800c024:	dd20      	ble.n	800c068 <_strtod_l+0x5a8>
 800c026:	2400      	movs	r4, #0
 800c028:	46a0      	mov	r8, r4
 800c02a:	9407      	str	r4, [sp, #28]
 800c02c:	9405      	str	r4, [sp, #20]
 800c02e:	2322      	movs	r3, #34	; 0x22
 800c030:	f04f 0a00 	mov.w	sl, #0
 800c034:	f04f 0b00 	mov.w	fp, #0
 800c038:	f8c9 3000 	str.w	r3, [r9]
 800c03c:	e765      	b.n	800bf0a <_strtod_l+0x44a>
 800c03e:	bf00      	nop
 800c040:	0800ed55 	.word	0x0800ed55
 800c044:	0800ede3 	.word	0x0800ede3
 800c048:	0800ed5d 	.word	0x0800ed5d
 800c04c:	0800eda0 	.word	0x0800eda0
 800c050:	0800ee20 	.word	0x0800ee20
 800c054:	0800edf8 	.word	0x0800edf8
 800c058:	7ff00000 	.word	0x7ff00000
 800c05c:	7ca00000 	.word	0x7ca00000
 800c060:	fff80000 	.word	0xfff80000
 800c064:	7fefffff 	.word	0x7fefffff
 800c068:	f018 0310 	ands.w	r3, r8, #16
 800c06c:	bf18      	it	ne
 800c06e:	236a      	movne	r3, #106	; 0x6a
 800c070:	4da0      	ldr	r5, [pc, #640]	; (800c2f4 <_strtod_l+0x834>)
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	4650      	mov	r0, sl
 800c076:	4659      	mov	r1, fp
 800c078:	2300      	movs	r3, #0
 800c07a:	f1b8 0f00 	cmp.w	r8, #0
 800c07e:	f300 810a 	bgt.w	800c296 <_strtod_l+0x7d6>
 800c082:	b10b      	cbz	r3, 800c088 <_strtod_l+0x5c8>
 800c084:	4682      	mov	sl, r0
 800c086:	468b      	mov	fp, r1
 800c088:	9b04      	ldr	r3, [sp, #16]
 800c08a:	b1bb      	cbz	r3, 800c0bc <_strtod_l+0x5fc>
 800c08c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c090:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c094:	2b00      	cmp	r3, #0
 800c096:	4659      	mov	r1, fp
 800c098:	dd10      	ble.n	800c0bc <_strtod_l+0x5fc>
 800c09a:	2b1f      	cmp	r3, #31
 800c09c:	f340 8107 	ble.w	800c2ae <_strtod_l+0x7ee>
 800c0a0:	2b34      	cmp	r3, #52	; 0x34
 800c0a2:	bfde      	ittt	le
 800c0a4:	3b20      	suble	r3, #32
 800c0a6:	f04f 32ff 	movle.w	r2, #4294967295
 800c0aa:	fa02 f303 	lslle.w	r3, r2, r3
 800c0ae:	f04f 0a00 	mov.w	sl, #0
 800c0b2:	bfcc      	ite	gt
 800c0b4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c0b8:	ea03 0b01 	andle.w	fp, r3, r1
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2300      	movs	r3, #0
 800c0c0:	4650      	mov	r0, sl
 800c0c2:	4659      	mov	r1, fp
 800c0c4:	f7f4 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d1ac      	bne.n	800c026 <_strtod_l+0x566>
 800c0cc:	9b07      	ldr	r3, [sp, #28]
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	9a05      	ldr	r2, [sp, #20]
 800c0d2:	9908      	ldr	r1, [sp, #32]
 800c0d4:	4623      	mov	r3, r4
 800c0d6:	4648      	mov	r0, r9
 800c0d8:	f001 fdaf 	bl	800dc3a <__s2b>
 800c0dc:	9007      	str	r0, [sp, #28]
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f af08 	beq.w	800bef4 <_strtod_l+0x434>
 800c0e4:	9a06      	ldr	r2, [sp, #24]
 800c0e6:	9b06      	ldr	r3, [sp, #24]
 800c0e8:	2a00      	cmp	r2, #0
 800c0ea:	f1c3 0300 	rsb	r3, r3, #0
 800c0ee:	bfa8      	it	ge
 800c0f0:	2300      	movge	r3, #0
 800c0f2:	930e      	str	r3, [sp, #56]	; 0x38
 800c0f4:	2400      	movs	r4, #0
 800c0f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c0fa:	9316      	str	r3, [sp, #88]	; 0x58
 800c0fc:	46a0      	mov	r8, r4
 800c0fe:	9b07      	ldr	r3, [sp, #28]
 800c100:	4648      	mov	r0, r9
 800c102:	6859      	ldr	r1, [r3, #4]
 800c104:	f001 fd13 	bl	800db2e <_Balloc>
 800c108:	9005      	str	r0, [sp, #20]
 800c10a:	2800      	cmp	r0, #0
 800c10c:	f43f aef6 	beq.w	800befc <_strtod_l+0x43c>
 800c110:	9b07      	ldr	r3, [sp, #28]
 800c112:	691a      	ldr	r2, [r3, #16]
 800c114:	3202      	adds	r2, #2
 800c116:	f103 010c 	add.w	r1, r3, #12
 800c11a:	0092      	lsls	r2, r2, #2
 800c11c:	300c      	adds	r0, #12
 800c11e:	f001 fcfb 	bl	800db18 <memcpy>
 800c122:	aa1e      	add	r2, sp, #120	; 0x78
 800c124:	a91d      	add	r1, sp, #116	; 0x74
 800c126:	ec4b ab10 	vmov	d0, sl, fp
 800c12a:	4648      	mov	r0, r9
 800c12c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c130:	f002 f83e 	bl	800e1b0 <__d2b>
 800c134:	901c      	str	r0, [sp, #112]	; 0x70
 800c136:	2800      	cmp	r0, #0
 800c138:	f43f aee0 	beq.w	800befc <_strtod_l+0x43c>
 800c13c:	2101      	movs	r1, #1
 800c13e:	4648      	mov	r0, r9
 800c140:	f001 fe07 	bl	800dd52 <__i2b>
 800c144:	4680      	mov	r8, r0
 800c146:	2800      	cmp	r0, #0
 800c148:	f43f aed8 	beq.w	800befc <_strtod_l+0x43c>
 800c14c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c14e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c150:	2e00      	cmp	r6, #0
 800c152:	bfab      	itete	ge
 800c154:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c156:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c158:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c15a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c15c:	bfac      	ite	ge
 800c15e:	18f7      	addge	r7, r6, r3
 800c160:	1b9d      	sublt	r5, r3, r6
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	1af6      	subs	r6, r6, r3
 800c166:	4416      	add	r6, r2
 800c168:	4b63      	ldr	r3, [pc, #396]	; (800c2f8 <_strtod_l+0x838>)
 800c16a:	3e01      	subs	r6, #1
 800c16c:	429e      	cmp	r6, r3
 800c16e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c172:	f280 80af 	bge.w	800c2d4 <_strtod_l+0x814>
 800c176:	1b9b      	subs	r3, r3, r6
 800c178:	2b1f      	cmp	r3, #31
 800c17a:	eba2 0203 	sub.w	r2, r2, r3
 800c17e:	f04f 0101 	mov.w	r1, #1
 800c182:	f300 809b 	bgt.w	800c2bc <_strtod_l+0x7fc>
 800c186:	fa01 f303 	lsl.w	r3, r1, r3
 800c18a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c18c:	2300      	movs	r3, #0
 800c18e:	930a      	str	r3, [sp, #40]	; 0x28
 800c190:	18be      	adds	r6, r7, r2
 800c192:	9b04      	ldr	r3, [sp, #16]
 800c194:	42b7      	cmp	r7, r6
 800c196:	4415      	add	r5, r2
 800c198:	441d      	add	r5, r3
 800c19a:	463b      	mov	r3, r7
 800c19c:	bfa8      	it	ge
 800c19e:	4633      	movge	r3, r6
 800c1a0:	42ab      	cmp	r3, r5
 800c1a2:	bfa8      	it	ge
 800c1a4:	462b      	movge	r3, r5
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bfc2      	ittt	gt
 800c1aa:	1af6      	subgt	r6, r6, r3
 800c1ac:	1aed      	subgt	r5, r5, r3
 800c1ae:	1aff      	subgt	r7, r7, r3
 800c1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1b2:	b1bb      	cbz	r3, 800c1e4 <_strtod_l+0x724>
 800c1b4:	4641      	mov	r1, r8
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	4648      	mov	r0, r9
 800c1ba:	f001 fe69 	bl	800de90 <__pow5mult>
 800c1be:	4680      	mov	r8, r0
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	f43f ae9b 	beq.w	800befc <_strtod_l+0x43c>
 800c1c6:	4601      	mov	r1, r0
 800c1c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c1ca:	4648      	mov	r0, r9
 800c1cc:	f001 fdca 	bl	800dd64 <__multiply>
 800c1d0:	900c      	str	r0, [sp, #48]	; 0x30
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	f43f ae92 	beq.w	800befc <_strtod_l+0x43c>
 800c1d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1da:	4648      	mov	r0, r9
 800c1dc:	f001 fcdb 	bl	800db96 <_Bfree>
 800c1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1e2:	931c      	str	r3, [sp, #112]	; 0x70
 800c1e4:	2e00      	cmp	r6, #0
 800c1e6:	dc7a      	bgt.n	800c2de <_strtod_l+0x81e>
 800c1e8:	9b06      	ldr	r3, [sp, #24]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	dd08      	ble.n	800c200 <_strtod_l+0x740>
 800c1ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c1f0:	9905      	ldr	r1, [sp, #20]
 800c1f2:	4648      	mov	r0, r9
 800c1f4:	f001 fe4c 	bl	800de90 <__pow5mult>
 800c1f8:	9005      	str	r0, [sp, #20]
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	f43f ae7e 	beq.w	800befc <_strtod_l+0x43c>
 800c200:	2d00      	cmp	r5, #0
 800c202:	dd08      	ble.n	800c216 <_strtod_l+0x756>
 800c204:	462a      	mov	r2, r5
 800c206:	9905      	ldr	r1, [sp, #20]
 800c208:	4648      	mov	r0, r9
 800c20a:	f001 fe8f 	bl	800df2c <__lshift>
 800c20e:	9005      	str	r0, [sp, #20]
 800c210:	2800      	cmp	r0, #0
 800c212:	f43f ae73 	beq.w	800befc <_strtod_l+0x43c>
 800c216:	2f00      	cmp	r7, #0
 800c218:	dd08      	ble.n	800c22c <_strtod_l+0x76c>
 800c21a:	4641      	mov	r1, r8
 800c21c:	463a      	mov	r2, r7
 800c21e:	4648      	mov	r0, r9
 800c220:	f001 fe84 	bl	800df2c <__lshift>
 800c224:	4680      	mov	r8, r0
 800c226:	2800      	cmp	r0, #0
 800c228:	f43f ae68 	beq.w	800befc <_strtod_l+0x43c>
 800c22c:	9a05      	ldr	r2, [sp, #20]
 800c22e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c230:	4648      	mov	r0, r9
 800c232:	f001 fee9 	bl	800e008 <__mdiff>
 800c236:	4604      	mov	r4, r0
 800c238:	2800      	cmp	r0, #0
 800c23a:	f43f ae5f 	beq.w	800befc <_strtod_l+0x43c>
 800c23e:	68c3      	ldr	r3, [r0, #12]
 800c240:	930c      	str	r3, [sp, #48]	; 0x30
 800c242:	2300      	movs	r3, #0
 800c244:	60c3      	str	r3, [r0, #12]
 800c246:	4641      	mov	r1, r8
 800c248:	f001 fec4 	bl	800dfd4 <__mcmp>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	da55      	bge.n	800c2fc <_strtod_l+0x83c>
 800c250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c252:	b9e3      	cbnz	r3, 800c28e <_strtod_l+0x7ce>
 800c254:	f1ba 0f00 	cmp.w	sl, #0
 800c258:	d119      	bne.n	800c28e <_strtod_l+0x7ce>
 800c25a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c25e:	b9b3      	cbnz	r3, 800c28e <_strtod_l+0x7ce>
 800c260:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c264:	0d1b      	lsrs	r3, r3, #20
 800c266:	051b      	lsls	r3, r3, #20
 800c268:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c26c:	d90f      	bls.n	800c28e <_strtod_l+0x7ce>
 800c26e:	6963      	ldr	r3, [r4, #20]
 800c270:	b913      	cbnz	r3, 800c278 <_strtod_l+0x7b8>
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	2b01      	cmp	r3, #1
 800c276:	dd0a      	ble.n	800c28e <_strtod_l+0x7ce>
 800c278:	4621      	mov	r1, r4
 800c27a:	2201      	movs	r2, #1
 800c27c:	4648      	mov	r0, r9
 800c27e:	f001 fe55 	bl	800df2c <__lshift>
 800c282:	4641      	mov	r1, r8
 800c284:	4604      	mov	r4, r0
 800c286:	f001 fea5 	bl	800dfd4 <__mcmp>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	dc67      	bgt.n	800c35e <_strtod_l+0x89e>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d171      	bne.n	800c378 <_strtod_l+0x8b8>
 800c294:	e63d      	b.n	800bf12 <_strtod_l+0x452>
 800c296:	f018 0f01 	tst.w	r8, #1
 800c29a:	d004      	beq.n	800c2a6 <_strtod_l+0x7e6>
 800c29c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2a0:	f7f4 f9aa 	bl	80005f8 <__aeabi_dmul>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2aa:	3508      	adds	r5, #8
 800c2ac:	e6e5      	b.n	800c07a <_strtod_l+0x5ba>
 800c2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b6:	ea03 0a0a 	and.w	sl, r3, sl
 800c2ba:	e6ff      	b.n	800c0bc <_strtod_l+0x5fc>
 800c2bc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c2c0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c2c4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c2c8:	36e2      	adds	r6, #226	; 0xe2
 800c2ca:	fa01 f306 	lsl.w	r3, r1, r6
 800c2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d0:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2d2:	e75d      	b.n	800c190 <_strtod_l+0x6d0>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d8:	2301      	movs	r3, #1
 800c2da:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2dc:	e758      	b.n	800c190 <_strtod_l+0x6d0>
 800c2de:	4632      	mov	r2, r6
 800c2e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2e2:	4648      	mov	r0, r9
 800c2e4:	f001 fe22 	bl	800df2c <__lshift>
 800c2e8:	901c      	str	r0, [sp, #112]	; 0x70
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	f47f af7c 	bne.w	800c1e8 <_strtod_l+0x728>
 800c2f0:	e604      	b.n	800befc <_strtod_l+0x43c>
 800c2f2:	bf00      	nop
 800c2f4:	0800edb8 	.word	0x0800edb8
 800c2f8:	fffffc02 	.word	0xfffffc02
 800c2fc:	465d      	mov	r5, fp
 800c2fe:	f040 8086 	bne.w	800c40e <_strtod_l+0x94e>
 800c302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c308:	b32a      	cbz	r2, 800c356 <_strtod_l+0x896>
 800c30a:	4aaf      	ldr	r2, [pc, #700]	; (800c5c8 <_strtod_l+0xb08>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d153      	bne.n	800c3b8 <_strtod_l+0x8f8>
 800c310:	9b04      	ldr	r3, [sp, #16]
 800c312:	4650      	mov	r0, sl
 800c314:	b1d3      	cbz	r3, 800c34c <_strtod_l+0x88c>
 800c316:	4aad      	ldr	r2, [pc, #692]	; (800c5cc <_strtod_l+0xb0c>)
 800c318:	402a      	ands	r2, r5
 800c31a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c31e:	f04f 31ff 	mov.w	r1, #4294967295
 800c322:	d816      	bhi.n	800c352 <_strtod_l+0x892>
 800c324:	0d12      	lsrs	r2, r2, #20
 800c326:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c32a:	fa01 f303 	lsl.w	r3, r1, r3
 800c32e:	4298      	cmp	r0, r3
 800c330:	d142      	bne.n	800c3b8 <_strtod_l+0x8f8>
 800c332:	4ba7      	ldr	r3, [pc, #668]	; (800c5d0 <_strtod_l+0xb10>)
 800c334:	429d      	cmp	r5, r3
 800c336:	d102      	bne.n	800c33e <_strtod_l+0x87e>
 800c338:	3001      	adds	r0, #1
 800c33a:	f43f addf 	beq.w	800befc <_strtod_l+0x43c>
 800c33e:	4ba3      	ldr	r3, [pc, #652]	; (800c5cc <_strtod_l+0xb0c>)
 800c340:	402b      	ands	r3, r5
 800c342:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c346:	f04f 0a00 	mov.w	sl, #0
 800c34a:	e7a0      	b.n	800c28e <_strtod_l+0x7ce>
 800c34c:	f04f 33ff 	mov.w	r3, #4294967295
 800c350:	e7ed      	b.n	800c32e <_strtod_l+0x86e>
 800c352:	460b      	mov	r3, r1
 800c354:	e7eb      	b.n	800c32e <_strtod_l+0x86e>
 800c356:	bb7b      	cbnz	r3, 800c3b8 <_strtod_l+0x8f8>
 800c358:	f1ba 0f00 	cmp.w	sl, #0
 800c35c:	d12c      	bne.n	800c3b8 <_strtod_l+0x8f8>
 800c35e:	9904      	ldr	r1, [sp, #16]
 800c360:	4a9a      	ldr	r2, [pc, #616]	; (800c5cc <_strtod_l+0xb0c>)
 800c362:	465b      	mov	r3, fp
 800c364:	b1f1      	cbz	r1, 800c3a4 <_strtod_l+0x8e4>
 800c366:	ea02 010b 	and.w	r1, r2, fp
 800c36a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c36e:	dc19      	bgt.n	800c3a4 <_strtod_l+0x8e4>
 800c370:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c374:	f77f ae5b 	ble.w	800c02e <_strtod_l+0x56e>
 800c378:	4a96      	ldr	r2, [pc, #600]	; (800c5d4 <_strtod_l+0xb14>)
 800c37a:	2300      	movs	r3, #0
 800c37c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c380:	4650      	mov	r0, sl
 800c382:	4659      	mov	r1, fp
 800c384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c388:	f7f4 f936 	bl	80005f8 <__aeabi_dmul>
 800c38c:	4682      	mov	sl, r0
 800c38e:	468b      	mov	fp, r1
 800c390:	2900      	cmp	r1, #0
 800c392:	f47f adbe 	bne.w	800bf12 <_strtod_l+0x452>
 800c396:	2800      	cmp	r0, #0
 800c398:	f47f adbb 	bne.w	800bf12 <_strtod_l+0x452>
 800c39c:	2322      	movs	r3, #34	; 0x22
 800c39e:	f8c9 3000 	str.w	r3, [r9]
 800c3a2:	e5b6      	b.n	800bf12 <_strtod_l+0x452>
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c3aa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c3ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c3b2:	f04f 3aff 	mov.w	sl, #4294967295
 800c3b6:	e76a      	b.n	800c28e <_strtod_l+0x7ce>
 800c3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ba:	b193      	cbz	r3, 800c3e2 <_strtod_l+0x922>
 800c3bc:	422b      	tst	r3, r5
 800c3be:	f43f af66 	beq.w	800c28e <_strtod_l+0x7ce>
 800c3c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3c4:	9a04      	ldr	r2, [sp, #16]
 800c3c6:	4650      	mov	r0, sl
 800c3c8:	4659      	mov	r1, fp
 800c3ca:	b173      	cbz	r3, 800c3ea <_strtod_l+0x92a>
 800c3cc:	f7ff fb5a 	bl	800ba84 <sulp>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3d8:	f7f3 ff58 	bl	800028c <__adddf3>
 800c3dc:	4682      	mov	sl, r0
 800c3de:	468b      	mov	fp, r1
 800c3e0:	e755      	b.n	800c28e <_strtod_l+0x7ce>
 800c3e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3e4:	ea13 0f0a 	tst.w	r3, sl
 800c3e8:	e7e9      	b.n	800c3be <_strtod_l+0x8fe>
 800c3ea:	f7ff fb4b 	bl	800ba84 <sulp>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3f6:	f7f3 ff47 	bl	8000288 <__aeabi_dsub>
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4682      	mov	sl, r0
 800c400:	468b      	mov	fp, r1
 800c402:	f7f4 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 800c406:	2800      	cmp	r0, #0
 800c408:	f47f ae11 	bne.w	800c02e <_strtod_l+0x56e>
 800c40c:	e73f      	b.n	800c28e <_strtod_l+0x7ce>
 800c40e:	4641      	mov	r1, r8
 800c410:	4620      	mov	r0, r4
 800c412:	f001 ff1c 	bl	800e24e <__ratio>
 800c416:	ec57 6b10 	vmov	r6, r7, d0
 800c41a:	2200      	movs	r2, #0
 800c41c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c420:	ee10 0a10 	vmov	r0, s0
 800c424:	4639      	mov	r1, r7
 800c426:	f7f4 fb63 	bl	8000af0 <__aeabi_dcmple>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d077      	beq.n	800c51e <_strtod_l+0xa5e>
 800c42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c430:	2b00      	cmp	r3, #0
 800c432:	d04a      	beq.n	800c4ca <_strtod_l+0xa0a>
 800c434:	4b68      	ldr	r3, [pc, #416]	; (800c5d8 <_strtod_l+0xb18>)
 800c436:	2200      	movs	r2, #0
 800c438:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c43c:	4f66      	ldr	r7, [pc, #408]	; (800c5d8 <_strtod_l+0xb18>)
 800c43e:	2600      	movs	r6, #0
 800c440:	4b62      	ldr	r3, [pc, #392]	; (800c5cc <_strtod_l+0xb0c>)
 800c442:	402b      	ands	r3, r5
 800c444:	930f      	str	r3, [sp, #60]	; 0x3c
 800c446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c448:	4b64      	ldr	r3, [pc, #400]	; (800c5dc <_strtod_l+0xb1c>)
 800c44a:	429a      	cmp	r2, r3
 800c44c:	f040 80ce 	bne.w	800c5ec <_strtod_l+0xb2c>
 800c450:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c454:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c458:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c45c:	ec4b ab10 	vmov	d0, sl, fp
 800c460:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c464:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c468:	f001 fe2c 	bl	800e0c4 <__ulp>
 800c46c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c470:	ec53 2b10 	vmov	r2, r3, d0
 800c474:	f7f4 f8c0 	bl	80005f8 <__aeabi_dmul>
 800c478:	4652      	mov	r2, sl
 800c47a:	465b      	mov	r3, fp
 800c47c:	f7f3 ff06 	bl	800028c <__adddf3>
 800c480:	460b      	mov	r3, r1
 800c482:	4952      	ldr	r1, [pc, #328]	; (800c5cc <_strtod_l+0xb0c>)
 800c484:	4a56      	ldr	r2, [pc, #344]	; (800c5e0 <_strtod_l+0xb20>)
 800c486:	4019      	ands	r1, r3
 800c488:	4291      	cmp	r1, r2
 800c48a:	4682      	mov	sl, r0
 800c48c:	d95b      	bls.n	800c546 <_strtod_l+0xa86>
 800c48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c490:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c494:	4293      	cmp	r3, r2
 800c496:	d103      	bne.n	800c4a0 <_strtod_l+0x9e0>
 800c498:	9b08      	ldr	r3, [sp, #32]
 800c49a:	3301      	adds	r3, #1
 800c49c:	f43f ad2e 	beq.w	800befc <_strtod_l+0x43c>
 800c4a0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c5d0 <_strtod_l+0xb10>
 800c4a4:	f04f 3aff 	mov.w	sl, #4294967295
 800c4a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c4aa:	4648      	mov	r0, r9
 800c4ac:	f001 fb73 	bl	800db96 <_Bfree>
 800c4b0:	9905      	ldr	r1, [sp, #20]
 800c4b2:	4648      	mov	r0, r9
 800c4b4:	f001 fb6f 	bl	800db96 <_Bfree>
 800c4b8:	4641      	mov	r1, r8
 800c4ba:	4648      	mov	r0, r9
 800c4bc:	f001 fb6b 	bl	800db96 <_Bfree>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4648      	mov	r0, r9
 800c4c4:	f001 fb67 	bl	800db96 <_Bfree>
 800c4c8:	e619      	b.n	800c0fe <_strtod_l+0x63e>
 800c4ca:	f1ba 0f00 	cmp.w	sl, #0
 800c4ce:	d11a      	bne.n	800c506 <_strtod_l+0xa46>
 800c4d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4d4:	b9eb      	cbnz	r3, 800c512 <_strtod_l+0xa52>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4b3f      	ldr	r3, [pc, #252]	; (800c5d8 <_strtod_l+0xb18>)
 800c4da:	4630      	mov	r0, r6
 800c4dc:	4639      	mov	r1, r7
 800c4de:	f7f4 fafd 	bl	8000adc <__aeabi_dcmplt>
 800c4e2:	b9c8      	cbnz	r0, 800c518 <_strtod_l+0xa58>
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	4b3e      	ldr	r3, [pc, #248]	; (800c5e4 <_strtod_l+0xb24>)
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	460f      	mov	r7, r1
 800c4f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c4f8:	9618      	str	r6, [sp, #96]	; 0x60
 800c4fa:	9319      	str	r3, [sp, #100]	; 0x64
 800c4fc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c500:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c504:	e79c      	b.n	800c440 <_strtod_l+0x980>
 800c506:	f1ba 0f01 	cmp.w	sl, #1
 800c50a:	d102      	bne.n	800c512 <_strtod_l+0xa52>
 800c50c:	2d00      	cmp	r5, #0
 800c50e:	f43f ad8e 	beq.w	800c02e <_strtod_l+0x56e>
 800c512:	2200      	movs	r2, #0
 800c514:	4b34      	ldr	r3, [pc, #208]	; (800c5e8 <_strtod_l+0xb28>)
 800c516:	e78f      	b.n	800c438 <_strtod_l+0x978>
 800c518:	2600      	movs	r6, #0
 800c51a:	4f32      	ldr	r7, [pc, #200]	; (800c5e4 <_strtod_l+0xb24>)
 800c51c:	e7ea      	b.n	800c4f4 <_strtod_l+0xa34>
 800c51e:	4b31      	ldr	r3, [pc, #196]	; (800c5e4 <_strtod_l+0xb24>)
 800c520:	4630      	mov	r0, r6
 800c522:	4639      	mov	r1, r7
 800c524:	2200      	movs	r2, #0
 800c526:	f7f4 f867 	bl	80005f8 <__aeabi_dmul>
 800c52a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c52c:	4606      	mov	r6, r0
 800c52e:	460f      	mov	r7, r1
 800c530:	b933      	cbnz	r3, 800c540 <_strtod_l+0xa80>
 800c532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c536:	9010      	str	r0, [sp, #64]	; 0x40
 800c538:	9311      	str	r3, [sp, #68]	; 0x44
 800c53a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c53e:	e7df      	b.n	800c500 <_strtod_l+0xa40>
 800c540:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c544:	e7f9      	b.n	800c53a <_strtod_l+0xa7a>
 800c546:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1ab      	bne.n	800c4a8 <_strtod_l+0x9e8>
 800c550:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c554:	0d1b      	lsrs	r3, r3, #20
 800c556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c558:	051b      	lsls	r3, r3, #20
 800c55a:	429a      	cmp	r2, r3
 800c55c:	465d      	mov	r5, fp
 800c55e:	d1a3      	bne.n	800c4a8 <_strtod_l+0x9e8>
 800c560:	4639      	mov	r1, r7
 800c562:	4630      	mov	r0, r6
 800c564:	f7f4 faf8 	bl	8000b58 <__aeabi_d2iz>
 800c568:	f7f3 ffdc 	bl	8000524 <__aeabi_i2d>
 800c56c:	460b      	mov	r3, r1
 800c56e:	4602      	mov	r2, r0
 800c570:	4639      	mov	r1, r7
 800c572:	4630      	mov	r0, r6
 800c574:	f7f3 fe88 	bl	8000288 <__aeabi_dsub>
 800c578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c57a:	4606      	mov	r6, r0
 800c57c:	460f      	mov	r7, r1
 800c57e:	b933      	cbnz	r3, 800c58e <_strtod_l+0xace>
 800c580:	f1ba 0f00 	cmp.w	sl, #0
 800c584:	d103      	bne.n	800c58e <_strtod_l+0xace>
 800c586:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c58a:	2d00      	cmp	r5, #0
 800c58c:	d06d      	beq.n	800c66a <_strtod_l+0xbaa>
 800c58e:	a30a      	add	r3, pc, #40	; (adr r3, 800c5b8 <_strtod_l+0xaf8>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	4630      	mov	r0, r6
 800c596:	4639      	mov	r1, r7
 800c598:	f7f4 faa0 	bl	8000adc <__aeabi_dcmplt>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	f47f acb8 	bne.w	800bf12 <_strtod_l+0x452>
 800c5a2:	a307      	add	r3, pc, #28	; (adr r3, 800c5c0 <_strtod_l+0xb00>)
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	f7f4 fab4 	bl	8000b18 <__aeabi_dcmpgt>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	f43f af79 	beq.w	800c4a8 <_strtod_l+0x9e8>
 800c5b6:	e4ac      	b.n	800bf12 <_strtod_l+0x452>
 800c5b8:	94a03595 	.word	0x94a03595
 800c5bc:	3fdfffff 	.word	0x3fdfffff
 800c5c0:	35afe535 	.word	0x35afe535
 800c5c4:	3fe00000 	.word	0x3fe00000
 800c5c8:	000fffff 	.word	0x000fffff
 800c5cc:	7ff00000 	.word	0x7ff00000
 800c5d0:	7fefffff 	.word	0x7fefffff
 800c5d4:	39500000 	.word	0x39500000
 800c5d8:	3ff00000 	.word	0x3ff00000
 800c5dc:	7fe00000 	.word	0x7fe00000
 800c5e0:	7c9fffff 	.word	0x7c9fffff
 800c5e4:	3fe00000 	.word	0x3fe00000
 800c5e8:	bff00000 	.word	0xbff00000
 800c5ec:	9b04      	ldr	r3, [sp, #16]
 800c5ee:	b333      	cbz	r3, 800c63e <_strtod_l+0xb7e>
 800c5f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5f2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c5f6:	d822      	bhi.n	800c63e <_strtod_l+0xb7e>
 800c5f8:	a327      	add	r3, pc, #156	; (adr r3, 800c698 <_strtod_l+0xbd8>)
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	4630      	mov	r0, r6
 800c600:	4639      	mov	r1, r7
 800c602:	f7f4 fa75 	bl	8000af0 <__aeabi_dcmple>
 800c606:	b1a0      	cbz	r0, 800c632 <_strtod_l+0xb72>
 800c608:	4639      	mov	r1, r7
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7f4 facc 	bl	8000ba8 <__aeabi_d2uiz>
 800c610:	2800      	cmp	r0, #0
 800c612:	bf08      	it	eq
 800c614:	2001      	moveq	r0, #1
 800c616:	f7f3 ff75 	bl	8000504 <__aeabi_ui2d>
 800c61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c61c:	4606      	mov	r6, r0
 800c61e:	460f      	mov	r7, r1
 800c620:	bb03      	cbnz	r3, 800c664 <_strtod_l+0xba4>
 800c622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c626:	9012      	str	r0, [sp, #72]	; 0x48
 800c628:	9313      	str	r3, [sp, #76]	; 0x4c
 800c62a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c62e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c634:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c636:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c63a:	1a9b      	subs	r3, r3, r2
 800c63c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c63e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c642:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c646:	f001 fd3d 	bl	800e0c4 <__ulp>
 800c64a:	4650      	mov	r0, sl
 800c64c:	ec53 2b10 	vmov	r2, r3, d0
 800c650:	4659      	mov	r1, fp
 800c652:	f7f3 ffd1 	bl	80005f8 <__aeabi_dmul>
 800c656:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c65a:	f7f3 fe17 	bl	800028c <__adddf3>
 800c65e:	4682      	mov	sl, r0
 800c660:	468b      	mov	fp, r1
 800c662:	e772      	b.n	800c54a <_strtod_l+0xa8a>
 800c664:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c668:	e7df      	b.n	800c62a <_strtod_l+0xb6a>
 800c66a:	a30d      	add	r3, pc, #52	; (adr r3, 800c6a0 <_strtod_l+0xbe0>)
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f7f4 fa34 	bl	8000adc <__aeabi_dcmplt>
 800c674:	e79c      	b.n	800c5b0 <_strtod_l+0xaf0>
 800c676:	2300      	movs	r3, #0
 800c678:	930d      	str	r3, [sp, #52]	; 0x34
 800c67a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c67c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	f7ff ba61 	b.w	800bb46 <_strtod_l+0x86>
 800c684:	2b65      	cmp	r3, #101	; 0x65
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	f43f ab4e 	beq.w	800bd2a <_strtod_l+0x26a>
 800c68e:	2101      	movs	r1, #1
 800c690:	4614      	mov	r4, r2
 800c692:	9104      	str	r1, [sp, #16]
 800c694:	f7ff bacb 	b.w	800bc2e <_strtod_l+0x16e>
 800c698:	ffc00000 	.word	0xffc00000
 800c69c:	41dfffff 	.word	0x41dfffff
 800c6a0:	94a03595 	.word	0x94a03595
 800c6a4:	3fcfffff 	.word	0x3fcfffff

0800c6a8 <_strtod_r>:
 800c6a8:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <_strtod_r+0x18>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	b410      	push	{r4}
 800c6ae:	6a1b      	ldr	r3, [r3, #32]
 800c6b0:	4c04      	ldr	r4, [pc, #16]	; (800c6c4 <_strtod_r+0x1c>)
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	bf08      	it	eq
 800c6b6:	4623      	moveq	r3, r4
 800c6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6bc:	f7ff ba00 	b.w	800bac0 <_strtod_l>
 800c6c0:	2000000c 	.word	0x2000000c
 800c6c4:	20000070 	.word	0x20000070

0800c6c8 <_strtol_l.isra.0>:
 800c6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	4689      	mov	r9, r1
 800c6d0:	4692      	mov	sl, r2
 800c6d2:	461e      	mov	r6, r3
 800c6d4:	460f      	mov	r7, r1
 800c6d6:	463d      	mov	r5, r7
 800c6d8:	9808      	ldr	r0, [sp, #32]
 800c6da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6de:	f001 f9ed 	bl	800dabc <__locale_ctype_ptr_l>
 800c6e2:	4420      	add	r0, r4
 800c6e4:	7843      	ldrb	r3, [r0, #1]
 800c6e6:	f013 0308 	ands.w	r3, r3, #8
 800c6ea:	d132      	bne.n	800c752 <_strtol_l.isra.0+0x8a>
 800c6ec:	2c2d      	cmp	r4, #45	; 0x2d
 800c6ee:	d132      	bne.n	800c756 <_strtol_l.isra.0+0x8e>
 800c6f0:	787c      	ldrb	r4, [r7, #1]
 800c6f2:	1cbd      	adds	r5, r7, #2
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	d05d      	beq.n	800c7b6 <_strtol_l.isra.0+0xee>
 800c6fa:	2e10      	cmp	r6, #16
 800c6fc:	d109      	bne.n	800c712 <_strtol_l.isra.0+0x4a>
 800c6fe:	2c30      	cmp	r4, #48	; 0x30
 800c700:	d107      	bne.n	800c712 <_strtol_l.isra.0+0x4a>
 800c702:	782b      	ldrb	r3, [r5, #0]
 800c704:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c708:	2b58      	cmp	r3, #88	; 0x58
 800c70a:	d14f      	bne.n	800c7ac <_strtol_l.isra.0+0xe4>
 800c70c:	786c      	ldrb	r4, [r5, #1]
 800c70e:	2610      	movs	r6, #16
 800c710:	3502      	adds	r5, #2
 800c712:	2a00      	cmp	r2, #0
 800c714:	bf14      	ite	ne
 800c716:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c71a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c71e:	2700      	movs	r7, #0
 800c720:	fbb1 fcf6 	udiv	ip, r1, r6
 800c724:	4638      	mov	r0, r7
 800c726:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c72a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d817      	bhi.n	800c762 <_strtol_l.isra.0+0x9a>
 800c732:	461c      	mov	r4, r3
 800c734:	42a6      	cmp	r6, r4
 800c736:	dd23      	ble.n	800c780 <_strtol_l.isra.0+0xb8>
 800c738:	1c7b      	adds	r3, r7, #1
 800c73a:	d007      	beq.n	800c74c <_strtol_l.isra.0+0x84>
 800c73c:	4584      	cmp	ip, r0
 800c73e:	d31c      	bcc.n	800c77a <_strtol_l.isra.0+0xb2>
 800c740:	d101      	bne.n	800c746 <_strtol_l.isra.0+0x7e>
 800c742:	45a6      	cmp	lr, r4
 800c744:	db19      	blt.n	800c77a <_strtol_l.isra.0+0xb2>
 800c746:	fb00 4006 	mla	r0, r0, r6, r4
 800c74a:	2701      	movs	r7, #1
 800c74c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c750:	e7eb      	b.n	800c72a <_strtol_l.isra.0+0x62>
 800c752:	462f      	mov	r7, r5
 800c754:	e7bf      	b.n	800c6d6 <_strtol_l.isra.0+0xe>
 800c756:	2c2b      	cmp	r4, #43	; 0x2b
 800c758:	bf04      	itt	eq
 800c75a:	1cbd      	addeq	r5, r7, #2
 800c75c:	787c      	ldrbeq	r4, [r7, #1]
 800c75e:	461a      	mov	r2, r3
 800c760:	e7c9      	b.n	800c6f6 <_strtol_l.isra.0+0x2e>
 800c762:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c766:	2b19      	cmp	r3, #25
 800c768:	d801      	bhi.n	800c76e <_strtol_l.isra.0+0xa6>
 800c76a:	3c37      	subs	r4, #55	; 0x37
 800c76c:	e7e2      	b.n	800c734 <_strtol_l.isra.0+0x6c>
 800c76e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c772:	2b19      	cmp	r3, #25
 800c774:	d804      	bhi.n	800c780 <_strtol_l.isra.0+0xb8>
 800c776:	3c57      	subs	r4, #87	; 0x57
 800c778:	e7dc      	b.n	800c734 <_strtol_l.isra.0+0x6c>
 800c77a:	f04f 37ff 	mov.w	r7, #4294967295
 800c77e:	e7e5      	b.n	800c74c <_strtol_l.isra.0+0x84>
 800c780:	1c7b      	adds	r3, r7, #1
 800c782:	d108      	bne.n	800c796 <_strtol_l.isra.0+0xce>
 800c784:	2322      	movs	r3, #34	; 0x22
 800c786:	f8c8 3000 	str.w	r3, [r8]
 800c78a:	4608      	mov	r0, r1
 800c78c:	f1ba 0f00 	cmp.w	sl, #0
 800c790:	d107      	bne.n	800c7a2 <_strtol_l.isra.0+0xda>
 800c792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c796:	b102      	cbz	r2, 800c79a <_strtol_l.isra.0+0xd2>
 800c798:	4240      	negs	r0, r0
 800c79a:	f1ba 0f00 	cmp.w	sl, #0
 800c79e:	d0f8      	beq.n	800c792 <_strtol_l.isra.0+0xca>
 800c7a0:	b10f      	cbz	r7, 800c7a6 <_strtol_l.isra.0+0xde>
 800c7a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c7a6:	f8ca 9000 	str.w	r9, [sl]
 800c7aa:	e7f2      	b.n	800c792 <_strtol_l.isra.0+0xca>
 800c7ac:	2430      	movs	r4, #48	; 0x30
 800c7ae:	2e00      	cmp	r6, #0
 800c7b0:	d1af      	bne.n	800c712 <_strtol_l.isra.0+0x4a>
 800c7b2:	2608      	movs	r6, #8
 800c7b4:	e7ad      	b.n	800c712 <_strtol_l.isra.0+0x4a>
 800c7b6:	2c30      	cmp	r4, #48	; 0x30
 800c7b8:	d0a3      	beq.n	800c702 <_strtol_l.isra.0+0x3a>
 800c7ba:	260a      	movs	r6, #10
 800c7bc:	e7a9      	b.n	800c712 <_strtol_l.isra.0+0x4a>
	...

0800c7c0 <_strtol_r>:
 800c7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7c2:	4c06      	ldr	r4, [pc, #24]	; (800c7dc <_strtol_r+0x1c>)
 800c7c4:	4d06      	ldr	r5, [pc, #24]	; (800c7e0 <_strtol_r+0x20>)
 800c7c6:	6824      	ldr	r4, [r4, #0]
 800c7c8:	6a24      	ldr	r4, [r4, #32]
 800c7ca:	2c00      	cmp	r4, #0
 800c7cc:	bf08      	it	eq
 800c7ce:	462c      	moveq	r4, r5
 800c7d0:	9400      	str	r4, [sp, #0]
 800c7d2:	f7ff ff79 	bl	800c6c8 <_strtol_l.isra.0>
 800c7d6:	b003      	add	sp, #12
 800c7d8:	bd30      	pop	{r4, r5, pc}
 800c7da:	bf00      	nop
 800c7dc:	2000000c 	.word	0x2000000c
 800c7e0:	20000070 	.word	0x20000070

0800c7e4 <quorem>:
 800c7e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	6903      	ldr	r3, [r0, #16]
 800c7ea:	690c      	ldr	r4, [r1, #16]
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	f2c0 8082 	blt.w	800c8f8 <quorem+0x114>
 800c7f4:	3c01      	subs	r4, #1
 800c7f6:	f101 0714 	add.w	r7, r1, #20
 800c7fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c7fe:	f100 0614 	add.w	r6, r0, #20
 800c802:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c806:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c80a:	eb06 030c 	add.w	r3, r6, ip
 800c80e:	3501      	adds	r5, #1
 800c810:	eb07 090c 	add.w	r9, r7, ip
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	fbb0 f5f5 	udiv	r5, r0, r5
 800c81a:	b395      	cbz	r5, 800c882 <quorem+0x9e>
 800c81c:	f04f 0a00 	mov.w	sl, #0
 800c820:	4638      	mov	r0, r7
 800c822:	46b6      	mov	lr, r6
 800c824:	46d3      	mov	fp, sl
 800c826:	f850 2b04 	ldr.w	r2, [r0], #4
 800c82a:	b293      	uxth	r3, r2
 800c82c:	fb05 a303 	mla	r3, r5, r3, sl
 800c830:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c834:	b29b      	uxth	r3, r3
 800c836:	ebab 0303 	sub.w	r3, fp, r3
 800c83a:	0c12      	lsrs	r2, r2, #16
 800c83c:	f8de b000 	ldr.w	fp, [lr]
 800c840:	fb05 a202 	mla	r2, r5, r2, sl
 800c844:	fa13 f38b 	uxtah	r3, r3, fp
 800c848:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c84c:	fa1f fb82 	uxth.w	fp, r2
 800c850:	f8de 2000 	ldr.w	r2, [lr]
 800c854:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c862:	4581      	cmp	r9, r0
 800c864:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c868:	f84e 3b04 	str.w	r3, [lr], #4
 800c86c:	d2db      	bcs.n	800c826 <quorem+0x42>
 800c86e:	f856 300c 	ldr.w	r3, [r6, ip]
 800c872:	b933      	cbnz	r3, 800c882 <quorem+0x9e>
 800c874:	9b01      	ldr	r3, [sp, #4]
 800c876:	3b04      	subs	r3, #4
 800c878:	429e      	cmp	r6, r3
 800c87a:	461a      	mov	r2, r3
 800c87c:	d330      	bcc.n	800c8e0 <quorem+0xfc>
 800c87e:	f8c8 4010 	str.w	r4, [r8, #16]
 800c882:	4640      	mov	r0, r8
 800c884:	f001 fba6 	bl	800dfd4 <__mcmp>
 800c888:	2800      	cmp	r0, #0
 800c88a:	db25      	blt.n	800c8d8 <quorem+0xf4>
 800c88c:	3501      	adds	r5, #1
 800c88e:	4630      	mov	r0, r6
 800c890:	f04f 0c00 	mov.w	ip, #0
 800c894:	f857 2b04 	ldr.w	r2, [r7], #4
 800c898:	f8d0 e000 	ldr.w	lr, [r0]
 800c89c:	b293      	uxth	r3, r2
 800c89e:	ebac 0303 	sub.w	r3, ip, r3
 800c8a2:	0c12      	lsrs	r2, r2, #16
 800c8a4:	fa13 f38e 	uxtah	r3, r3, lr
 800c8a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c8ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8b6:	45b9      	cmp	r9, r7
 800c8b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c8bc:	f840 3b04 	str.w	r3, [r0], #4
 800c8c0:	d2e8      	bcs.n	800c894 <quorem+0xb0>
 800c8c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c8c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c8ca:	b92a      	cbnz	r2, 800c8d8 <quorem+0xf4>
 800c8cc:	3b04      	subs	r3, #4
 800c8ce:	429e      	cmp	r6, r3
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	d30b      	bcc.n	800c8ec <quorem+0x108>
 800c8d4:	f8c8 4010 	str.w	r4, [r8, #16]
 800c8d8:	4628      	mov	r0, r5
 800c8da:	b003      	add	sp, #12
 800c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e0:	6812      	ldr	r2, [r2, #0]
 800c8e2:	3b04      	subs	r3, #4
 800c8e4:	2a00      	cmp	r2, #0
 800c8e6:	d1ca      	bne.n	800c87e <quorem+0x9a>
 800c8e8:	3c01      	subs	r4, #1
 800c8ea:	e7c5      	b.n	800c878 <quorem+0x94>
 800c8ec:	6812      	ldr	r2, [r2, #0]
 800c8ee:	3b04      	subs	r3, #4
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d1ef      	bne.n	800c8d4 <quorem+0xf0>
 800c8f4:	3c01      	subs	r4, #1
 800c8f6:	e7ea      	b.n	800c8ce <quorem+0xea>
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	e7ee      	b.n	800c8da <quorem+0xf6>
 800c8fc:	0000      	movs	r0, r0
	...

0800c900 <_dtoa_r>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	ec57 6b10 	vmov	r6, r7, d0
 800c908:	b097      	sub	sp, #92	; 0x5c
 800c90a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c90c:	9106      	str	r1, [sp, #24]
 800c90e:	4604      	mov	r4, r0
 800c910:	920b      	str	r2, [sp, #44]	; 0x2c
 800c912:	9312      	str	r3, [sp, #72]	; 0x48
 800c914:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c918:	e9cd 6700 	strd	r6, r7, [sp]
 800c91c:	b93d      	cbnz	r5, 800c92e <_dtoa_r+0x2e>
 800c91e:	2010      	movs	r0, #16
 800c920:	f001 f8e0 	bl	800dae4 <malloc>
 800c924:	6260      	str	r0, [r4, #36]	; 0x24
 800c926:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c92a:	6005      	str	r5, [r0, #0]
 800c92c:	60c5      	str	r5, [r0, #12]
 800c92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c930:	6819      	ldr	r1, [r3, #0]
 800c932:	b151      	cbz	r1, 800c94a <_dtoa_r+0x4a>
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	604a      	str	r2, [r1, #4]
 800c938:	2301      	movs	r3, #1
 800c93a:	4093      	lsls	r3, r2
 800c93c:	608b      	str	r3, [r1, #8]
 800c93e:	4620      	mov	r0, r4
 800c940:	f001 f929 	bl	800db96 <_Bfree>
 800c944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	1e3b      	subs	r3, r7, #0
 800c94c:	bfbb      	ittet	lt
 800c94e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c952:	9301      	strlt	r3, [sp, #4]
 800c954:	2300      	movge	r3, #0
 800c956:	2201      	movlt	r2, #1
 800c958:	bfac      	ite	ge
 800c95a:	f8c8 3000 	strge.w	r3, [r8]
 800c95e:	f8c8 2000 	strlt.w	r2, [r8]
 800c962:	4baf      	ldr	r3, [pc, #700]	; (800cc20 <_dtoa_r+0x320>)
 800c964:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c968:	ea33 0308 	bics.w	r3, r3, r8
 800c96c:	d114      	bne.n	800c998 <_dtoa_r+0x98>
 800c96e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c970:	f242 730f 	movw	r3, #9999	; 0x270f
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	9b00      	ldr	r3, [sp, #0]
 800c978:	b923      	cbnz	r3, 800c984 <_dtoa_r+0x84>
 800c97a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c97e:	2800      	cmp	r0, #0
 800c980:	f000 8542 	beq.w	800d408 <_dtoa_r+0xb08>
 800c984:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c986:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cc34 <_dtoa_r+0x334>
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 8544 	beq.w	800d418 <_dtoa_r+0xb18>
 800c990:	f10b 0303 	add.w	r3, fp, #3
 800c994:	f000 bd3e 	b.w	800d414 <_dtoa_r+0xb14>
 800c998:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c99c:	2200      	movs	r2, #0
 800c99e:	2300      	movs	r3, #0
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f7f4 f890 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9a8:	4681      	mov	r9, r0
 800c9aa:	b168      	cbz	r0, 800c9c8 <_dtoa_r+0xc8>
 800c9ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	6013      	str	r3, [r2, #0]
 800c9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 8524 	beq.w	800d402 <_dtoa_r+0xb02>
 800c9ba:	4b9a      	ldr	r3, [pc, #616]	; (800cc24 <_dtoa_r+0x324>)
 800c9bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9be:	f103 3bff 	add.w	fp, r3, #4294967295
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	f000 bd28 	b.w	800d418 <_dtoa_r+0xb18>
 800c9c8:	aa14      	add	r2, sp, #80	; 0x50
 800c9ca:	a915      	add	r1, sp, #84	; 0x54
 800c9cc:	ec47 6b10 	vmov	d0, r6, r7
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f001 fbed 	bl	800e1b0 <__d2b>
 800c9d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c9da:	9004      	str	r0, [sp, #16]
 800c9dc:	2d00      	cmp	r5, #0
 800c9de:	d07c      	beq.n	800cada <_dtoa_r+0x1da>
 800c9e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c9e8:	46b2      	mov	sl, r6
 800c9ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c9ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c9f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	4b8b      	ldr	r3, [pc, #556]	; (800cc28 <_dtoa_r+0x328>)
 800c9fa:	4650      	mov	r0, sl
 800c9fc:	4659      	mov	r1, fp
 800c9fe:	f7f3 fc43 	bl	8000288 <__aeabi_dsub>
 800ca02:	a381      	add	r3, pc, #516	; (adr r3, 800cc08 <_dtoa_r+0x308>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f7f3 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ca0c:	a380      	add	r3, pc, #512	; (adr r3, 800cc10 <_dtoa_r+0x310>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	f7f3 fc3b 	bl	800028c <__adddf3>
 800ca16:	4606      	mov	r6, r0
 800ca18:	4628      	mov	r0, r5
 800ca1a:	460f      	mov	r7, r1
 800ca1c:	f7f3 fd82 	bl	8000524 <__aeabi_i2d>
 800ca20:	a37d      	add	r3, pc, #500	; (adr r3, 800cc18 <_dtoa_r+0x318>)
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f7f3 fde7 	bl	80005f8 <__aeabi_dmul>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f3 fc2b 	bl	800028c <__adddf3>
 800ca36:	4606      	mov	r6, r0
 800ca38:	460f      	mov	r7, r1
 800ca3a:	f7f4 f88d 	bl	8000b58 <__aeabi_d2iz>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4682      	mov	sl, r0
 800ca42:	2300      	movs	r3, #0
 800ca44:	4630      	mov	r0, r6
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f4 f848 	bl	8000adc <__aeabi_dcmplt>
 800ca4c:	b148      	cbz	r0, 800ca62 <_dtoa_r+0x162>
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f7f3 fd68 	bl	8000524 <__aeabi_i2d>
 800ca54:	4632      	mov	r2, r6
 800ca56:	463b      	mov	r3, r7
 800ca58:	f7f4 f836 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca5c:	b908      	cbnz	r0, 800ca62 <_dtoa_r+0x162>
 800ca5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca62:	f1ba 0f16 	cmp.w	sl, #22
 800ca66:	d859      	bhi.n	800cb1c <_dtoa_r+0x21c>
 800ca68:	4970      	ldr	r1, [pc, #448]	; (800cc2c <_dtoa_r+0x32c>)
 800ca6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ca6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca76:	f7f4 f84f 	bl	8000b18 <__aeabi_dcmpgt>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d050      	beq.n	800cb20 <_dtoa_r+0x220>
 800ca7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca82:	2300      	movs	r3, #0
 800ca84:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca88:	1b5d      	subs	r5, r3, r5
 800ca8a:	f1b5 0801 	subs.w	r8, r5, #1
 800ca8e:	bf49      	itett	mi
 800ca90:	f1c5 0301 	rsbmi	r3, r5, #1
 800ca94:	2300      	movpl	r3, #0
 800ca96:	9305      	strmi	r3, [sp, #20]
 800ca98:	f04f 0800 	movmi.w	r8, #0
 800ca9c:	bf58      	it	pl
 800ca9e:	9305      	strpl	r3, [sp, #20]
 800caa0:	f1ba 0f00 	cmp.w	sl, #0
 800caa4:	db3e      	blt.n	800cb24 <_dtoa_r+0x224>
 800caa6:	2300      	movs	r3, #0
 800caa8:	44d0      	add	r8, sl
 800caaa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800caae:	9307      	str	r3, [sp, #28]
 800cab0:	9b06      	ldr	r3, [sp, #24]
 800cab2:	2b09      	cmp	r3, #9
 800cab4:	f200 8090 	bhi.w	800cbd8 <_dtoa_r+0x2d8>
 800cab8:	2b05      	cmp	r3, #5
 800caba:	bfc4      	itt	gt
 800cabc:	3b04      	subgt	r3, #4
 800cabe:	9306      	strgt	r3, [sp, #24]
 800cac0:	9b06      	ldr	r3, [sp, #24]
 800cac2:	f1a3 0302 	sub.w	r3, r3, #2
 800cac6:	bfcc      	ite	gt
 800cac8:	2500      	movgt	r5, #0
 800caca:	2501      	movle	r5, #1
 800cacc:	2b03      	cmp	r3, #3
 800cace:	f200 808f 	bhi.w	800cbf0 <_dtoa_r+0x2f0>
 800cad2:	e8df f003 	tbb	[pc, r3]
 800cad6:	7f7d      	.short	0x7f7d
 800cad8:	7131      	.short	0x7131
 800cada:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cade:	441d      	add	r5, r3
 800cae0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cae4:	2820      	cmp	r0, #32
 800cae6:	dd13      	ble.n	800cb10 <_dtoa_r+0x210>
 800cae8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800caec:	9b00      	ldr	r3, [sp, #0]
 800caee:	fa08 f800 	lsl.w	r8, r8, r0
 800caf2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800caf6:	fa23 f000 	lsr.w	r0, r3, r0
 800cafa:	ea48 0000 	orr.w	r0, r8, r0
 800cafe:	f7f3 fd01 	bl	8000504 <__aeabi_ui2d>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4682      	mov	sl, r0
 800cb06:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cb0a:	3d01      	subs	r5, #1
 800cb0c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb0e:	e772      	b.n	800c9f6 <_dtoa_r+0xf6>
 800cb10:	9b00      	ldr	r3, [sp, #0]
 800cb12:	f1c0 0020 	rsb	r0, r0, #32
 800cb16:	fa03 f000 	lsl.w	r0, r3, r0
 800cb1a:	e7f0      	b.n	800cafe <_dtoa_r+0x1fe>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e7b1      	b.n	800ca84 <_dtoa_r+0x184>
 800cb20:	900f      	str	r0, [sp, #60]	; 0x3c
 800cb22:	e7b0      	b.n	800ca86 <_dtoa_r+0x186>
 800cb24:	9b05      	ldr	r3, [sp, #20]
 800cb26:	eba3 030a 	sub.w	r3, r3, sl
 800cb2a:	9305      	str	r3, [sp, #20]
 800cb2c:	f1ca 0300 	rsb	r3, sl, #0
 800cb30:	9307      	str	r3, [sp, #28]
 800cb32:	2300      	movs	r3, #0
 800cb34:	930e      	str	r3, [sp, #56]	; 0x38
 800cb36:	e7bb      	b.n	800cab0 <_dtoa_r+0x1b0>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	dd59      	ble.n	800cbf6 <_dtoa_r+0x2f6>
 800cb42:	9302      	str	r3, [sp, #8]
 800cb44:	4699      	mov	r9, r3
 800cb46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb48:	2200      	movs	r2, #0
 800cb4a:	6072      	str	r2, [r6, #4]
 800cb4c:	2204      	movs	r2, #4
 800cb4e:	f102 0014 	add.w	r0, r2, #20
 800cb52:	4298      	cmp	r0, r3
 800cb54:	6871      	ldr	r1, [r6, #4]
 800cb56:	d953      	bls.n	800cc00 <_dtoa_r+0x300>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 ffe8 	bl	800db2e <_Balloc>
 800cb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb60:	6030      	str	r0, [r6, #0]
 800cb62:	f1b9 0f0e 	cmp.w	r9, #14
 800cb66:	f8d3 b000 	ldr.w	fp, [r3]
 800cb6a:	f200 80e6 	bhi.w	800cd3a <_dtoa_r+0x43a>
 800cb6e:	2d00      	cmp	r5, #0
 800cb70:	f000 80e3 	beq.w	800cd3a <_dtoa_r+0x43a>
 800cb74:	ed9d 7b00 	vldr	d7, [sp]
 800cb78:	f1ba 0f00 	cmp.w	sl, #0
 800cb7c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cb80:	dd74      	ble.n	800cc6c <_dtoa_r+0x36c>
 800cb82:	4a2a      	ldr	r2, [pc, #168]	; (800cc2c <_dtoa_r+0x32c>)
 800cb84:	f00a 030f 	and.w	r3, sl, #15
 800cb88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb8c:	ed93 7b00 	vldr	d7, [r3]
 800cb90:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cb94:	06f0      	lsls	r0, r6, #27
 800cb96:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cb9a:	d565      	bpl.n	800cc68 <_dtoa_r+0x368>
 800cb9c:	4b24      	ldr	r3, [pc, #144]	; (800cc30 <_dtoa_r+0x330>)
 800cb9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cba2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cba6:	f7f3 fe51 	bl	800084c <__aeabi_ddiv>
 800cbaa:	e9cd 0100 	strd	r0, r1, [sp]
 800cbae:	f006 060f 	and.w	r6, r6, #15
 800cbb2:	2503      	movs	r5, #3
 800cbb4:	4f1e      	ldr	r7, [pc, #120]	; (800cc30 <_dtoa_r+0x330>)
 800cbb6:	e04c      	b.n	800cc52 <_dtoa_r+0x352>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	930a      	str	r3, [sp, #40]	; 0x28
 800cbbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbbe:	4453      	add	r3, sl
 800cbc0:	f103 0901 	add.w	r9, r3, #1
 800cbc4:	9302      	str	r3, [sp, #8]
 800cbc6:	464b      	mov	r3, r9
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	bfb8      	it	lt
 800cbcc:	2301      	movlt	r3, #1
 800cbce:	e7ba      	b.n	800cb46 <_dtoa_r+0x246>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e7b2      	b.n	800cb3a <_dtoa_r+0x23a>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e7f0      	b.n	800cbba <_dtoa_r+0x2ba>
 800cbd8:	2501      	movs	r5, #1
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9306      	str	r3, [sp, #24]
 800cbde:	950a      	str	r5, [sp, #40]	; 0x28
 800cbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe4:	9302      	str	r3, [sp, #8]
 800cbe6:	4699      	mov	r9, r3
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2312      	movs	r3, #18
 800cbec:	920b      	str	r2, [sp, #44]	; 0x2c
 800cbee:	e7aa      	b.n	800cb46 <_dtoa_r+0x246>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	930a      	str	r3, [sp, #40]	; 0x28
 800cbf4:	e7f4      	b.n	800cbe0 <_dtoa_r+0x2e0>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	4699      	mov	r9, r3
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	e7f5      	b.n	800cbec <_dtoa_r+0x2ec>
 800cc00:	3101      	adds	r1, #1
 800cc02:	6071      	str	r1, [r6, #4]
 800cc04:	0052      	lsls	r2, r2, #1
 800cc06:	e7a2      	b.n	800cb4e <_dtoa_r+0x24e>
 800cc08:	636f4361 	.word	0x636f4361
 800cc0c:	3fd287a7 	.word	0x3fd287a7
 800cc10:	8b60c8b3 	.word	0x8b60c8b3
 800cc14:	3fc68a28 	.word	0x3fc68a28
 800cc18:	509f79fb 	.word	0x509f79fb
 800cc1c:	3fd34413 	.word	0x3fd34413
 800cc20:	7ff00000 	.word	0x7ff00000
 800cc24:	0800ed61 	.word	0x0800ed61
 800cc28:	3ff80000 	.word	0x3ff80000
 800cc2c:	0800ee20 	.word	0x0800ee20
 800cc30:	0800edf8 	.word	0x0800edf8
 800cc34:	0800ede9 	.word	0x0800ede9
 800cc38:	07f1      	lsls	r1, r6, #31
 800cc3a:	d508      	bpl.n	800cc4e <_dtoa_r+0x34e>
 800cc3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc44:	f7f3 fcd8 	bl	80005f8 <__aeabi_dmul>
 800cc48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc4c:	3501      	adds	r5, #1
 800cc4e:	1076      	asrs	r6, r6, #1
 800cc50:	3708      	adds	r7, #8
 800cc52:	2e00      	cmp	r6, #0
 800cc54:	d1f0      	bne.n	800cc38 <_dtoa_r+0x338>
 800cc56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cc5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc5e:	f7f3 fdf5 	bl	800084c <__aeabi_ddiv>
 800cc62:	e9cd 0100 	strd	r0, r1, [sp]
 800cc66:	e01a      	b.n	800cc9e <_dtoa_r+0x39e>
 800cc68:	2502      	movs	r5, #2
 800cc6a:	e7a3      	b.n	800cbb4 <_dtoa_r+0x2b4>
 800cc6c:	f000 80a0 	beq.w	800cdb0 <_dtoa_r+0x4b0>
 800cc70:	f1ca 0600 	rsb	r6, sl, #0
 800cc74:	4b9f      	ldr	r3, [pc, #636]	; (800cef4 <_dtoa_r+0x5f4>)
 800cc76:	4fa0      	ldr	r7, [pc, #640]	; (800cef8 <_dtoa_r+0x5f8>)
 800cc78:	f006 020f 	and.w	r2, r6, #15
 800cc7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc88:	f7f3 fcb6 	bl	80005f8 <__aeabi_dmul>
 800cc8c:	e9cd 0100 	strd	r0, r1, [sp]
 800cc90:	1136      	asrs	r6, r6, #4
 800cc92:	2300      	movs	r3, #0
 800cc94:	2502      	movs	r5, #2
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	d17f      	bne.n	800cd9a <_dtoa_r+0x49a>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e1      	bne.n	800cc62 <_dtoa_r+0x362>
 800cc9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 8087 	beq.w	800cdb4 <_dtoa_r+0x4b4>
 800cca6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	4b93      	ldr	r3, [pc, #588]	; (800cefc <_dtoa_r+0x5fc>)
 800ccae:	4630      	mov	r0, r6
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	f7f3 ff13 	bl	8000adc <__aeabi_dcmplt>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d07c      	beq.n	800cdb4 <_dtoa_r+0x4b4>
 800ccba:	f1b9 0f00 	cmp.w	r9, #0
 800ccbe:	d079      	beq.n	800cdb4 <_dtoa_r+0x4b4>
 800ccc0:	9b02      	ldr	r3, [sp, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	dd35      	ble.n	800cd32 <_dtoa_r+0x432>
 800ccc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ccca:	9308      	str	r3, [sp, #32]
 800cccc:	4639      	mov	r1, r7
 800ccce:	2200      	movs	r2, #0
 800ccd0:	4b8b      	ldr	r3, [pc, #556]	; (800cf00 <_dtoa_r+0x600>)
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7f3 fc90 	bl	80005f8 <__aeabi_dmul>
 800ccd8:	e9cd 0100 	strd	r0, r1, [sp]
 800ccdc:	9f02      	ldr	r7, [sp, #8]
 800ccde:	3501      	adds	r5, #1
 800cce0:	4628      	mov	r0, r5
 800cce2:	f7f3 fc1f 	bl	8000524 <__aeabi_i2d>
 800cce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccea:	f7f3 fc85 	bl	80005f8 <__aeabi_dmul>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	4b84      	ldr	r3, [pc, #528]	; (800cf04 <_dtoa_r+0x604>)
 800ccf2:	f7f3 facb 	bl	800028c <__adddf3>
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ccfc:	2f00      	cmp	r7, #0
 800ccfe:	d15d      	bne.n	800cdbc <_dtoa_r+0x4bc>
 800cd00:	2200      	movs	r2, #0
 800cd02:	4b81      	ldr	r3, [pc, #516]	; (800cf08 <_dtoa_r+0x608>)
 800cd04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd08:	f7f3 fabe 	bl	8000288 <__aeabi_dsub>
 800cd0c:	462a      	mov	r2, r5
 800cd0e:	4633      	mov	r3, r6
 800cd10:	e9cd 0100 	strd	r0, r1, [sp]
 800cd14:	f7f3 ff00 	bl	8000b18 <__aeabi_dcmpgt>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	f040 8288 	bne.w	800d22e <_dtoa_r+0x92e>
 800cd1e:	462a      	mov	r2, r5
 800cd20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cd24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd28:	f7f3 fed8 	bl	8000adc <__aeabi_dcmplt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f040 827c 	bne.w	800d22a <_dtoa_r+0x92a>
 800cd32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd36:	e9cd 2300 	strd	r2, r3, [sp]
 800cd3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f2c0 8150 	blt.w	800cfe2 <_dtoa_r+0x6e2>
 800cd42:	f1ba 0f0e 	cmp.w	sl, #14
 800cd46:	f300 814c 	bgt.w	800cfe2 <_dtoa_r+0x6e2>
 800cd4a:	4b6a      	ldr	r3, [pc, #424]	; (800cef4 <_dtoa_r+0x5f4>)
 800cd4c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd50:	ed93 7b00 	vldr	d7, [r3]
 800cd54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd5c:	f280 80d8 	bge.w	800cf10 <_dtoa_r+0x610>
 800cd60:	f1b9 0f00 	cmp.w	r9, #0
 800cd64:	f300 80d4 	bgt.w	800cf10 <_dtoa_r+0x610>
 800cd68:	f040 825e 	bne.w	800d228 <_dtoa_r+0x928>
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	4b66      	ldr	r3, [pc, #408]	; (800cf08 <_dtoa_r+0x608>)
 800cd70:	ec51 0b17 	vmov	r0, r1, d7
 800cd74:	f7f3 fc40 	bl	80005f8 <__aeabi_dmul>
 800cd78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd7c:	f7f3 fec2 	bl	8000b04 <__aeabi_dcmpge>
 800cd80:	464f      	mov	r7, r9
 800cd82:	464e      	mov	r6, r9
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f040 8234 	bne.w	800d1f2 <_dtoa_r+0x8f2>
 800cd8a:	2331      	movs	r3, #49	; 0x31
 800cd8c:	f10b 0501 	add.w	r5, fp, #1
 800cd90:	f88b 3000 	strb.w	r3, [fp]
 800cd94:	f10a 0a01 	add.w	sl, sl, #1
 800cd98:	e22f      	b.n	800d1fa <_dtoa_r+0x8fa>
 800cd9a:	07f2      	lsls	r2, r6, #31
 800cd9c:	d505      	bpl.n	800cdaa <_dtoa_r+0x4aa>
 800cd9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cda2:	f7f3 fc29 	bl	80005f8 <__aeabi_dmul>
 800cda6:	3501      	adds	r5, #1
 800cda8:	2301      	movs	r3, #1
 800cdaa:	1076      	asrs	r6, r6, #1
 800cdac:	3708      	adds	r7, #8
 800cdae:	e772      	b.n	800cc96 <_dtoa_r+0x396>
 800cdb0:	2502      	movs	r5, #2
 800cdb2:	e774      	b.n	800cc9e <_dtoa_r+0x39e>
 800cdb4:	f8cd a020 	str.w	sl, [sp, #32]
 800cdb8:	464f      	mov	r7, r9
 800cdba:	e791      	b.n	800cce0 <_dtoa_r+0x3e0>
 800cdbc:	4b4d      	ldr	r3, [pc, #308]	; (800cef4 <_dtoa_r+0x5f4>)
 800cdbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdc2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d047      	beq.n	800ce5c <_dtoa_r+0x55c>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	494e      	ldr	r1, [pc, #312]	; (800cf0c <_dtoa_r+0x60c>)
 800cdd4:	f7f3 fd3a 	bl	800084c <__aeabi_ddiv>
 800cdd8:	462a      	mov	r2, r5
 800cdda:	4633      	mov	r3, r6
 800cddc:	f7f3 fa54 	bl	8000288 <__aeabi_dsub>
 800cde0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cde4:	465d      	mov	r5, fp
 800cde6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdea:	f7f3 feb5 	bl	8000b58 <__aeabi_d2iz>
 800cdee:	4606      	mov	r6, r0
 800cdf0:	f7f3 fb98 	bl	8000524 <__aeabi_i2d>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdfc:	f7f3 fa44 	bl	8000288 <__aeabi_dsub>
 800ce00:	3630      	adds	r6, #48	; 0x30
 800ce02:	f805 6b01 	strb.w	r6, [r5], #1
 800ce06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce0a:	e9cd 0100 	strd	r0, r1, [sp]
 800ce0e:	f7f3 fe65 	bl	8000adc <__aeabi_dcmplt>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d163      	bne.n	800cede <_dtoa_r+0x5de>
 800ce16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	4937      	ldr	r1, [pc, #220]	; (800cefc <_dtoa_r+0x5fc>)
 800ce1e:	f7f3 fa33 	bl	8000288 <__aeabi_dsub>
 800ce22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce26:	f7f3 fe59 	bl	8000adc <__aeabi_dcmplt>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f040 80b7 	bne.w	800cf9e <_dtoa_r+0x69e>
 800ce30:	eba5 030b 	sub.w	r3, r5, fp
 800ce34:	429f      	cmp	r7, r3
 800ce36:	f77f af7c 	ble.w	800cd32 <_dtoa_r+0x432>
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	4b30      	ldr	r3, [pc, #192]	; (800cf00 <_dtoa_r+0x600>)
 800ce3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce42:	f7f3 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ce46:	2200      	movs	r2, #0
 800ce48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ce4c:	4b2c      	ldr	r3, [pc, #176]	; (800cf00 <_dtoa_r+0x600>)
 800ce4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce52:	f7f3 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ce56:	e9cd 0100 	strd	r0, r1, [sp]
 800ce5a:	e7c4      	b.n	800cde6 <_dtoa_r+0x4e6>
 800ce5c:	462a      	mov	r2, r5
 800ce5e:	4633      	mov	r3, r6
 800ce60:	f7f3 fbca 	bl	80005f8 <__aeabi_dmul>
 800ce64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ce68:	eb0b 0507 	add.w	r5, fp, r7
 800ce6c:	465e      	mov	r6, fp
 800ce6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce72:	f7f3 fe71 	bl	8000b58 <__aeabi_d2iz>
 800ce76:	4607      	mov	r7, r0
 800ce78:	f7f3 fb54 	bl	8000524 <__aeabi_i2d>
 800ce7c:	3730      	adds	r7, #48	; 0x30
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce86:	f7f3 f9ff 	bl	8000288 <__aeabi_dsub>
 800ce8a:	f806 7b01 	strb.w	r7, [r6], #1
 800ce8e:	42ae      	cmp	r6, r5
 800ce90:	e9cd 0100 	strd	r0, r1, [sp]
 800ce94:	f04f 0200 	mov.w	r2, #0
 800ce98:	d126      	bne.n	800cee8 <_dtoa_r+0x5e8>
 800ce9a:	4b1c      	ldr	r3, [pc, #112]	; (800cf0c <_dtoa_r+0x60c>)
 800ce9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cea0:	f7f3 f9f4 	bl	800028c <__adddf3>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceac:	f7f3 fe34 	bl	8000b18 <__aeabi_dcmpgt>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d174      	bne.n	800cf9e <_dtoa_r+0x69e>
 800ceb4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ceb8:	2000      	movs	r0, #0
 800ceba:	4914      	ldr	r1, [pc, #80]	; (800cf0c <_dtoa_r+0x60c>)
 800cebc:	f7f3 f9e4 	bl	8000288 <__aeabi_dsub>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cec8:	f7f3 fe08 	bl	8000adc <__aeabi_dcmplt>
 800cecc:	2800      	cmp	r0, #0
 800cece:	f43f af30 	beq.w	800cd32 <_dtoa_r+0x432>
 800ced2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ced6:	2b30      	cmp	r3, #48	; 0x30
 800ced8:	f105 32ff 	add.w	r2, r5, #4294967295
 800cedc:	d002      	beq.n	800cee4 <_dtoa_r+0x5e4>
 800cede:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cee2:	e04a      	b.n	800cf7a <_dtoa_r+0x67a>
 800cee4:	4615      	mov	r5, r2
 800cee6:	e7f4      	b.n	800ced2 <_dtoa_r+0x5d2>
 800cee8:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <_dtoa_r+0x600>)
 800ceea:	f7f3 fb85 	bl	80005f8 <__aeabi_dmul>
 800ceee:	e9cd 0100 	strd	r0, r1, [sp]
 800cef2:	e7bc      	b.n	800ce6e <_dtoa_r+0x56e>
 800cef4:	0800ee20 	.word	0x0800ee20
 800cef8:	0800edf8 	.word	0x0800edf8
 800cefc:	3ff00000 	.word	0x3ff00000
 800cf00:	40240000 	.word	0x40240000
 800cf04:	401c0000 	.word	0x401c0000
 800cf08:	40140000 	.word	0x40140000
 800cf0c:	3fe00000 	.word	0x3fe00000
 800cf10:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf14:	465d      	mov	r5, fp
 800cf16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	f7f3 fc95 	bl	800084c <__aeabi_ddiv>
 800cf22:	f7f3 fe19 	bl	8000b58 <__aeabi_d2iz>
 800cf26:	4680      	mov	r8, r0
 800cf28:	f7f3 fafc 	bl	8000524 <__aeabi_i2d>
 800cf2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf30:	f7f3 fb62 	bl	80005f8 <__aeabi_dmul>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4630      	mov	r0, r6
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cf40:	f7f3 f9a2 	bl	8000288 <__aeabi_dsub>
 800cf44:	f805 6b01 	strb.w	r6, [r5], #1
 800cf48:	eba5 060b 	sub.w	r6, r5, fp
 800cf4c:	45b1      	cmp	r9, r6
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	d139      	bne.n	800cfc8 <_dtoa_r+0x6c8>
 800cf54:	f7f3 f99a 	bl	800028c <__adddf3>
 800cf58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	f7f3 fdda 	bl	8000b18 <__aeabi_dcmpgt>
 800cf64:	b9c8      	cbnz	r0, 800cf9a <_dtoa_r+0x69a>
 800cf66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	4639      	mov	r1, r7
 800cf6e:	f7f3 fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf72:	b110      	cbz	r0, 800cf7a <_dtoa_r+0x67a>
 800cf74:	f018 0f01 	tst.w	r8, #1
 800cf78:	d10f      	bne.n	800cf9a <_dtoa_r+0x69a>
 800cf7a:	9904      	ldr	r1, [sp, #16]
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 fe0a 	bl	800db96 <_Bfree>
 800cf82:	2300      	movs	r3, #0
 800cf84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf86:	702b      	strb	r3, [r5, #0]
 800cf88:	f10a 0301 	add.w	r3, sl, #1
 800cf8c:	6013      	str	r3, [r2, #0]
 800cf8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 8241 	beq.w	800d418 <_dtoa_r+0xb18>
 800cf96:	601d      	str	r5, [r3, #0]
 800cf98:	e23e      	b.n	800d418 <_dtoa_r+0xb18>
 800cf9a:	f8cd a020 	str.w	sl, [sp, #32]
 800cf9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cfa2:	2a39      	cmp	r2, #57	; 0x39
 800cfa4:	f105 33ff 	add.w	r3, r5, #4294967295
 800cfa8:	d108      	bne.n	800cfbc <_dtoa_r+0x6bc>
 800cfaa:	459b      	cmp	fp, r3
 800cfac:	d10a      	bne.n	800cfc4 <_dtoa_r+0x6c4>
 800cfae:	9b08      	ldr	r3, [sp, #32]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	9308      	str	r3, [sp, #32]
 800cfb4:	2330      	movs	r3, #48	; 0x30
 800cfb6:	f88b 3000 	strb.w	r3, [fp]
 800cfba:	465b      	mov	r3, fp
 800cfbc:	781a      	ldrb	r2, [r3, #0]
 800cfbe:	3201      	adds	r2, #1
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	e78c      	b.n	800cede <_dtoa_r+0x5de>
 800cfc4:	461d      	mov	r5, r3
 800cfc6:	e7ea      	b.n	800cf9e <_dtoa_r+0x69e>
 800cfc8:	2200      	movs	r2, #0
 800cfca:	4b9b      	ldr	r3, [pc, #620]	; (800d238 <_dtoa_r+0x938>)
 800cfcc:	f7f3 fb14 	bl	80005f8 <__aeabi_dmul>
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	460f      	mov	r7, r1
 800cfd8:	f7f3 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d09a      	beq.n	800cf16 <_dtoa_r+0x616>
 800cfe0:	e7cb      	b.n	800cf7a <_dtoa_r+0x67a>
 800cfe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	f000 808b 	beq.w	800d100 <_dtoa_r+0x800>
 800cfea:	9a06      	ldr	r2, [sp, #24]
 800cfec:	2a01      	cmp	r2, #1
 800cfee:	dc6e      	bgt.n	800d0ce <_dtoa_r+0x7ce>
 800cff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cff2:	2a00      	cmp	r2, #0
 800cff4:	d067      	beq.n	800d0c6 <_dtoa_r+0x7c6>
 800cff6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cffa:	9f07      	ldr	r7, [sp, #28]
 800cffc:	9d05      	ldr	r5, [sp, #20]
 800cffe:	9a05      	ldr	r2, [sp, #20]
 800d000:	2101      	movs	r1, #1
 800d002:	441a      	add	r2, r3
 800d004:	4620      	mov	r0, r4
 800d006:	9205      	str	r2, [sp, #20]
 800d008:	4498      	add	r8, r3
 800d00a:	f000 fea2 	bl	800dd52 <__i2b>
 800d00e:	4606      	mov	r6, r0
 800d010:	2d00      	cmp	r5, #0
 800d012:	dd0c      	ble.n	800d02e <_dtoa_r+0x72e>
 800d014:	f1b8 0f00 	cmp.w	r8, #0
 800d018:	dd09      	ble.n	800d02e <_dtoa_r+0x72e>
 800d01a:	4545      	cmp	r5, r8
 800d01c:	9a05      	ldr	r2, [sp, #20]
 800d01e:	462b      	mov	r3, r5
 800d020:	bfa8      	it	ge
 800d022:	4643      	movge	r3, r8
 800d024:	1ad2      	subs	r2, r2, r3
 800d026:	9205      	str	r2, [sp, #20]
 800d028:	1aed      	subs	r5, r5, r3
 800d02a:	eba8 0803 	sub.w	r8, r8, r3
 800d02e:	9b07      	ldr	r3, [sp, #28]
 800d030:	b1eb      	cbz	r3, 800d06e <_dtoa_r+0x76e>
 800d032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d034:	2b00      	cmp	r3, #0
 800d036:	d067      	beq.n	800d108 <_dtoa_r+0x808>
 800d038:	b18f      	cbz	r7, 800d05e <_dtoa_r+0x75e>
 800d03a:	4631      	mov	r1, r6
 800d03c:	463a      	mov	r2, r7
 800d03e:	4620      	mov	r0, r4
 800d040:	f000 ff26 	bl	800de90 <__pow5mult>
 800d044:	9a04      	ldr	r2, [sp, #16]
 800d046:	4601      	mov	r1, r0
 800d048:	4606      	mov	r6, r0
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 fe8a 	bl	800dd64 <__multiply>
 800d050:	9904      	ldr	r1, [sp, #16]
 800d052:	9008      	str	r0, [sp, #32]
 800d054:	4620      	mov	r0, r4
 800d056:	f000 fd9e 	bl	800db96 <_Bfree>
 800d05a:	9b08      	ldr	r3, [sp, #32]
 800d05c:	9304      	str	r3, [sp, #16]
 800d05e:	9b07      	ldr	r3, [sp, #28]
 800d060:	1bda      	subs	r2, r3, r7
 800d062:	d004      	beq.n	800d06e <_dtoa_r+0x76e>
 800d064:	9904      	ldr	r1, [sp, #16]
 800d066:	4620      	mov	r0, r4
 800d068:	f000 ff12 	bl	800de90 <__pow5mult>
 800d06c:	9004      	str	r0, [sp, #16]
 800d06e:	2101      	movs	r1, #1
 800d070:	4620      	mov	r0, r4
 800d072:	f000 fe6e 	bl	800dd52 <__i2b>
 800d076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d078:	4607      	mov	r7, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f000 81d0 	beq.w	800d420 <_dtoa_r+0xb20>
 800d080:	461a      	mov	r2, r3
 800d082:	4601      	mov	r1, r0
 800d084:	4620      	mov	r0, r4
 800d086:	f000 ff03 	bl	800de90 <__pow5mult>
 800d08a:	9b06      	ldr	r3, [sp, #24]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	4607      	mov	r7, r0
 800d090:	dc40      	bgt.n	800d114 <_dtoa_r+0x814>
 800d092:	9b00      	ldr	r3, [sp, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d139      	bne.n	800d10c <_dtoa_r+0x80c>
 800d098:	9b01      	ldr	r3, [sp, #4]
 800d09a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d136      	bne.n	800d110 <_dtoa_r+0x810>
 800d0a2:	9b01      	ldr	r3, [sp, #4]
 800d0a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0a8:	0d1b      	lsrs	r3, r3, #20
 800d0aa:	051b      	lsls	r3, r3, #20
 800d0ac:	b12b      	cbz	r3, 800d0ba <_dtoa_r+0x7ba>
 800d0ae:	9b05      	ldr	r3, [sp, #20]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	9305      	str	r3, [sp, #20]
 800d0b4:	f108 0801 	add.w	r8, r8, #1
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	9307      	str	r3, [sp, #28]
 800d0bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d12a      	bne.n	800d118 <_dtoa_r+0x818>
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	e030      	b.n	800d128 <_dtoa_r+0x828>
 800d0c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0cc:	e795      	b.n	800cffa <_dtoa_r+0x6fa>
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	f109 37ff 	add.w	r7, r9, #4294967295
 800d0d4:	42bb      	cmp	r3, r7
 800d0d6:	bfbf      	itttt	lt
 800d0d8:	9b07      	ldrlt	r3, [sp, #28]
 800d0da:	9707      	strlt	r7, [sp, #28]
 800d0dc:	1afa      	sublt	r2, r7, r3
 800d0de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d0e0:	bfbb      	ittet	lt
 800d0e2:	189b      	addlt	r3, r3, r2
 800d0e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d0e6:	1bdf      	subge	r7, r3, r7
 800d0e8:	2700      	movlt	r7, #0
 800d0ea:	f1b9 0f00 	cmp.w	r9, #0
 800d0ee:	bfb5      	itete	lt
 800d0f0:	9b05      	ldrlt	r3, [sp, #20]
 800d0f2:	9d05      	ldrge	r5, [sp, #20]
 800d0f4:	eba3 0509 	sublt.w	r5, r3, r9
 800d0f8:	464b      	movge	r3, r9
 800d0fa:	bfb8      	it	lt
 800d0fc:	2300      	movlt	r3, #0
 800d0fe:	e77e      	b.n	800cffe <_dtoa_r+0x6fe>
 800d100:	9f07      	ldr	r7, [sp, #28]
 800d102:	9d05      	ldr	r5, [sp, #20]
 800d104:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d106:	e783      	b.n	800d010 <_dtoa_r+0x710>
 800d108:	9a07      	ldr	r2, [sp, #28]
 800d10a:	e7ab      	b.n	800d064 <_dtoa_r+0x764>
 800d10c:	2300      	movs	r3, #0
 800d10e:	e7d4      	b.n	800d0ba <_dtoa_r+0x7ba>
 800d110:	9b00      	ldr	r3, [sp, #0]
 800d112:	e7d2      	b.n	800d0ba <_dtoa_r+0x7ba>
 800d114:	2300      	movs	r3, #0
 800d116:	9307      	str	r3, [sp, #28]
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d11e:	6918      	ldr	r0, [r3, #16]
 800d120:	f000 fdc9 	bl	800dcb6 <__hi0bits>
 800d124:	f1c0 0020 	rsb	r0, r0, #32
 800d128:	4440      	add	r0, r8
 800d12a:	f010 001f 	ands.w	r0, r0, #31
 800d12e:	d047      	beq.n	800d1c0 <_dtoa_r+0x8c0>
 800d130:	f1c0 0320 	rsb	r3, r0, #32
 800d134:	2b04      	cmp	r3, #4
 800d136:	dd3b      	ble.n	800d1b0 <_dtoa_r+0x8b0>
 800d138:	9b05      	ldr	r3, [sp, #20]
 800d13a:	f1c0 001c 	rsb	r0, r0, #28
 800d13e:	4403      	add	r3, r0
 800d140:	9305      	str	r3, [sp, #20]
 800d142:	4405      	add	r5, r0
 800d144:	4480      	add	r8, r0
 800d146:	9b05      	ldr	r3, [sp, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	dd05      	ble.n	800d158 <_dtoa_r+0x858>
 800d14c:	461a      	mov	r2, r3
 800d14e:	9904      	ldr	r1, [sp, #16]
 800d150:	4620      	mov	r0, r4
 800d152:	f000 feeb 	bl	800df2c <__lshift>
 800d156:	9004      	str	r0, [sp, #16]
 800d158:	f1b8 0f00 	cmp.w	r8, #0
 800d15c:	dd05      	ble.n	800d16a <_dtoa_r+0x86a>
 800d15e:	4639      	mov	r1, r7
 800d160:	4642      	mov	r2, r8
 800d162:	4620      	mov	r0, r4
 800d164:	f000 fee2 	bl	800df2c <__lshift>
 800d168:	4607      	mov	r7, r0
 800d16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d16c:	b353      	cbz	r3, 800d1c4 <_dtoa_r+0x8c4>
 800d16e:	4639      	mov	r1, r7
 800d170:	9804      	ldr	r0, [sp, #16]
 800d172:	f000 ff2f 	bl	800dfd4 <__mcmp>
 800d176:	2800      	cmp	r0, #0
 800d178:	da24      	bge.n	800d1c4 <_dtoa_r+0x8c4>
 800d17a:	2300      	movs	r3, #0
 800d17c:	220a      	movs	r2, #10
 800d17e:	9904      	ldr	r1, [sp, #16]
 800d180:	4620      	mov	r0, r4
 800d182:	f000 fd1f 	bl	800dbc4 <__multadd>
 800d186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d188:	9004      	str	r0, [sp, #16]
 800d18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 814d 	beq.w	800d42e <_dtoa_r+0xb2e>
 800d194:	2300      	movs	r3, #0
 800d196:	4631      	mov	r1, r6
 800d198:	220a      	movs	r2, #10
 800d19a:	4620      	mov	r0, r4
 800d19c:	f000 fd12 	bl	800dbc4 <__multadd>
 800d1a0:	9b02      	ldr	r3, [sp, #8]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	dc4f      	bgt.n	800d248 <_dtoa_r+0x948>
 800d1a8:	9b06      	ldr	r3, [sp, #24]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	dd4c      	ble.n	800d248 <_dtoa_r+0x948>
 800d1ae:	e011      	b.n	800d1d4 <_dtoa_r+0x8d4>
 800d1b0:	d0c9      	beq.n	800d146 <_dtoa_r+0x846>
 800d1b2:	9a05      	ldr	r2, [sp, #20]
 800d1b4:	331c      	adds	r3, #28
 800d1b6:	441a      	add	r2, r3
 800d1b8:	9205      	str	r2, [sp, #20]
 800d1ba:	441d      	add	r5, r3
 800d1bc:	4498      	add	r8, r3
 800d1be:	e7c2      	b.n	800d146 <_dtoa_r+0x846>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	e7f6      	b.n	800d1b2 <_dtoa_r+0x8b2>
 800d1c4:	f1b9 0f00 	cmp.w	r9, #0
 800d1c8:	dc38      	bgt.n	800d23c <_dtoa_r+0x93c>
 800d1ca:	9b06      	ldr	r3, [sp, #24]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	dd35      	ble.n	800d23c <_dtoa_r+0x93c>
 800d1d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	b963      	cbnz	r3, 800d1f2 <_dtoa_r+0x8f2>
 800d1d8:	4639      	mov	r1, r7
 800d1da:	2205      	movs	r2, #5
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f000 fcf1 	bl	800dbc4 <__multadd>
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	4607      	mov	r7, r0
 800d1e6:	9804      	ldr	r0, [sp, #16]
 800d1e8:	f000 fef4 	bl	800dfd4 <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	f73f adcc 	bgt.w	800cd8a <_dtoa_r+0x48a>
 800d1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1f4:	465d      	mov	r5, fp
 800d1f6:	ea6f 0a03 	mvn.w	sl, r3
 800d1fa:	f04f 0900 	mov.w	r9, #0
 800d1fe:	4639      	mov	r1, r7
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fcc8 	bl	800db96 <_Bfree>
 800d206:	2e00      	cmp	r6, #0
 800d208:	f43f aeb7 	beq.w	800cf7a <_dtoa_r+0x67a>
 800d20c:	f1b9 0f00 	cmp.w	r9, #0
 800d210:	d005      	beq.n	800d21e <_dtoa_r+0x91e>
 800d212:	45b1      	cmp	r9, r6
 800d214:	d003      	beq.n	800d21e <_dtoa_r+0x91e>
 800d216:	4649      	mov	r1, r9
 800d218:	4620      	mov	r0, r4
 800d21a:	f000 fcbc 	bl	800db96 <_Bfree>
 800d21e:	4631      	mov	r1, r6
 800d220:	4620      	mov	r0, r4
 800d222:	f000 fcb8 	bl	800db96 <_Bfree>
 800d226:	e6a8      	b.n	800cf7a <_dtoa_r+0x67a>
 800d228:	2700      	movs	r7, #0
 800d22a:	463e      	mov	r6, r7
 800d22c:	e7e1      	b.n	800d1f2 <_dtoa_r+0x8f2>
 800d22e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d232:	463e      	mov	r6, r7
 800d234:	e5a9      	b.n	800cd8a <_dtoa_r+0x48a>
 800d236:	bf00      	nop
 800d238:	40240000 	.word	0x40240000
 800d23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d23e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 80fa 	beq.w	800d43c <_dtoa_r+0xb3c>
 800d248:	2d00      	cmp	r5, #0
 800d24a:	dd05      	ble.n	800d258 <_dtoa_r+0x958>
 800d24c:	4631      	mov	r1, r6
 800d24e:	462a      	mov	r2, r5
 800d250:	4620      	mov	r0, r4
 800d252:	f000 fe6b 	bl	800df2c <__lshift>
 800d256:	4606      	mov	r6, r0
 800d258:	9b07      	ldr	r3, [sp, #28]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d04c      	beq.n	800d2f8 <_dtoa_r+0x9f8>
 800d25e:	6871      	ldr	r1, [r6, #4]
 800d260:	4620      	mov	r0, r4
 800d262:	f000 fc64 	bl	800db2e <_Balloc>
 800d266:	6932      	ldr	r2, [r6, #16]
 800d268:	3202      	adds	r2, #2
 800d26a:	4605      	mov	r5, r0
 800d26c:	0092      	lsls	r2, r2, #2
 800d26e:	f106 010c 	add.w	r1, r6, #12
 800d272:	300c      	adds	r0, #12
 800d274:	f000 fc50 	bl	800db18 <memcpy>
 800d278:	2201      	movs	r2, #1
 800d27a:	4629      	mov	r1, r5
 800d27c:	4620      	mov	r0, r4
 800d27e:	f000 fe55 	bl	800df2c <__lshift>
 800d282:	9b00      	ldr	r3, [sp, #0]
 800d284:	f8cd b014 	str.w	fp, [sp, #20]
 800d288:	f003 0301 	and.w	r3, r3, #1
 800d28c:	46b1      	mov	r9, r6
 800d28e:	9307      	str	r3, [sp, #28]
 800d290:	4606      	mov	r6, r0
 800d292:	4639      	mov	r1, r7
 800d294:	9804      	ldr	r0, [sp, #16]
 800d296:	f7ff faa5 	bl	800c7e4 <quorem>
 800d29a:	4649      	mov	r1, r9
 800d29c:	4605      	mov	r5, r0
 800d29e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2a2:	9804      	ldr	r0, [sp, #16]
 800d2a4:	f000 fe96 	bl	800dfd4 <__mcmp>
 800d2a8:	4632      	mov	r2, r6
 800d2aa:	9000      	str	r0, [sp, #0]
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 feaa 	bl	800e008 <__mdiff>
 800d2b4:	68c3      	ldr	r3, [r0, #12]
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	bb03      	cbnz	r3, 800d2fc <_dtoa_r+0x9fc>
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	9008      	str	r0, [sp, #32]
 800d2be:	9804      	ldr	r0, [sp, #16]
 800d2c0:	f000 fe88 	bl	800dfd4 <__mcmp>
 800d2c4:	9a08      	ldr	r2, [sp, #32]
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	9308      	str	r3, [sp, #32]
 800d2ce:	f000 fc62 	bl	800db96 <_Bfree>
 800d2d2:	9b08      	ldr	r3, [sp, #32]
 800d2d4:	b9a3      	cbnz	r3, 800d300 <_dtoa_r+0xa00>
 800d2d6:	9a06      	ldr	r2, [sp, #24]
 800d2d8:	b992      	cbnz	r2, 800d300 <_dtoa_r+0xa00>
 800d2da:	9a07      	ldr	r2, [sp, #28]
 800d2dc:	b982      	cbnz	r2, 800d300 <_dtoa_r+0xa00>
 800d2de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d2e2:	d029      	beq.n	800d338 <_dtoa_r+0xa38>
 800d2e4:	9b00      	ldr	r3, [sp, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	dd01      	ble.n	800d2ee <_dtoa_r+0x9ee>
 800d2ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d2ee:	9b05      	ldr	r3, [sp, #20]
 800d2f0:	1c5d      	adds	r5, r3, #1
 800d2f2:	f883 8000 	strb.w	r8, [r3]
 800d2f6:	e782      	b.n	800d1fe <_dtoa_r+0x8fe>
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	e7c2      	b.n	800d282 <_dtoa_r+0x982>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e7e3      	b.n	800d2c8 <_dtoa_r+0x9c8>
 800d300:	9a00      	ldr	r2, [sp, #0]
 800d302:	2a00      	cmp	r2, #0
 800d304:	db04      	blt.n	800d310 <_dtoa_r+0xa10>
 800d306:	d125      	bne.n	800d354 <_dtoa_r+0xa54>
 800d308:	9a06      	ldr	r2, [sp, #24]
 800d30a:	bb1a      	cbnz	r2, 800d354 <_dtoa_r+0xa54>
 800d30c:	9a07      	ldr	r2, [sp, #28]
 800d30e:	bb0a      	cbnz	r2, 800d354 <_dtoa_r+0xa54>
 800d310:	2b00      	cmp	r3, #0
 800d312:	ddec      	ble.n	800d2ee <_dtoa_r+0x9ee>
 800d314:	2201      	movs	r2, #1
 800d316:	9904      	ldr	r1, [sp, #16]
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 fe07 	bl	800df2c <__lshift>
 800d31e:	4639      	mov	r1, r7
 800d320:	9004      	str	r0, [sp, #16]
 800d322:	f000 fe57 	bl	800dfd4 <__mcmp>
 800d326:	2800      	cmp	r0, #0
 800d328:	dc03      	bgt.n	800d332 <_dtoa_r+0xa32>
 800d32a:	d1e0      	bne.n	800d2ee <_dtoa_r+0x9ee>
 800d32c:	f018 0f01 	tst.w	r8, #1
 800d330:	d0dd      	beq.n	800d2ee <_dtoa_r+0x9ee>
 800d332:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d336:	d1d8      	bne.n	800d2ea <_dtoa_r+0x9ea>
 800d338:	9b05      	ldr	r3, [sp, #20]
 800d33a:	9a05      	ldr	r2, [sp, #20]
 800d33c:	1c5d      	adds	r5, r3, #1
 800d33e:	2339      	movs	r3, #57	; 0x39
 800d340:	7013      	strb	r3, [r2, #0]
 800d342:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d346:	2b39      	cmp	r3, #57	; 0x39
 800d348:	f105 32ff 	add.w	r2, r5, #4294967295
 800d34c:	d04f      	beq.n	800d3ee <_dtoa_r+0xaee>
 800d34e:	3301      	adds	r3, #1
 800d350:	7013      	strb	r3, [r2, #0]
 800d352:	e754      	b.n	800d1fe <_dtoa_r+0x8fe>
 800d354:	9a05      	ldr	r2, [sp, #20]
 800d356:	2b00      	cmp	r3, #0
 800d358:	f102 0501 	add.w	r5, r2, #1
 800d35c:	dd06      	ble.n	800d36c <_dtoa_r+0xa6c>
 800d35e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d362:	d0e9      	beq.n	800d338 <_dtoa_r+0xa38>
 800d364:	f108 0801 	add.w	r8, r8, #1
 800d368:	9b05      	ldr	r3, [sp, #20]
 800d36a:	e7c2      	b.n	800d2f2 <_dtoa_r+0x9f2>
 800d36c:	9a02      	ldr	r2, [sp, #8]
 800d36e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d372:	eba5 030b 	sub.w	r3, r5, fp
 800d376:	4293      	cmp	r3, r2
 800d378:	d021      	beq.n	800d3be <_dtoa_r+0xabe>
 800d37a:	2300      	movs	r3, #0
 800d37c:	220a      	movs	r2, #10
 800d37e:	9904      	ldr	r1, [sp, #16]
 800d380:	4620      	mov	r0, r4
 800d382:	f000 fc1f 	bl	800dbc4 <__multadd>
 800d386:	45b1      	cmp	r9, r6
 800d388:	9004      	str	r0, [sp, #16]
 800d38a:	f04f 0300 	mov.w	r3, #0
 800d38e:	f04f 020a 	mov.w	r2, #10
 800d392:	4649      	mov	r1, r9
 800d394:	4620      	mov	r0, r4
 800d396:	d105      	bne.n	800d3a4 <_dtoa_r+0xaa4>
 800d398:	f000 fc14 	bl	800dbc4 <__multadd>
 800d39c:	4681      	mov	r9, r0
 800d39e:	4606      	mov	r6, r0
 800d3a0:	9505      	str	r5, [sp, #20]
 800d3a2:	e776      	b.n	800d292 <_dtoa_r+0x992>
 800d3a4:	f000 fc0e 	bl	800dbc4 <__multadd>
 800d3a8:	4631      	mov	r1, r6
 800d3aa:	4681      	mov	r9, r0
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	220a      	movs	r2, #10
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f000 fc07 	bl	800dbc4 <__multadd>
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	e7f2      	b.n	800d3a0 <_dtoa_r+0xaa0>
 800d3ba:	f04f 0900 	mov.w	r9, #0
 800d3be:	2201      	movs	r2, #1
 800d3c0:	9904      	ldr	r1, [sp, #16]
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fdb2 	bl	800df2c <__lshift>
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	9004      	str	r0, [sp, #16]
 800d3cc:	f000 fe02 	bl	800dfd4 <__mcmp>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	dcb6      	bgt.n	800d342 <_dtoa_r+0xa42>
 800d3d4:	d102      	bne.n	800d3dc <_dtoa_r+0xadc>
 800d3d6:	f018 0f01 	tst.w	r8, #1
 800d3da:	d1b2      	bne.n	800d342 <_dtoa_r+0xa42>
 800d3dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3e0:	2b30      	cmp	r3, #48	; 0x30
 800d3e2:	f105 32ff 	add.w	r2, r5, #4294967295
 800d3e6:	f47f af0a 	bne.w	800d1fe <_dtoa_r+0x8fe>
 800d3ea:	4615      	mov	r5, r2
 800d3ec:	e7f6      	b.n	800d3dc <_dtoa_r+0xadc>
 800d3ee:	4593      	cmp	fp, r2
 800d3f0:	d105      	bne.n	800d3fe <_dtoa_r+0xafe>
 800d3f2:	2331      	movs	r3, #49	; 0x31
 800d3f4:	f10a 0a01 	add.w	sl, sl, #1
 800d3f8:	f88b 3000 	strb.w	r3, [fp]
 800d3fc:	e6ff      	b.n	800d1fe <_dtoa_r+0x8fe>
 800d3fe:	4615      	mov	r5, r2
 800d400:	e79f      	b.n	800d342 <_dtoa_r+0xa42>
 800d402:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d468 <_dtoa_r+0xb68>
 800d406:	e007      	b.n	800d418 <_dtoa_r+0xb18>
 800d408:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d40a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d46c <_dtoa_r+0xb6c>
 800d40e:	b11b      	cbz	r3, 800d418 <_dtoa_r+0xb18>
 800d410:	f10b 0308 	add.w	r3, fp, #8
 800d414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d416:	6013      	str	r3, [r2, #0]
 800d418:	4658      	mov	r0, fp
 800d41a:	b017      	add	sp, #92	; 0x5c
 800d41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d420:	9b06      	ldr	r3, [sp, #24]
 800d422:	2b01      	cmp	r3, #1
 800d424:	f77f ae35 	ble.w	800d092 <_dtoa_r+0x792>
 800d428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d42a:	9307      	str	r3, [sp, #28]
 800d42c:	e649      	b.n	800d0c2 <_dtoa_r+0x7c2>
 800d42e:	9b02      	ldr	r3, [sp, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	dc03      	bgt.n	800d43c <_dtoa_r+0xb3c>
 800d434:	9b06      	ldr	r3, [sp, #24]
 800d436:	2b02      	cmp	r3, #2
 800d438:	f73f aecc 	bgt.w	800d1d4 <_dtoa_r+0x8d4>
 800d43c:	465d      	mov	r5, fp
 800d43e:	4639      	mov	r1, r7
 800d440:	9804      	ldr	r0, [sp, #16]
 800d442:	f7ff f9cf 	bl	800c7e4 <quorem>
 800d446:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d44a:	f805 8b01 	strb.w	r8, [r5], #1
 800d44e:	9a02      	ldr	r2, [sp, #8]
 800d450:	eba5 030b 	sub.w	r3, r5, fp
 800d454:	429a      	cmp	r2, r3
 800d456:	ddb0      	ble.n	800d3ba <_dtoa_r+0xaba>
 800d458:	2300      	movs	r3, #0
 800d45a:	220a      	movs	r2, #10
 800d45c:	9904      	ldr	r1, [sp, #16]
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fbb0 	bl	800dbc4 <__multadd>
 800d464:	9004      	str	r0, [sp, #16]
 800d466:	e7ea      	b.n	800d43e <_dtoa_r+0xb3e>
 800d468:	0800ed60 	.word	0x0800ed60
 800d46c:	0800ede0 	.word	0x0800ede0

0800d470 <rshift>:
 800d470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d472:	6906      	ldr	r6, [r0, #16]
 800d474:	114b      	asrs	r3, r1, #5
 800d476:	429e      	cmp	r6, r3
 800d478:	f100 0414 	add.w	r4, r0, #20
 800d47c:	dd30      	ble.n	800d4e0 <rshift+0x70>
 800d47e:	f011 011f 	ands.w	r1, r1, #31
 800d482:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d486:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d48a:	d108      	bne.n	800d49e <rshift+0x2e>
 800d48c:	4621      	mov	r1, r4
 800d48e:	42b2      	cmp	r2, r6
 800d490:	460b      	mov	r3, r1
 800d492:	d211      	bcs.n	800d4b8 <rshift+0x48>
 800d494:	f852 3b04 	ldr.w	r3, [r2], #4
 800d498:	f841 3b04 	str.w	r3, [r1], #4
 800d49c:	e7f7      	b.n	800d48e <rshift+0x1e>
 800d49e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d4a2:	f1c1 0c20 	rsb	ip, r1, #32
 800d4a6:	40cd      	lsrs	r5, r1
 800d4a8:	3204      	adds	r2, #4
 800d4aa:	4623      	mov	r3, r4
 800d4ac:	42b2      	cmp	r2, r6
 800d4ae:	4617      	mov	r7, r2
 800d4b0:	d30c      	bcc.n	800d4cc <rshift+0x5c>
 800d4b2:	601d      	str	r5, [r3, #0]
 800d4b4:	b105      	cbz	r5, 800d4b8 <rshift+0x48>
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	1b1a      	subs	r2, r3, r4
 800d4ba:	42a3      	cmp	r3, r4
 800d4bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d4c0:	bf08      	it	eq
 800d4c2:	2300      	moveq	r3, #0
 800d4c4:	6102      	str	r2, [r0, #16]
 800d4c6:	bf08      	it	eq
 800d4c8:	6143      	streq	r3, [r0, #20]
 800d4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4cc:	683f      	ldr	r7, [r7, #0]
 800d4ce:	fa07 f70c 	lsl.w	r7, r7, ip
 800d4d2:	433d      	orrs	r5, r7
 800d4d4:	f843 5b04 	str.w	r5, [r3], #4
 800d4d8:	f852 5b04 	ldr.w	r5, [r2], #4
 800d4dc:	40cd      	lsrs	r5, r1
 800d4de:	e7e5      	b.n	800d4ac <rshift+0x3c>
 800d4e0:	4623      	mov	r3, r4
 800d4e2:	e7e9      	b.n	800d4b8 <rshift+0x48>

0800d4e4 <__hexdig_fun>:
 800d4e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d4e8:	2b09      	cmp	r3, #9
 800d4ea:	d802      	bhi.n	800d4f2 <__hexdig_fun+0xe>
 800d4ec:	3820      	subs	r0, #32
 800d4ee:	b2c0      	uxtb	r0, r0
 800d4f0:	4770      	bx	lr
 800d4f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d4f6:	2b05      	cmp	r3, #5
 800d4f8:	d801      	bhi.n	800d4fe <__hexdig_fun+0x1a>
 800d4fa:	3847      	subs	r0, #71	; 0x47
 800d4fc:	e7f7      	b.n	800d4ee <__hexdig_fun+0xa>
 800d4fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d502:	2b05      	cmp	r3, #5
 800d504:	d801      	bhi.n	800d50a <__hexdig_fun+0x26>
 800d506:	3827      	subs	r0, #39	; 0x27
 800d508:	e7f1      	b.n	800d4ee <__hexdig_fun+0xa>
 800d50a:	2000      	movs	r0, #0
 800d50c:	4770      	bx	lr

0800d50e <__gethex>:
 800d50e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d512:	b08b      	sub	sp, #44	; 0x2c
 800d514:	468a      	mov	sl, r1
 800d516:	9002      	str	r0, [sp, #8]
 800d518:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d51a:	9306      	str	r3, [sp, #24]
 800d51c:	4690      	mov	r8, r2
 800d51e:	f000 fad0 	bl	800dac2 <__localeconv_l>
 800d522:	6803      	ldr	r3, [r0, #0]
 800d524:	9303      	str	r3, [sp, #12]
 800d526:	4618      	mov	r0, r3
 800d528:	f7f2 fe52 	bl	80001d0 <strlen>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	9001      	str	r0, [sp, #4]
 800d530:	4403      	add	r3, r0
 800d532:	f04f 0b00 	mov.w	fp, #0
 800d536:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d53a:	9307      	str	r3, [sp, #28]
 800d53c:	f8da 3000 	ldr.w	r3, [sl]
 800d540:	3302      	adds	r3, #2
 800d542:	461f      	mov	r7, r3
 800d544:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d548:	2830      	cmp	r0, #48	; 0x30
 800d54a:	d06c      	beq.n	800d626 <__gethex+0x118>
 800d54c:	f7ff ffca 	bl	800d4e4 <__hexdig_fun>
 800d550:	4604      	mov	r4, r0
 800d552:	2800      	cmp	r0, #0
 800d554:	d16a      	bne.n	800d62c <__gethex+0x11e>
 800d556:	9a01      	ldr	r2, [sp, #4]
 800d558:	9903      	ldr	r1, [sp, #12]
 800d55a:	4638      	mov	r0, r7
 800d55c:	f001 f8fe 	bl	800e75c <strncmp>
 800d560:	2800      	cmp	r0, #0
 800d562:	d166      	bne.n	800d632 <__gethex+0x124>
 800d564:	9b01      	ldr	r3, [sp, #4]
 800d566:	5cf8      	ldrb	r0, [r7, r3]
 800d568:	18fe      	adds	r6, r7, r3
 800d56a:	f7ff ffbb 	bl	800d4e4 <__hexdig_fun>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d062      	beq.n	800d638 <__gethex+0x12a>
 800d572:	4633      	mov	r3, r6
 800d574:	7818      	ldrb	r0, [r3, #0]
 800d576:	2830      	cmp	r0, #48	; 0x30
 800d578:	461f      	mov	r7, r3
 800d57a:	f103 0301 	add.w	r3, r3, #1
 800d57e:	d0f9      	beq.n	800d574 <__gethex+0x66>
 800d580:	f7ff ffb0 	bl	800d4e4 <__hexdig_fun>
 800d584:	fab0 f580 	clz	r5, r0
 800d588:	096d      	lsrs	r5, r5, #5
 800d58a:	4634      	mov	r4, r6
 800d58c:	f04f 0b01 	mov.w	fp, #1
 800d590:	463a      	mov	r2, r7
 800d592:	4616      	mov	r6, r2
 800d594:	3201      	adds	r2, #1
 800d596:	7830      	ldrb	r0, [r6, #0]
 800d598:	f7ff ffa4 	bl	800d4e4 <__hexdig_fun>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d1f8      	bne.n	800d592 <__gethex+0x84>
 800d5a0:	9a01      	ldr	r2, [sp, #4]
 800d5a2:	9903      	ldr	r1, [sp, #12]
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f001 f8d9 	bl	800e75c <strncmp>
 800d5aa:	b950      	cbnz	r0, 800d5c2 <__gethex+0xb4>
 800d5ac:	b954      	cbnz	r4, 800d5c4 <__gethex+0xb6>
 800d5ae:	9b01      	ldr	r3, [sp, #4]
 800d5b0:	18f4      	adds	r4, r6, r3
 800d5b2:	4622      	mov	r2, r4
 800d5b4:	4616      	mov	r6, r2
 800d5b6:	3201      	adds	r2, #1
 800d5b8:	7830      	ldrb	r0, [r6, #0]
 800d5ba:	f7ff ff93 	bl	800d4e4 <__hexdig_fun>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d1f8      	bne.n	800d5b4 <__gethex+0xa6>
 800d5c2:	b10c      	cbz	r4, 800d5c8 <__gethex+0xba>
 800d5c4:	1ba4      	subs	r4, r4, r6
 800d5c6:	00a4      	lsls	r4, r4, #2
 800d5c8:	7833      	ldrb	r3, [r6, #0]
 800d5ca:	2b50      	cmp	r3, #80	; 0x50
 800d5cc:	d001      	beq.n	800d5d2 <__gethex+0xc4>
 800d5ce:	2b70      	cmp	r3, #112	; 0x70
 800d5d0:	d140      	bne.n	800d654 <__gethex+0x146>
 800d5d2:	7873      	ldrb	r3, [r6, #1]
 800d5d4:	2b2b      	cmp	r3, #43	; 0x2b
 800d5d6:	d031      	beq.n	800d63c <__gethex+0x12e>
 800d5d8:	2b2d      	cmp	r3, #45	; 0x2d
 800d5da:	d033      	beq.n	800d644 <__gethex+0x136>
 800d5dc:	1c71      	adds	r1, r6, #1
 800d5de:	f04f 0900 	mov.w	r9, #0
 800d5e2:	7808      	ldrb	r0, [r1, #0]
 800d5e4:	f7ff ff7e 	bl	800d4e4 <__hexdig_fun>
 800d5e8:	1e43      	subs	r3, r0, #1
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b18      	cmp	r3, #24
 800d5ee:	d831      	bhi.n	800d654 <__gethex+0x146>
 800d5f0:	f1a0 0210 	sub.w	r2, r0, #16
 800d5f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d5f8:	f7ff ff74 	bl	800d4e4 <__hexdig_fun>
 800d5fc:	1e43      	subs	r3, r0, #1
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	2b18      	cmp	r3, #24
 800d602:	d922      	bls.n	800d64a <__gethex+0x13c>
 800d604:	f1b9 0f00 	cmp.w	r9, #0
 800d608:	d000      	beq.n	800d60c <__gethex+0xfe>
 800d60a:	4252      	negs	r2, r2
 800d60c:	4414      	add	r4, r2
 800d60e:	f8ca 1000 	str.w	r1, [sl]
 800d612:	b30d      	cbz	r5, 800d658 <__gethex+0x14a>
 800d614:	f1bb 0f00 	cmp.w	fp, #0
 800d618:	bf0c      	ite	eq
 800d61a:	2706      	moveq	r7, #6
 800d61c:	2700      	movne	r7, #0
 800d61e:	4638      	mov	r0, r7
 800d620:	b00b      	add	sp, #44	; 0x2c
 800d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d626:	f10b 0b01 	add.w	fp, fp, #1
 800d62a:	e78a      	b.n	800d542 <__gethex+0x34>
 800d62c:	2500      	movs	r5, #0
 800d62e:	462c      	mov	r4, r5
 800d630:	e7ae      	b.n	800d590 <__gethex+0x82>
 800d632:	463e      	mov	r6, r7
 800d634:	2501      	movs	r5, #1
 800d636:	e7c7      	b.n	800d5c8 <__gethex+0xba>
 800d638:	4604      	mov	r4, r0
 800d63a:	e7fb      	b.n	800d634 <__gethex+0x126>
 800d63c:	f04f 0900 	mov.w	r9, #0
 800d640:	1cb1      	adds	r1, r6, #2
 800d642:	e7ce      	b.n	800d5e2 <__gethex+0xd4>
 800d644:	f04f 0901 	mov.w	r9, #1
 800d648:	e7fa      	b.n	800d640 <__gethex+0x132>
 800d64a:	230a      	movs	r3, #10
 800d64c:	fb03 0202 	mla	r2, r3, r2, r0
 800d650:	3a10      	subs	r2, #16
 800d652:	e7cf      	b.n	800d5f4 <__gethex+0xe6>
 800d654:	4631      	mov	r1, r6
 800d656:	e7da      	b.n	800d60e <__gethex+0x100>
 800d658:	1bf3      	subs	r3, r6, r7
 800d65a:	3b01      	subs	r3, #1
 800d65c:	4629      	mov	r1, r5
 800d65e:	2b07      	cmp	r3, #7
 800d660:	dc49      	bgt.n	800d6f6 <__gethex+0x1e8>
 800d662:	9802      	ldr	r0, [sp, #8]
 800d664:	f000 fa63 	bl	800db2e <_Balloc>
 800d668:	9b01      	ldr	r3, [sp, #4]
 800d66a:	f100 0914 	add.w	r9, r0, #20
 800d66e:	f04f 0b00 	mov.w	fp, #0
 800d672:	f1c3 0301 	rsb	r3, r3, #1
 800d676:	4605      	mov	r5, r0
 800d678:	f8cd 9010 	str.w	r9, [sp, #16]
 800d67c:	46da      	mov	sl, fp
 800d67e:	9308      	str	r3, [sp, #32]
 800d680:	42b7      	cmp	r7, r6
 800d682:	d33b      	bcc.n	800d6fc <__gethex+0x1ee>
 800d684:	9804      	ldr	r0, [sp, #16]
 800d686:	f840 ab04 	str.w	sl, [r0], #4
 800d68a:	eba0 0009 	sub.w	r0, r0, r9
 800d68e:	1080      	asrs	r0, r0, #2
 800d690:	6128      	str	r0, [r5, #16]
 800d692:	0147      	lsls	r7, r0, #5
 800d694:	4650      	mov	r0, sl
 800d696:	f000 fb0e 	bl	800dcb6 <__hi0bits>
 800d69a:	f8d8 6000 	ldr.w	r6, [r8]
 800d69e:	1a3f      	subs	r7, r7, r0
 800d6a0:	42b7      	cmp	r7, r6
 800d6a2:	dd64      	ble.n	800d76e <__gethex+0x260>
 800d6a4:	1bbf      	subs	r7, r7, r6
 800d6a6:	4639      	mov	r1, r7
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f000 fe1d 	bl	800e2e8 <__any_on>
 800d6ae:	4682      	mov	sl, r0
 800d6b0:	b178      	cbz	r0, 800d6d2 <__gethex+0x1c4>
 800d6b2:	1e7b      	subs	r3, r7, #1
 800d6b4:	1159      	asrs	r1, r3, #5
 800d6b6:	f003 021f 	and.w	r2, r3, #31
 800d6ba:	f04f 0a01 	mov.w	sl, #1
 800d6be:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d6c2:	fa0a f202 	lsl.w	r2, sl, r2
 800d6c6:	420a      	tst	r2, r1
 800d6c8:	d003      	beq.n	800d6d2 <__gethex+0x1c4>
 800d6ca:	4553      	cmp	r3, sl
 800d6cc:	dc46      	bgt.n	800d75c <__gethex+0x24e>
 800d6ce:	f04f 0a02 	mov.w	sl, #2
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	f7ff fecb 	bl	800d470 <rshift>
 800d6da:	443c      	add	r4, r7
 800d6dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	da52      	bge.n	800d78a <__gethex+0x27c>
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	9802      	ldr	r0, [sp, #8]
 800d6e8:	f000 fa55 	bl	800db96 <_Bfree>
 800d6ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	6013      	str	r3, [r2, #0]
 800d6f2:	27a3      	movs	r7, #163	; 0xa3
 800d6f4:	e793      	b.n	800d61e <__gethex+0x110>
 800d6f6:	3101      	adds	r1, #1
 800d6f8:	105b      	asrs	r3, r3, #1
 800d6fa:	e7b0      	b.n	800d65e <__gethex+0x150>
 800d6fc:	1e73      	subs	r3, r6, #1
 800d6fe:	9305      	str	r3, [sp, #20]
 800d700:	9a07      	ldr	r2, [sp, #28]
 800d702:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d706:	4293      	cmp	r3, r2
 800d708:	d018      	beq.n	800d73c <__gethex+0x22e>
 800d70a:	f1bb 0f20 	cmp.w	fp, #32
 800d70e:	d107      	bne.n	800d720 <__gethex+0x212>
 800d710:	9b04      	ldr	r3, [sp, #16]
 800d712:	f8c3 a000 	str.w	sl, [r3]
 800d716:	3304      	adds	r3, #4
 800d718:	f04f 0a00 	mov.w	sl, #0
 800d71c:	9304      	str	r3, [sp, #16]
 800d71e:	46d3      	mov	fp, sl
 800d720:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d724:	f7ff fede 	bl	800d4e4 <__hexdig_fun>
 800d728:	f000 000f 	and.w	r0, r0, #15
 800d72c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d730:	ea4a 0a00 	orr.w	sl, sl, r0
 800d734:	f10b 0b04 	add.w	fp, fp, #4
 800d738:	9b05      	ldr	r3, [sp, #20]
 800d73a:	e00d      	b.n	800d758 <__gethex+0x24a>
 800d73c:	9b05      	ldr	r3, [sp, #20]
 800d73e:	9a08      	ldr	r2, [sp, #32]
 800d740:	4413      	add	r3, r2
 800d742:	42bb      	cmp	r3, r7
 800d744:	d3e1      	bcc.n	800d70a <__gethex+0x1fc>
 800d746:	4618      	mov	r0, r3
 800d748:	9a01      	ldr	r2, [sp, #4]
 800d74a:	9903      	ldr	r1, [sp, #12]
 800d74c:	9309      	str	r3, [sp, #36]	; 0x24
 800d74e:	f001 f805 	bl	800e75c <strncmp>
 800d752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d754:	2800      	cmp	r0, #0
 800d756:	d1d8      	bne.n	800d70a <__gethex+0x1fc>
 800d758:	461e      	mov	r6, r3
 800d75a:	e791      	b.n	800d680 <__gethex+0x172>
 800d75c:	1eb9      	subs	r1, r7, #2
 800d75e:	4628      	mov	r0, r5
 800d760:	f000 fdc2 	bl	800e2e8 <__any_on>
 800d764:	2800      	cmp	r0, #0
 800d766:	d0b2      	beq.n	800d6ce <__gethex+0x1c0>
 800d768:	f04f 0a03 	mov.w	sl, #3
 800d76c:	e7b1      	b.n	800d6d2 <__gethex+0x1c4>
 800d76e:	da09      	bge.n	800d784 <__gethex+0x276>
 800d770:	1bf7      	subs	r7, r6, r7
 800d772:	4629      	mov	r1, r5
 800d774:	463a      	mov	r2, r7
 800d776:	9802      	ldr	r0, [sp, #8]
 800d778:	f000 fbd8 	bl	800df2c <__lshift>
 800d77c:	1be4      	subs	r4, r4, r7
 800d77e:	4605      	mov	r5, r0
 800d780:	f100 0914 	add.w	r9, r0, #20
 800d784:	f04f 0a00 	mov.w	sl, #0
 800d788:	e7a8      	b.n	800d6dc <__gethex+0x1ce>
 800d78a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d78e:	42a0      	cmp	r0, r4
 800d790:	dd6a      	ble.n	800d868 <__gethex+0x35a>
 800d792:	1b04      	subs	r4, r0, r4
 800d794:	42a6      	cmp	r6, r4
 800d796:	dc2e      	bgt.n	800d7f6 <__gethex+0x2e8>
 800d798:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d022      	beq.n	800d7e6 <__gethex+0x2d8>
 800d7a0:	2b03      	cmp	r3, #3
 800d7a2:	d024      	beq.n	800d7ee <__gethex+0x2e0>
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d115      	bne.n	800d7d4 <__gethex+0x2c6>
 800d7a8:	42a6      	cmp	r6, r4
 800d7aa:	d113      	bne.n	800d7d4 <__gethex+0x2c6>
 800d7ac:	2e01      	cmp	r6, #1
 800d7ae:	dc0b      	bgt.n	800d7c8 <__gethex+0x2ba>
 800d7b0:	9a06      	ldr	r2, [sp, #24]
 800d7b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	612b      	str	r3, [r5, #16]
 800d7bc:	f8c9 3000 	str.w	r3, [r9]
 800d7c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7c2:	2762      	movs	r7, #98	; 0x62
 800d7c4:	601d      	str	r5, [r3, #0]
 800d7c6:	e72a      	b.n	800d61e <__gethex+0x110>
 800d7c8:	1e71      	subs	r1, r6, #1
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f000 fd8c 	bl	800e2e8 <__any_on>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d1ed      	bne.n	800d7b0 <__gethex+0x2a2>
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	9802      	ldr	r0, [sp, #8]
 800d7d8:	f000 f9dd 	bl	800db96 <_Bfree>
 800d7dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d7de:	2300      	movs	r3, #0
 800d7e0:	6013      	str	r3, [r2, #0]
 800d7e2:	2750      	movs	r7, #80	; 0x50
 800d7e4:	e71b      	b.n	800d61e <__gethex+0x110>
 800d7e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0e1      	beq.n	800d7b0 <__gethex+0x2a2>
 800d7ec:	e7f2      	b.n	800d7d4 <__gethex+0x2c6>
 800d7ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1dd      	bne.n	800d7b0 <__gethex+0x2a2>
 800d7f4:	e7ee      	b.n	800d7d4 <__gethex+0x2c6>
 800d7f6:	1e67      	subs	r7, r4, #1
 800d7f8:	f1ba 0f00 	cmp.w	sl, #0
 800d7fc:	d131      	bne.n	800d862 <__gethex+0x354>
 800d7fe:	b127      	cbz	r7, 800d80a <__gethex+0x2fc>
 800d800:	4639      	mov	r1, r7
 800d802:	4628      	mov	r0, r5
 800d804:	f000 fd70 	bl	800e2e8 <__any_on>
 800d808:	4682      	mov	sl, r0
 800d80a:	117a      	asrs	r2, r7, #5
 800d80c:	2301      	movs	r3, #1
 800d80e:	f007 071f 	and.w	r7, r7, #31
 800d812:	fa03 f707 	lsl.w	r7, r3, r7
 800d816:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d81a:	4621      	mov	r1, r4
 800d81c:	421f      	tst	r7, r3
 800d81e:	4628      	mov	r0, r5
 800d820:	bf18      	it	ne
 800d822:	f04a 0a02 	orrne.w	sl, sl, #2
 800d826:	1b36      	subs	r6, r6, r4
 800d828:	f7ff fe22 	bl	800d470 <rshift>
 800d82c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d830:	2702      	movs	r7, #2
 800d832:	f1ba 0f00 	cmp.w	sl, #0
 800d836:	d048      	beq.n	800d8ca <__gethex+0x3bc>
 800d838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d015      	beq.n	800d86c <__gethex+0x35e>
 800d840:	2b03      	cmp	r3, #3
 800d842:	d017      	beq.n	800d874 <__gethex+0x366>
 800d844:	2b01      	cmp	r3, #1
 800d846:	d109      	bne.n	800d85c <__gethex+0x34e>
 800d848:	f01a 0f02 	tst.w	sl, #2
 800d84c:	d006      	beq.n	800d85c <__gethex+0x34e>
 800d84e:	f8d9 3000 	ldr.w	r3, [r9]
 800d852:	ea4a 0a03 	orr.w	sl, sl, r3
 800d856:	f01a 0f01 	tst.w	sl, #1
 800d85a:	d10e      	bne.n	800d87a <__gethex+0x36c>
 800d85c:	f047 0710 	orr.w	r7, r7, #16
 800d860:	e033      	b.n	800d8ca <__gethex+0x3bc>
 800d862:	f04f 0a01 	mov.w	sl, #1
 800d866:	e7d0      	b.n	800d80a <__gethex+0x2fc>
 800d868:	2701      	movs	r7, #1
 800d86a:	e7e2      	b.n	800d832 <__gethex+0x324>
 800d86c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d86e:	f1c3 0301 	rsb	r3, r3, #1
 800d872:	9315      	str	r3, [sp, #84]	; 0x54
 800d874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d876:	2b00      	cmp	r3, #0
 800d878:	d0f0      	beq.n	800d85c <__gethex+0x34e>
 800d87a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d87e:	f105 0314 	add.w	r3, r5, #20
 800d882:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d886:	eb03 010a 	add.w	r1, r3, sl
 800d88a:	f04f 0c00 	mov.w	ip, #0
 800d88e:	4618      	mov	r0, r3
 800d890:	f853 2b04 	ldr.w	r2, [r3], #4
 800d894:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d898:	d01c      	beq.n	800d8d4 <__gethex+0x3c6>
 800d89a:	3201      	adds	r2, #1
 800d89c:	6002      	str	r2, [r0, #0]
 800d89e:	2f02      	cmp	r7, #2
 800d8a0:	f105 0314 	add.w	r3, r5, #20
 800d8a4:	d138      	bne.n	800d918 <__gethex+0x40a>
 800d8a6:	f8d8 2000 	ldr.w	r2, [r8]
 800d8aa:	3a01      	subs	r2, #1
 800d8ac:	42b2      	cmp	r2, r6
 800d8ae:	d10a      	bne.n	800d8c6 <__gethex+0x3b8>
 800d8b0:	1171      	asrs	r1, r6, #5
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f006 061f 	and.w	r6, r6, #31
 800d8b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d8bc:	fa02 f606 	lsl.w	r6, r2, r6
 800d8c0:	421e      	tst	r6, r3
 800d8c2:	bf18      	it	ne
 800d8c4:	4617      	movne	r7, r2
 800d8c6:	f047 0720 	orr.w	r7, r7, #32
 800d8ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8cc:	601d      	str	r5, [r3, #0]
 800d8ce:	9b06      	ldr	r3, [sp, #24]
 800d8d0:	601c      	str	r4, [r3, #0]
 800d8d2:	e6a4      	b.n	800d61e <__gethex+0x110>
 800d8d4:	4299      	cmp	r1, r3
 800d8d6:	f843 cc04 	str.w	ip, [r3, #-4]
 800d8da:	d8d8      	bhi.n	800d88e <__gethex+0x380>
 800d8dc:	68ab      	ldr	r3, [r5, #8]
 800d8de:	4599      	cmp	r9, r3
 800d8e0:	db12      	blt.n	800d908 <__gethex+0x3fa>
 800d8e2:	6869      	ldr	r1, [r5, #4]
 800d8e4:	9802      	ldr	r0, [sp, #8]
 800d8e6:	3101      	adds	r1, #1
 800d8e8:	f000 f921 	bl	800db2e <_Balloc>
 800d8ec:	692a      	ldr	r2, [r5, #16]
 800d8ee:	3202      	adds	r2, #2
 800d8f0:	f105 010c 	add.w	r1, r5, #12
 800d8f4:	4683      	mov	fp, r0
 800d8f6:	0092      	lsls	r2, r2, #2
 800d8f8:	300c      	adds	r0, #12
 800d8fa:	f000 f90d 	bl	800db18 <memcpy>
 800d8fe:	4629      	mov	r1, r5
 800d900:	9802      	ldr	r0, [sp, #8]
 800d902:	f000 f948 	bl	800db96 <_Bfree>
 800d906:	465d      	mov	r5, fp
 800d908:	692b      	ldr	r3, [r5, #16]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d910:	612a      	str	r2, [r5, #16]
 800d912:	2201      	movs	r2, #1
 800d914:	615a      	str	r2, [r3, #20]
 800d916:	e7c2      	b.n	800d89e <__gethex+0x390>
 800d918:	692a      	ldr	r2, [r5, #16]
 800d91a:	454a      	cmp	r2, r9
 800d91c:	dd0b      	ble.n	800d936 <__gethex+0x428>
 800d91e:	2101      	movs	r1, #1
 800d920:	4628      	mov	r0, r5
 800d922:	f7ff fda5 	bl	800d470 <rshift>
 800d926:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d92a:	3401      	adds	r4, #1
 800d92c:	42a3      	cmp	r3, r4
 800d92e:	f6ff aed9 	blt.w	800d6e4 <__gethex+0x1d6>
 800d932:	2701      	movs	r7, #1
 800d934:	e7c7      	b.n	800d8c6 <__gethex+0x3b8>
 800d936:	f016 061f 	ands.w	r6, r6, #31
 800d93a:	d0fa      	beq.n	800d932 <__gethex+0x424>
 800d93c:	449a      	add	sl, r3
 800d93e:	f1c6 0620 	rsb	r6, r6, #32
 800d942:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d946:	f000 f9b6 	bl	800dcb6 <__hi0bits>
 800d94a:	42b0      	cmp	r0, r6
 800d94c:	dbe7      	blt.n	800d91e <__gethex+0x410>
 800d94e:	e7f0      	b.n	800d932 <__gethex+0x424>

0800d950 <L_shift>:
 800d950:	f1c2 0208 	rsb	r2, r2, #8
 800d954:	0092      	lsls	r2, r2, #2
 800d956:	b570      	push	{r4, r5, r6, lr}
 800d958:	f1c2 0620 	rsb	r6, r2, #32
 800d95c:	6843      	ldr	r3, [r0, #4]
 800d95e:	6804      	ldr	r4, [r0, #0]
 800d960:	fa03 f506 	lsl.w	r5, r3, r6
 800d964:	432c      	orrs	r4, r5
 800d966:	40d3      	lsrs	r3, r2
 800d968:	6004      	str	r4, [r0, #0]
 800d96a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d96e:	4288      	cmp	r0, r1
 800d970:	d3f4      	bcc.n	800d95c <L_shift+0xc>
 800d972:	bd70      	pop	{r4, r5, r6, pc}

0800d974 <__match>:
 800d974:	b530      	push	{r4, r5, lr}
 800d976:	6803      	ldr	r3, [r0, #0]
 800d978:	3301      	adds	r3, #1
 800d97a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d97e:	b914      	cbnz	r4, 800d986 <__match+0x12>
 800d980:	6003      	str	r3, [r0, #0]
 800d982:	2001      	movs	r0, #1
 800d984:	bd30      	pop	{r4, r5, pc}
 800d986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d98a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d98e:	2d19      	cmp	r5, #25
 800d990:	bf98      	it	ls
 800d992:	3220      	addls	r2, #32
 800d994:	42a2      	cmp	r2, r4
 800d996:	d0f0      	beq.n	800d97a <__match+0x6>
 800d998:	2000      	movs	r0, #0
 800d99a:	e7f3      	b.n	800d984 <__match+0x10>

0800d99c <__hexnan>:
 800d99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a0:	680b      	ldr	r3, [r1, #0]
 800d9a2:	6801      	ldr	r1, [r0, #0]
 800d9a4:	115f      	asrs	r7, r3, #5
 800d9a6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d9aa:	f013 031f 	ands.w	r3, r3, #31
 800d9ae:	b087      	sub	sp, #28
 800d9b0:	bf18      	it	ne
 800d9b2:	3704      	addne	r7, #4
 800d9b4:	2500      	movs	r5, #0
 800d9b6:	1f3e      	subs	r6, r7, #4
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	4690      	mov	r8, r2
 800d9bc:	9301      	str	r3, [sp, #4]
 800d9be:	f847 5c04 	str.w	r5, [r7, #-4]
 800d9c2:	46b1      	mov	r9, r6
 800d9c4:	4634      	mov	r4, r6
 800d9c6:	9502      	str	r5, [sp, #8]
 800d9c8:	46ab      	mov	fp, r5
 800d9ca:	784a      	ldrb	r2, [r1, #1]
 800d9cc:	1c4b      	adds	r3, r1, #1
 800d9ce:	9303      	str	r3, [sp, #12]
 800d9d0:	b342      	cbz	r2, 800da24 <__hexnan+0x88>
 800d9d2:	4610      	mov	r0, r2
 800d9d4:	9105      	str	r1, [sp, #20]
 800d9d6:	9204      	str	r2, [sp, #16]
 800d9d8:	f7ff fd84 	bl	800d4e4 <__hexdig_fun>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d143      	bne.n	800da68 <__hexnan+0xcc>
 800d9e0:	9a04      	ldr	r2, [sp, #16]
 800d9e2:	9905      	ldr	r1, [sp, #20]
 800d9e4:	2a20      	cmp	r2, #32
 800d9e6:	d818      	bhi.n	800da1a <__hexnan+0x7e>
 800d9e8:	9b02      	ldr	r3, [sp, #8]
 800d9ea:	459b      	cmp	fp, r3
 800d9ec:	dd13      	ble.n	800da16 <__hexnan+0x7a>
 800d9ee:	454c      	cmp	r4, r9
 800d9f0:	d206      	bcs.n	800da00 <__hexnan+0x64>
 800d9f2:	2d07      	cmp	r5, #7
 800d9f4:	dc04      	bgt.n	800da00 <__hexnan+0x64>
 800d9f6:	462a      	mov	r2, r5
 800d9f8:	4649      	mov	r1, r9
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f7ff ffa8 	bl	800d950 <L_shift>
 800da00:	4544      	cmp	r4, r8
 800da02:	d944      	bls.n	800da8e <__hexnan+0xf2>
 800da04:	2300      	movs	r3, #0
 800da06:	f1a4 0904 	sub.w	r9, r4, #4
 800da0a:	f844 3c04 	str.w	r3, [r4, #-4]
 800da0e:	f8cd b008 	str.w	fp, [sp, #8]
 800da12:	464c      	mov	r4, r9
 800da14:	461d      	mov	r5, r3
 800da16:	9903      	ldr	r1, [sp, #12]
 800da18:	e7d7      	b.n	800d9ca <__hexnan+0x2e>
 800da1a:	2a29      	cmp	r2, #41	; 0x29
 800da1c:	d14a      	bne.n	800dab4 <__hexnan+0x118>
 800da1e:	3102      	adds	r1, #2
 800da20:	f8ca 1000 	str.w	r1, [sl]
 800da24:	f1bb 0f00 	cmp.w	fp, #0
 800da28:	d044      	beq.n	800dab4 <__hexnan+0x118>
 800da2a:	454c      	cmp	r4, r9
 800da2c:	d206      	bcs.n	800da3c <__hexnan+0xa0>
 800da2e:	2d07      	cmp	r5, #7
 800da30:	dc04      	bgt.n	800da3c <__hexnan+0xa0>
 800da32:	462a      	mov	r2, r5
 800da34:	4649      	mov	r1, r9
 800da36:	4620      	mov	r0, r4
 800da38:	f7ff ff8a 	bl	800d950 <L_shift>
 800da3c:	4544      	cmp	r4, r8
 800da3e:	d928      	bls.n	800da92 <__hexnan+0xf6>
 800da40:	4643      	mov	r3, r8
 800da42:	f854 2b04 	ldr.w	r2, [r4], #4
 800da46:	f843 2b04 	str.w	r2, [r3], #4
 800da4a:	42a6      	cmp	r6, r4
 800da4c:	d2f9      	bcs.n	800da42 <__hexnan+0xa6>
 800da4e:	2200      	movs	r2, #0
 800da50:	f843 2b04 	str.w	r2, [r3], #4
 800da54:	429e      	cmp	r6, r3
 800da56:	d2fb      	bcs.n	800da50 <__hexnan+0xb4>
 800da58:	6833      	ldr	r3, [r6, #0]
 800da5a:	b91b      	cbnz	r3, 800da64 <__hexnan+0xc8>
 800da5c:	4546      	cmp	r6, r8
 800da5e:	d127      	bne.n	800dab0 <__hexnan+0x114>
 800da60:	2301      	movs	r3, #1
 800da62:	6033      	str	r3, [r6, #0]
 800da64:	2005      	movs	r0, #5
 800da66:	e026      	b.n	800dab6 <__hexnan+0x11a>
 800da68:	3501      	adds	r5, #1
 800da6a:	2d08      	cmp	r5, #8
 800da6c:	f10b 0b01 	add.w	fp, fp, #1
 800da70:	dd06      	ble.n	800da80 <__hexnan+0xe4>
 800da72:	4544      	cmp	r4, r8
 800da74:	d9cf      	bls.n	800da16 <__hexnan+0x7a>
 800da76:	2300      	movs	r3, #0
 800da78:	f844 3c04 	str.w	r3, [r4, #-4]
 800da7c:	2501      	movs	r5, #1
 800da7e:	3c04      	subs	r4, #4
 800da80:	6822      	ldr	r2, [r4, #0]
 800da82:	f000 000f 	and.w	r0, r0, #15
 800da86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da8a:	6020      	str	r0, [r4, #0]
 800da8c:	e7c3      	b.n	800da16 <__hexnan+0x7a>
 800da8e:	2508      	movs	r5, #8
 800da90:	e7c1      	b.n	800da16 <__hexnan+0x7a>
 800da92:	9b01      	ldr	r3, [sp, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d0df      	beq.n	800da58 <__hexnan+0xbc>
 800da98:	f04f 32ff 	mov.w	r2, #4294967295
 800da9c:	f1c3 0320 	rsb	r3, r3, #32
 800daa0:	fa22 f303 	lsr.w	r3, r2, r3
 800daa4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800daa8:	401a      	ands	r2, r3
 800daaa:	f847 2c04 	str.w	r2, [r7, #-4]
 800daae:	e7d3      	b.n	800da58 <__hexnan+0xbc>
 800dab0:	3e04      	subs	r6, #4
 800dab2:	e7d1      	b.n	800da58 <__hexnan+0xbc>
 800dab4:	2004      	movs	r0, #4
 800dab6:	b007      	add	sp, #28
 800dab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dabc <__locale_ctype_ptr_l>:
 800dabc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800dac0:	4770      	bx	lr

0800dac2 <__localeconv_l>:
 800dac2:	30f0      	adds	r0, #240	; 0xf0
 800dac4:	4770      	bx	lr
	...

0800dac8 <_localeconv_r>:
 800dac8:	4b04      	ldr	r3, [pc, #16]	; (800dadc <_localeconv_r+0x14>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	6a18      	ldr	r0, [r3, #32]
 800dace:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <_localeconv_r+0x18>)
 800dad0:	2800      	cmp	r0, #0
 800dad2:	bf08      	it	eq
 800dad4:	4618      	moveq	r0, r3
 800dad6:	30f0      	adds	r0, #240	; 0xf0
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	2000000c 	.word	0x2000000c
 800dae0:	20000070 	.word	0x20000070

0800dae4 <malloc>:
 800dae4:	4b02      	ldr	r3, [pc, #8]	; (800daf0 <malloc+0xc>)
 800dae6:	4601      	mov	r1, r0
 800dae8:	6818      	ldr	r0, [r3, #0]
 800daea:	f000 bc7b 	b.w	800e3e4 <_malloc_r>
 800daee:	bf00      	nop
 800daf0:	2000000c 	.word	0x2000000c

0800daf4 <__ascii_mbtowc>:
 800daf4:	b082      	sub	sp, #8
 800daf6:	b901      	cbnz	r1, 800dafa <__ascii_mbtowc+0x6>
 800daf8:	a901      	add	r1, sp, #4
 800dafa:	b142      	cbz	r2, 800db0e <__ascii_mbtowc+0x1a>
 800dafc:	b14b      	cbz	r3, 800db12 <__ascii_mbtowc+0x1e>
 800dafe:	7813      	ldrb	r3, [r2, #0]
 800db00:	600b      	str	r3, [r1, #0]
 800db02:	7812      	ldrb	r2, [r2, #0]
 800db04:	1c10      	adds	r0, r2, #0
 800db06:	bf18      	it	ne
 800db08:	2001      	movne	r0, #1
 800db0a:	b002      	add	sp, #8
 800db0c:	4770      	bx	lr
 800db0e:	4610      	mov	r0, r2
 800db10:	e7fb      	b.n	800db0a <__ascii_mbtowc+0x16>
 800db12:	f06f 0001 	mvn.w	r0, #1
 800db16:	e7f8      	b.n	800db0a <__ascii_mbtowc+0x16>

0800db18 <memcpy>:
 800db18:	b510      	push	{r4, lr}
 800db1a:	1e43      	subs	r3, r0, #1
 800db1c:	440a      	add	r2, r1
 800db1e:	4291      	cmp	r1, r2
 800db20:	d100      	bne.n	800db24 <memcpy+0xc>
 800db22:	bd10      	pop	{r4, pc}
 800db24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db2c:	e7f7      	b.n	800db1e <memcpy+0x6>

0800db2e <_Balloc>:
 800db2e:	b570      	push	{r4, r5, r6, lr}
 800db30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db32:	4604      	mov	r4, r0
 800db34:	460e      	mov	r6, r1
 800db36:	b93d      	cbnz	r5, 800db48 <_Balloc+0x1a>
 800db38:	2010      	movs	r0, #16
 800db3a:	f7ff ffd3 	bl	800dae4 <malloc>
 800db3e:	6260      	str	r0, [r4, #36]	; 0x24
 800db40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db44:	6005      	str	r5, [r0, #0]
 800db46:	60c5      	str	r5, [r0, #12]
 800db48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800db4a:	68eb      	ldr	r3, [r5, #12]
 800db4c:	b183      	cbz	r3, 800db70 <_Balloc+0x42>
 800db4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800db56:	b9b8      	cbnz	r0, 800db88 <_Balloc+0x5a>
 800db58:	2101      	movs	r1, #1
 800db5a:	fa01 f506 	lsl.w	r5, r1, r6
 800db5e:	1d6a      	adds	r2, r5, #5
 800db60:	0092      	lsls	r2, r2, #2
 800db62:	4620      	mov	r0, r4
 800db64:	f000 fbe1 	bl	800e32a <_calloc_r>
 800db68:	b160      	cbz	r0, 800db84 <_Balloc+0x56>
 800db6a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800db6e:	e00e      	b.n	800db8e <_Balloc+0x60>
 800db70:	2221      	movs	r2, #33	; 0x21
 800db72:	2104      	movs	r1, #4
 800db74:	4620      	mov	r0, r4
 800db76:	f000 fbd8 	bl	800e32a <_calloc_r>
 800db7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db7c:	60e8      	str	r0, [r5, #12]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1e4      	bne.n	800db4e <_Balloc+0x20>
 800db84:	2000      	movs	r0, #0
 800db86:	bd70      	pop	{r4, r5, r6, pc}
 800db88:	6802      	ldr	r2, [r0, #0]
 800db8a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800db8e:	2300      	movs	r3, #0
 800db90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db94:	e7f7      	b.n	800db86 <_Balloc+0x58>

0800db96 <_Bfree>:
 800db96:	b570      	push	{r4, r5, r6, lr}
 800db98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800db9a:	4606      	mov	r6, r0
 800db9c:	460d      	mov	r5, r1
 800db9e:	b93c      	cbnz	r4, 800dbb0 <_Bfree+0x1a>
 800dba0:	2010      	movs	r0, #16
 800dba2:	f7ff ff9f 	bl	800dae4 <malloc>
 800dba6:	6270      	str	r0, [r6, #36]	; 0x24
 800dba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbac:	6004      	str	r4, [r0, #0]
 800dbae:	60c4      	str	r4, [r0, #12]
 800dbb0:	b13d      	cbz	r5, 800dbc2 <_Bfree+0x2c>
 800dbb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dbb4:	686a      	ldr	r2, [r5, #4]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbbc:	6029      	str	r1, [r5, #0]
 800dbbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}

0800dbc4 <__multadd>:
 800dbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc8:	690d      	ldr	r5, [r1, #16]
 800dbca:	461f      	mov	r7, r3
 800dbcc:	4606      	mov	r6, r0
 800dbce:	460c      	mov	r4, r1
 800dbd0:	f101 0c14 	add.w	ip, r1, #20
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f8dc 0000 	ldr.w	r0, [ip]
 800dbda:	b281      	uxth	r1, r0
 800dbdc:	fb02 7101 	mla	r1, r2, r1, r7
 800dbe0:	0c0f      	lsrs	r7, r1, #16
 800dbe2:	0c00      	lsrs	r0, r0, #16
 800dbe4:	fb02 7000 	mla	r0, r2, r0, r7
 800dbe8:	b289      	uxth	r1, r1
 800dbea:	3301      	adds	r3, #1
 800dbec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dbf0:	429d      	cmp	r5, r3
 800dbf2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dbf6:	f84c 1b04 	str.w	r1, [ip], #4
 800dbfa:	dcec      	bgt.n	800dbd6 <__multadd+0x12>
 800dbfc:	b1d7      	cbz	r7, 800dc34 <__multadd+0x70>
 800dbfe:	68a3      	ldr	r3, [r4, #8]
 800dc00:	42ab      	cmp	r3, r5
 800dc02:	dc12      	bgt.n	800dc2a <__multadd+0x66>
 800dc04:	6861      	ldr	r1, [r4, #4]
 800dc06:	4630      	mov	r0, r6
 800dc08:	3101      	adds	r1, #1
 800dc0a:	f7ff ff90 	bl	800db2e <_Balloc>
 800dc0e:	6922      	ldr	r2, [r4, #16]
 800dc10:	3202      	adds	r2, #2
 800dc12:	f104 010c 	add.w	r1, r4, #12
 800dc16:	4680      	mov	r8, r0
 800dc18:	0092      	lsls	r2, r2, #2
 800dc1a:	300c      	adds	r0, #12
 800dc1c:	f7ff ff7c 	bl	800db18 <memcpy>
 800dc20:	4621      	mov	r1, r4
 800dc22:	4630      	mov	r0, r6
 800dc24:	f7ff ffb7 	bl	800db96 <_Bfree>
 800dc28:	4644      	mov	r4, r8
 800dc2a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc2e:	3501      	adds	r5, #1
 800dc30:	615f      	str	r7, [r3, #20]
 800dc32:	6125      	str	r5, [r4, #16]
 800dc34:	4620      	mov	r0, r4
 800dc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc3a <__s2b>:
 800dc3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc3e:	460c      	mov	r4, r1
 800dc40:	4615      	mov	r5, r2
 800dc42:	461f      	mov	r7, r3
 800dc44:	2209      	movs	r2, #9
 800dc46:	3308      	adds	r3, #8
 800dc48:	4606      	mov	r6, r0
 800dc4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc4e:	2100      	movs	r1, #0
 800dc50:	2201      	movs	r2, #1
 800dc52:	429a      	cmp	r2, r3
 800dc54:	db20      	blt.n	800dc98 <__s2b+0x5e>
 800dc56:	4630      	mov	r0, r6
 800dc58:	f7ff ff69 	bl	800db2e <_Balloc>
 800dc5c:	9b08      	ldr	r3, [sp, #32]
 800dc5e:	6143      	str	r3, [r0, #20]
 800dc60:	2d09      	cmp	r5, #9
 800dc62:	f04f 0301 	mov.w	r3, #1
 800dc66:	6103      	str	r3, [r0, #16]
 800dc68:	dd19      	ble.n	800dc9e <__s2b+0x64>
 800dc6a:	f104 0809 	add.w	r8, r4, #9
 800dc6e:	46c1      	mov	r9, r8
 800dc70:	442c      	add	r4, r5
 800dc72:	f819 3b01 	ldrb.w	r3, [r9], #1
 800dc76:	4601      	mov	r1, r0
 800dc78:	3b30      	subs	r3, #48	; 0x30
 800dc7a:	220a      	movs	r2, #10
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f7ff ffa1 	bl	800dbc4 <__multadd>
 800dc82:	45a1      	cmp	r9, r4
 800dc84:	d1f5      	bne.n	800dc72 <__s2b+0x38>
 800dc86:	eb08 0405 	add.w	r4, r8, r5
 800dc8a:	3c08      	subs	r4, #8
 800dc8c:	1b2d      	subs	r5, r5, r4
 800dc8e:	1963      	adds	r3, r4, r5
 800dc90:	42bb      	cmp	r3, r7
 800dc92:	db07      	blt.n	800dca4 <__s2b+0x6a>
 800dc94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc98:	0052      	lsls	r2, r2, #1
 800dc9a:	3101      	adds	r1, #1
 800dc9c:	e7d9      	b.n	800dc52 <__s2b+0x18>
 800dc9e:	340a      	adds	r4, #10
 800dca0:	2509      	movs	r5, #9
 800dca2:	e7f3      	b.n	800dc8c <__s2b+0x52>
 800dca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dca8:	4601      	mov	r1, r0
 800dcaa:	3b30      	subs	r3, #48	; 0x30
 800dcac:	220a      	movs	r2, #10
 800dcae:	4630      	mov	r0, r6
 800dcb0:	f7ff ff88 	bl	800dbc4 <__multadd>
 800dcb4:	e7eb      	b.n	800dc8e <__s2b+0x54>

0800dcb6 <__hi0bits>:
 800dcb6:	0c02      	lsrs	r2, r0, #16
 800dcb8:	0412      	lsls	r2, r2, #16
 800dcba:	4603      	mov	r3, r0
 800dcbc:	b9b2      	cbnz	r2, 800dcec <__hi0bits+0x36>
 800dcbe:	0403      	lsls	r3, r0, #16
 800dcc0:	2010      	movs	r0, #16
 800dcc2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dcc6:	bf04      	itt	eq
 800dcc8:	021b      	lsleq	r3, r3, #8
 800dcca:	3008      	addeq	r0, #8
 800dccc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dcd0:	bf04      	itt	eq
 800dcd2:	011b      	lsleq	r3, r3, #4
 800dcd4:	3004      	addeq	r0, #4
 800dcd6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dcda:	bf04      	itt	eq
 800dcdc:	009b      	lsleq	r3, r3, #2
 800dcde:	3002      	addeq	r0, #2
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	db06      	blt.n	800dcf2 <__hi0bits+0x3c>
 800dce4:	005b      	lsls	r3, r3, #1
 800dce6:	d503      	bpl.n	800dcf0 <__hi0bits+0x3a>
 800dce8:	3001      	adds	r0, #1
 800dcea:	4770      	bx	lr
 800dcec:	2000      	movs	r0, #0
 800dcee:	e7e8      	b.n	800dcc2 <__hi0bits+0xc>
 800dcf0:	2020      	movs	r0, #32
 800dcf2:	4770      	bx	lr

0800dcf4 <__lo0bits>:
 800dcf4:	6803      	ldr	r3, [r0, #0]
 800dcf6:	f013 0207 	ands.w	r2, r3, #7
 800dcfa:	4601      	mov	r1, r0
 800dcfc:	d00b      	beq.n	800dd16 <__lo0bits+0x22>
 800dcfe:	07da      	lsls	r2, r3, #31
 800dd00:	d423      	bmi.n	800dd4a <__lo0bits+0x56>
 800dd02:	0798      	lsls	r0, r3, #30
 800dd04:	bf49      	itett	mi
 800dd06:	085b      	lsrmi	r3, r3, #1
 800dd08:	089b      	lsrpl	r3, r3, #2
 800dd0a:	2001      	movmi	r0, #1
 800dd0c:	600b      	strmi	r3, [r1, #0]
 800dd0e:	bf5c      	itt	pl
 800dd10:	600b      	strpl	r3, [r1, #0]
 800dd12:	2002      	movpl	r0, #2
 800dd14:	4770      	bx	lr
 800dd16:	b298      	uxth	r0, r3
 800dd18:	b9a8      	cbnz	r0, 800dd46 <__lo0bits+0x52>
 800dd1a:	0c1b      	lsrs	r3, r3, #16
 800dd1c:	2010      	movs	r0, #16
 800dd1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dd22:	bf04      	itt	eq
 800dd24:	0a1b      	lsreq	r3, r3, #8
 800dd26:	3008      	addeq	r0, #8
 800dd28:	071a      	lsls	r2, r3, #28
 800dd2a:	bf04      	itt	eq
 800dd2c:	091b      	lsreq	r3, r3, #4
 800dd2e:	3004      	addeq	r0, #4
 800dd30:	079a      	lsls	r2, r3, #30
 800dd32:	bf04      	itt	eq
 800dd34:	089b      	lsreq	r3, r3, #2
 800dd36:	3002      	addeq	r0, #2
 800dd38:	07da      	lsls	r2, r3, #31
 800dd3a:	d402      	bmi.n	800dd42 <__lo0bits+0x4e>
 800dd3c:	085b      	lsrs	r3, r3, #1
 800dd3e:	d006      	beq.n	800dd4e <__lo0bits+0x5a>
 800dd40:	3001      	adds	r0, #1
 800dd42:	600b      	str	r3, [r1, #0]
 800dd44:	4770      	bx	lr
 800dd46:	4610      	mov	r0, r2
 800dd48:	e7e9      	b.n	800dd1e <__lo0bits+0x2a>
 800dd4a:	2000      	movs	r0, #0
 800dd4c:	4770      	bx	lr
 800dd4e:	2020      	movs	r0, #32
 800dd50:	4770      	bx	lr

0800dd52 <__i2b>:
 800dd52:	b510      	push	{r4, lr}
 800dd54:	460c      	mov	r4, r1
 800dd56:	2101      	movs	r1, #1
 800dd58:	f7ff fee9 	bl	800db2e <_Balloc>
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	6144      	str	r4, [r0, #20]
 800dd60:	6102      	str	r2, [r0, #16]
 800dd62:	bd10      	pop	{r4, pc}

0800dd64 <__multiply>:
 800dd64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd68:	4614      	mov	r4, r2
 800dd6a:	690a      	ldr	r2, [r1, #16]
 800dd6c:	6923      	ldr	r3, [r4, #16]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	bfb8      	it	lt
 800dd72:	460b      	movlt	r3, r1
 800dd74:	4688      	mov	r8, r1
 800dd76:	bfbc      	itt	lt
 800dd78:	46a0      	movlt	r8, r4
 800dd7a:	461c      	movlt	r4, r3
 800dd7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dd84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd8c:	eb07 0609 	add.w	r6, r7, r9
 800dd90:	42b3      	cmp	r3, r6
 800dd92:	bfb8      	it	lt
 800dd94:	3101      	addlt	r1, #1
 800dd96:	f7ff feca 	bl	800db2e <_Balloc>
 800dd9a:	f100 0514 	add.w	r5, r0, #20
 800dd9e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dda2:	462b      	mov	r3, r5
 800dda4:	2200      	movs	r2, #0
 800dda6:	4573      	cmp	r3, lr
 800dda8:	d316      	bcc.n	800ddd8 <__multiply+0x74>
 800ddaa:	f104 0214 	add.w	r2, r4, #20
 800ddae:	f108 0114 	add.w	r1, r8, #20
 800ddb2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ddb6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	9201      	str	r2, [sp, #4]
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d80c      	bhi.n	800ddde <__multiply+0x7a>
 800ddc4:	2e00      	cmp	r6, #0
 800ddc6:	dd03      	ble.n	800ddd0 <__multiply+0x6c>
 800ddc8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d05d      	beq.n	800de8c <__multiply+0x128>
 800ddd0:	6106      	str	r6, [r0, #16]
 800ddd2:	b003      	add	sp, #12
 800ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd8:	f843 2b04 	str.w	r2, [r3], #4
 800dddc:	e7e3      	b.n	800dda6 <__multiply+0x42>
 800ddde:	f8b2 b000 	ldrh.w	fp, [r2]
 800dde2:	f1bb 0f00 	cmp.w	fp, #0
 800dde6:	d023      	beq.n	800de30 <__multiply+0xcc>
 800dde8:	4689      	mov	r9, r1
 800ddea:	46ac      	mov	ip, r5
 800ddec:	f04f 0800 	mov.w	r8, #0
 800ddf0:	f859 4b04 	ldr.w	r4, [r9], #4
 800ddf4:	f8dc a000 	ldr.w	sl, [ip]
 800ddf8:	b2a3      	uxth	r3, r4
 800ddfa:	fa1f fa8a 	uxth.w	sl, sl
 800ddfe:	fb0b a303 	mla	r3, fp, r3, sl
 800de02:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800de06:	f8dc 4000 	ldr.w	r4, [ip]
 800de0a:	4443      	add	r3, r8
 800de0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800de10:	fb0b 840a 	mla	r4, fp, sl, r8
 800de14:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800de18:	46e2      	mov	sl, ip
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800de20:	454f      	cmp	r7, r9
 800de22:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800de26:	f84a 3b04 	str.w	r3, [sl], #4
 800de2a:	d82b      	bhi.n	800de84 <__multiply+0x120>
 800de2c:	f8cc 8004 	str.w	r8, [ip, #4]
 800de30:	9b01      	ldr	r3, [sp, #4]
 800de32:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800de36:	3204      	adds	r2, #4
 800de38:	f1ba 0f00 	cmp.w	sl, #0
 800de3c:	d020      	beq.n	800de80 <__multiply+0x11c>
 800de3e:	682b      	ldr	r3, [r5, #0]
 800de40:	4689      	mov	r9, r1
 800de42:	46a8      	mov	r8, r5
 800de44:	f04f 0b00 	mov.w	fp, #0
 800de48:	f8b9 c000 	ldrh.w	ip, [r9]
 800de4c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800de50:	fb0a 440c 	mla	r4, sl, ip, r4
 800de54:	445c      	add	r4, fp
 800de56:	46c4      	mov	ip, r8
 800de58:	b29b      	uxth	r3, r3
 800de5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800de5e:	f84c 3b04 	str.w	r3, [ip], #4
 800de62:	f859 3b04 	ldr.w	r3, [r9], #4
 800de66:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800de6a:	0c1b      	lsrs	r3, r3, #16
 800de6c:	fb0a b303 	mla	r3, sl, r3, fp
 800de70:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800de74:	454f      	cmp	r7, r9
 800de76:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800de7a:	d805      	bhi.n	800de88 <__multiply+0x124>
 800de7c:	f8c8 3004 	str.w	r3, [r8, #4]
 800de80:	3504      	adds	r5, #4
 800de82:	e79b      	b.n	800ddbc <__multiply+0x58>
 800de84:	46d4      	mov	ip, sl
 800de86:	e7b3      	b.n	800ddf0 <__multiply+0x8c>
 800de88:	46e0      	mov	r8, ip
 800de8a:	e7dd      	b.n	800de48 <__multiply+0xe4>
 800de8c:	3e01      	subs	r6, #1
 800de8e:	e799      	b.n	800ddc4 <__multiply+0x60>

0800de90 <__pow5mult>:
 800de90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de94:	4615      	mov	r5, r2
 800de96:	f012 0203 	ands.w	r2, r2, #3
 800de9a:	4606      	mov	r6, r0
 800de9c:	460f      	mov	r7, r1
 800de9e:	d007      	beq.n	800deb0 <__pow5mult+0x20>
 800dea0:	3a01      	subs	r2, #1
 800dea2:	4c21      	ldr	r4, [pc, #132]	; (800df28 <__pow5mult+0x98>)
 800dea4:	2300      	movs	r3, #0
 800dea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800deaa:	f7ff fe8b 	bl	800dbc4 <__multadd>
 800deae:	4607      	mov	r7, r0
 800deb0:	10ad      	asrs	r5, r5, #2
 800deb2:	d035      	beq.n	800df20 <__pow5mult+0x90>
 800deb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800deb6:	b93c      	cbnz	r4, 800dec8 <__pow5mult+0x38>
 800deb8:	2010      	movs	r0, #16
 800deba:	f7ff fe13 	bl	800dae4 <malloc>
 800debe:	6270      	str	r0, [r6, #36]	; 0x24
 800dec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dec4:	6004      	str	r4, [r0, #0]
 800dec6:	60c4      	str	r4, [r0, #12]
 800dec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800decc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ded0:	b94c      	cbnz	r4, 800dee6 <__pow5mult+0x56>
 800ded2:	f240 2171 	movw	r1, #625	; 0x271
 800ded6:	4630      	mov	r0, r6
 800ded8:	f7ff ff3b 	bl	800dd52 <__i2b>
 800dedc:	2300      	movs	r3, #0
 800dede:	f8c8 0008 	str.w	r0, [r8, #8]
 800dee2:	4604      	mov	r4, r0
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	f04f 0800 	mov.w	r8, #0
 800deea:	07eb      	lsls	r3, r5, #31
 800deec:	d50a      	bpl.n	800df04 <__pow5mult+0x74>
 800deee:	4639      	mov	r1, r7
 800def0:	4622      	mov	r2, r4
 800def2:	4630      	mov	r0, r6
 800def4:	f7ff ff36 	bl	800dd64 <__multiply>
 800def8:	4639      	mov	r1, r7
 800defa:	4681      	mov	r9, r0
 800defc:	4630      	mov	r0, r6
 800defe:	f7ff fe4a 	bl	800db96 <_Bfree>
 800df02:	464f      	mov	r7, r9
 800df04:	106d      	asrs	r5, r5, #1
 800df06:	d00b      	beq.n	800df20 <__pow5mult+0x90>
 800df08:	6820      	ldr	r0, [r4, #0]
 800df0a:	b938      	cbnz	r0, 800df1c <__pow5mult+0x8c>
 800df0c:	4622      	mov	r2, r4
 800df0e:	4621      	mov	r1, r4
 800df10:	4630      	mov	r0, r6
 800df12:	f7ff ff27 	bl	800dd64 <__multiply>
 800df16:	6020      	str	r0, [r4, #0]
 800df18:	f8c0 8000 	str.w	r8, [r0]
 800df1c:	4604      	mov	r4, r0
 800df1e:	e7e4      	b.n	800deea <__pow5mult+0x5a>
 800df20:	4638      	mov	r0, r7
 800df22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df26:	bf00      	nop
 800df28:	0800eee8 	.word	0x0800eee8

0800df2c <__lshift>:
 800df2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df30:	460c      	mov	r4, r1
 800df32:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df36:	6923      	ldr	r3, [r4, #16]
 800df38:	6849      	ldr	r1, [r1, #4]
 800df3a:	eb0a 0903 	add.w	r9, sl, r3
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	4607      	mov	r7, r0
 800df42:	4616      	mov	r6, r2
 800df44:	f109 0501 	add.w	r5, r9, #1
 800df48:	42ab      	cmp	r3, r5
 800df4a:	db32      	blt.n	800dfb2 <__lshift+0x86>
 800df4c:	4638      	mov	r0, r7
 800df4e:	f7ff fdee 	bl	800db2e <_Balloc>
 800df52:	2300      	movs	r3, #0
 800df54:	4680      	mov	r8, r0
 800df56:	f100 0114 	add.w	r1, r0, #20
 800df5a:	461a      	mov	r2, r3
 800df5c:	4553      	cmp	r3, sl
 800df5e:	db2b      	blt.n	800dfb8 <__lshift+0x8c>
 800df60:	6920      	ldr	r0, [r4, #16]
 800df62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df66:	f104 0314 	add.w	r3, r4, #20
 800df6a:	f016 021f 	ands.w	r2, r6, #31
 800df6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df76:	d025      	beq.n	800dfc4 <__lshift+0x98>
 800df78:	f1c2 0e20 	rsb	lr, r2, #32
 800df7c:	2000      	movs	r0, #0
 800df7e:	681e      	ldr	r6, [r3, #0]
 800df80:	468a      	mov	sl, r1
 800df82:	4096      	lsls	r6, r2
 800df84:	4330      	orrs	r0, r6
 800df86:	f84a 0b04 	str.w	r0, [sl], #4
 800df8a:	f853 0b04 	ldr.w	r0, [r3], #4
 800df8e:	459c      	cmp	ip, r3
 800df90:	fa20 f00e 	lsr.w	r0, r0, lr
 800df94:	d814      	bhi.n	800dfc0 <__lshift+0x94>
 800df96:	6048      	str	r0, [r1, #4]
 800df98:	b108      	cbz	r0, 800df9e <__lshift+0x72>
 800df9a:	f109 0502 	add.w	r5, r9, #2
 800df9e:	3d01      	subs	r5, #1
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	f8c8 5010 	str.w	r5, [r8, #16]
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	f7ff fdf5 	bl	800db96 <_Bfree>
 800dfac:	4640      	mov	r0, r8
 800dfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb2:	3101      	adds	r1, #1
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	e7c7      	b.n	800df48 <__lshift+0x1c>
 800dfb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	e7cd      	b.n	800df5c <__lshift+0x30>
 800dfc0:	4651      	mov	r1, sl
 800dfc2:	e7dc      	b.n	800df7e <__lshift+0x52>
 800dfc4:	3904      	subs	r1, #4
 800dfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfca:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfce:	459c      	cmp	ip, r3
 800dfd0:	d8f9      	bhi.n	800dfc6 <__lshift+0x9a>
 800dfd2:	e7e4      	b.n	800df9e <__lshift+0x72>

0800dfd4 <__mcmp>:
 800dfd4:	6903      	ldr	r3, [r0, #16]
 800dfd6:	690a      	ldr	r2, [r1, #16]
 800dfd8:	1a9b      	subs	r3, r3, r2
 800dfda:	b530      	push	{r4, r5, lr}
 800dfdc:	d10c      	bne.n	800dff8 <__mcmp+0x24>
 800dfde:	0092      	lsls	r2, r2, #2
 800dfe0:	3014      	adds	r0, #20
 800dfe2:	3114      	adds	r1, #20
 800dfe4:	1884      	adds	r4, r0, r2
 800dfe6:	4411      	add	r1, r2
 800dfe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dfec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dff0:	4295      	cmp	r5, r2
 800dff2:	d003      	beq.n	800dffc <__mcmp+0x28>
 800dff4:	d305      	bcc.n	800e002 <__mcmp+0x2e>
 800dff6:	2301      	movs	r3, #1
 800dff8:	4618      	mov	r0, r3
 800dffa:	bd30      	pop	{r4, r5, pc}
 800dffc:	42a0      	cmp	r0, r4
 800dffe:	d3f3      	bcc.n	800dfe8 <__mcmp+0x14>
 800e000:	e7fa      	b.n	800dff8 <__mcmp+0x24>
 800e002:	f04f 33ff 	mov.w	r3, #4294967295
 800e006:	e7f7      	b.n	800dff8 <__mcmp+0x24>

0800e008 <__mdiff>:
 800e008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e00c:	460d      	mov	r5, r1
 800e00e:	4607      	mov	r7, r0
 800e010:	4611      	mov	r1, r2
 800e012:	4628      	mov	r0, r5
 800e014:	4614      	mov	r4, r2
 800e016:	f7ff ffdd 	bl	800dfd4 <__mcmp>
 800e01a:	1e06      	subs	r6, r0, #0
 800e01c:	d108      	bne.n	800e030 <__mdiff+0x28>
 800e01e:	4631      	mov	r1, r6
 800e020:	4638      	mov	r0, r7
 800e022:	f7ff fd84 	bl	800db2e <_Balloc>
 800e026:	2301      	movs	r3, #1
 800e028:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e030:	bfa4      	itt	ge
 800e032:	4623      	movge	r3, r4
 800e034:	462c      	movge	r4, r5
 800e036:	4638      	mov	r0, r7
 800e038:	6861      	ldr	r1, [r4, #4]
 800e03a:	bfa6      	itte	ge
 800e03c:	461d      	movge	r5, r3
 800e03e:	2600      	movge	r6, #0
 800e040:	2601      	movlt	r6, #1
 800e042:	f7ff fd74 	bl	800db2e <_Balloc>
 800e046:	692b      	ldr	r3, [r5, #16]
 800e048:	60c6      	str	r6, [r0, #12]
 800e04a:	6926      	ldr	r6, [r4, #16]
 800e04c:	f105 0914 	add.w	r9, r5, #20
 800e050:	f104 0214 	add.w	r2, r4, #20
 800e054:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e058:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e05c:	f100 0514 	add.w	r5, r0, #20
 800e060:	f04f 0e00 	mov.w	lr, #0
 800e064:	f852 ab04 	ldr.w	sl, [r2], #4
 800e068:	f859 4b04 	ldr.w	r4, [r9], #4
 800e06c:	fa1e f18a 	uxtah	r1, lr, sl
 800e070:	b2a3      	uxth	r3, r4
 800e072:	1ac9      	subs	r1, r1, r3
 800e074:	0c23      	lsrs	r3, r4, #16
 800e076:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e07a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e07e:	b289      	uxth	r1, r1
 800e080:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e084:	45c8      	cmp	r8, r9
 800e086:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e08a:	4694      	mov	ip, r2
 800e08c:	f845 3b04 	str.w	r3, [r5], #4
 800e090:	d8e8      	bhi.n	800e064 <__mdiff+0x5c>
 800e092:	45bc      	cmp	ip, r7
 800e094:	d304      	bcc.n	800e0a0 <__mdiff+0x98>
 800e096:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e09a:	b183      	cbz	r3, 800e0be <__mdiff+0xb6>
 800e09c:	6106      	str	r6, [r0, #16]
 800e09e:	e7c5      	b.n	800e02c <__mdiff+0x24>
 800e0a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e0a4:	fa1e f381 	uxtah	r3, lr, r1
 800e0a8:	141a      	asrs	r2, r3, #16
 800e0aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e0b8:	f845 3b04 	str.w	r3, [r5], #4
 800e0bc:	e7e9      	b.n	800e092 <__mdiff+0x8a>
 800e0be:	3e01      	subs	r6, #1
 800e0c0:	e7e9      	b.n	800e096 <__mdiff+0x8e>
	...

0800e0c4 <__ulp>:
 800e0c4:	4b12      	ldr	r3, [pc, #72]	; (800e110 <__ulp+0x4c>)
 800e0c6:	ee10 2a90 	vmov	r2, s1
 800e0ca:	401a      	ands	r2, r3
 800e0cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	dd04      	ble.n	800e0de <__ulp+0x1a>
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	ec41 0b10 	vmov	d0, r0, r1
 800e0dc:	4770      	bx	lr
 800e0de:	425b      	negs	r3, r3
 800e0e0:	151b      	asrs	r3, r3, #20
 800e0e2:	2b13      	cmp	r3, #19
 800e0e4:	f04f 0000 	mov.w	r0, #0
 800e0e8:	f04f 0100 	mov.w	r1, #0
 800e0ec:	dc04      	bgt.n	800e0f8 <__ulp+0x34>
 800e0ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e0f2:	fa42 f103 	asr.w	r1, r2, r3
 800e0f6:	e7ef      	b.n	800e0d8 <__ulp+0x14>
 800e0f8:	3b14      	subs	r3, #20
 800e0fa:	2b1e      	cmp	r3, #30
 800e0fc:	f04f 0201 	mov.w	r2, #1
 800e100:	bfda      	itte	le
 800e102:	f1c3 031f 	rsble	r3, r3, #31
 800e106:	fa02 f303 	lslle.w	r3, r2, r3
 800e10a:	4613      	movgt	r3, r2
 800e10c:	4618      	mov	r0, r3
 800e10e:	e7e3      	b.n	800e0d8 <__ulp+0x14>
 800e110:	7ff00000 	.word	0x7ff00000

0800e114 <__b2d>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	6905      	ldr	r5, [r0, #16]
 800e118:	f100 0714 	add.w	r7, r0, #20
 800e11c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e120:	1f2e      	subs	r6, r5, #4
 800e122:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff fdc5 	bl	800dcb6 <__hi0bits>
 800e12c:	f1c0 0320 	rsb	r3, r0, #32
 800e130:	280a      	cmp	r0, #10
 800e132:	600b      	str	r3, [r1, #0]
 800e134:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e1ac <__b2d+0x98>
 800e138:	dc14      	bgt.n	800e164 <__b2d+0x50>
 800e13a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e13e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e142:	42b7      	cmp	r7, r6
 800e144:	ea41 030c 	orr.w	r3, r1, ip
 800e148:	bf34      	ite	cc
 800e14a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e14e:	2100      	movcs	r1, #0
 800e150:	3015      	adds	r0, #21
 800e152:	fa04 f000 	lsl.w	r0, r4, r0
 800e156:	fa21 f10e 	lsr.w	r1, r1, lr
 800e15a:	ea40 0201 	orr.w	r2, r0, r1
 800e15e:	ec43 2b10 	vmov	d0, r2, r3
 800e162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e164:	42b7      	cmp	r7, r6
 800e166:	bf3a      	itte	cc
 800e168:	f1a5 0608 	subcc.w	r6, r5, #8
 800e16c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e170:	2100      	movcs	r1, #0
 800e172:	380b      	subs	r0, #11
 800e174:	d015      	beq.n	800e1a2 <__b2d+0x8e>
 800e176:	4084      	lsls	r4, r0
 800e178:	f1c0 0520 	rsb	r5, r0, #32
 800e17c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e180:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e184:	42be      	cmp	r6, r7
 800e186:	fa21 fc05 	lsr.w	ip, r1, r5
 800e18a:	ea44 030c 	orr.w	r3, r4, ip
 800e18e:	bf8c      	ite	hi
 800e190:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e194:	2400      	movls	r4, #0
 800e196:	fa01 f000 	lsl.w	r0, r1, r0
 800e19a:	40ec      	lsrs	r4, r5
 800e19c:	ea40 0204 	orr.w	r2, r0, r4
 800e1a0:	e7dd      	b.n	800e15e <__b2d+0x4a>
 800e1a2:	ea44 030c 	orr.w	r3, r4, ip
 800e1a6:	460a      	mov	r2, r1
 800e1a8:	e7d9      	b.n	800e15e <__b2d+0x4a>
 800e1aa:	bf00      	nop
 800e1ac:	3ff00000 	.word	0x3ff00000

0800e1b0 <__d2b>:
 800e1b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	460e      	mov	r6, r1
 800e1b6:	2101      	movs	r1, #1
 800e1b8:	ec59 8b10 	vmov	r8, r9, d0
 800e1bc:	4615      	mov	r5, r2
 800e1be:	f7ff fcb6 	bl	800db2e <_Balloc>
 800e1c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e1c6:	4607      	mov	r7, r0
 800e1c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1cc:	bb34      	cbnz	r4, 800e21c <__d2b+0x6c>
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	f1b8 0300 	subs.w	r3, r8, #0
 800e1d4:	d027      	beq.n	800e226 <__d2b+0x76>
 800e1d6:	a802      	add	r0, sp, #8
 800e1d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e1dc:	f7ff fd8a 	bl	800dcf4 <__lo0bits>
 800e1e0:	9900      	ldr	r1, [sp, #0]
 800e1e2:	b1f0      	cbz	r0, 800e222 <__d2b+0x72>
 800e1e4:	9a01      	ldr	r2, [sp, #4]
 800e1e6:	f1c0 0320 	rsb	r3, r0, #32
 800e1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ee:	430b      	orrs	r3, r1
 800e1f0:	40c2      	lsrs	r2, r0
 800e1f2:	617b      	str	r3, [r7, #20]
 800e1f4:	9201      	str	r2, [sp, #4]
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	61bb      	str	r3, [r7, #24]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	bf14      	ite	ne
 800e1fe:	2102      	movne	r1, #2
 800e200:	2101      	moveq	r1, #1
 800e202:	6139      	str	r1, [r7, #16]
 800e204:	b1c4      	cbz	r4, 800e238 <__d2b+0x88>
 800e206:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e20a:	4404      	add	r4, r0
 800e20c:	6034      	str	r4, [r6, #0]
 800e20e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e212:	6028      	str	r0, [r5, #0]
 800e214:	4638      	mov	r0, r7
 800e216:	b003      	add	sp, #12
 800e218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e21c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e220:	e7d5      	b.n	800e1ce <__d2b+0x1e>
 800e222:	6179      	str	r1, [r7, #20]
 800e224:	e7e7      	b.n	800e1f6 <__d2b+0x46>
 800e226:	a801      	add	r0, sp, #4
 800e228:	f7ff fd64 	bl	800dcf4 <__lo0bits>
 800e22c:	9b01      	ldr	r3, [sp, #4]
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	2101      	movs	r1, #1
 800e232:	6139      	str	r1, [r7, #16]
 800e234:	3020      	adds	r0, #32
 800e236:	e7e5      	b.n	800e204 <__d2b+0x54>
 800e238:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e23c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e240:	6030      	str	r0, [r6, #0]
 800e242:	6918      	ldr	r0, [r3, #16]
 800e244:	f7ff fd37 	bl	800dcb6 <__hi0bits>
 800e248:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e24c:	e7e1      	b.n	800e212 <__d2b+0x62>

0800e24e <__ratio>:
 800e24e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e252:	4688      	mov	r8, r1
 800e254:	4669      	mov	r1, sp
 800e256:	4681      	mov	r9, r0
 800e258:	f7ff ff5c 	bl	800e114 <__b2d>
 800e25c:	a901      	add	r1, sp, #4
 800e25e:	4640      	mov	r0, r8
 800e260:	ec57 6b10 	vmov	r6, r7, d0
 800e264:	f7ff ff56 	bl	800e114 <__b2d>
 800e268:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e26c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e270:	eba3 0c02 	sub.w	ip, r3, r2
 800e274:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e278:	1a9b      	subs	r3, r3, r2
 800e27a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e27e:	ec5b ab10 	vmov	sl, fp, d0
 800e282:	2b00      	cmp	r3, #0
 800e284:	bfce      	itee	gt
 800e286:	463a      	movgt	r2, r7
 800e288:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e28c:	465a      	movle	r2, fp
 800e28e:	4659      	mov	r1, fp
 800e290:	463d      	mov	r5, r7
 800e292:	bfd4      	ite	le
 800e294:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e298:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e29c:	4630      	mov	r0, r6
 800e29e:	ee10 2a10 	vmov	r2, s0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	f7f2 fad1 	bl	800084c <__aeabi_ddiv>
 800e2aa:	ec41 0b10 	vmov	d0, r0, r1
 800e2ae:	b003      	add	sp, #12
 800e2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2b4 <__copybits>:
 800e2b4:	3901      	subs	r1, #1
 800e2b6:	b510      	push	{r4, lr}
 800e2b8:	1149      	asrs	r1, r1, #5
 800e2ba:	6914      	ldr	r4, [r2, #16]
 800e2bc:	3101      	adds	r1, #1
 800e2be:	f102 0314 	add.w	r3, r2, #20
 800e2c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e2c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2ca:	42a3      	cmp	r3, r4
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	d303      	bcc.n	800e2d8 <__copybits+0x24>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	428a      	cmp	r2, r1
 800e2d4:	d305      	bcc.n	800e2e2 <__copybits+0x2e>
 800e2d6:	bd10      	pop	{r4, pc}
 800e2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2dc:	f840 2b04 	str.w	r2, [r0], #4
 800e2e0:	e7f3      	b.n	800e2ca <__copybits+0x16>
 800e2e2:	f842 3b04 	str.w	r3, [r2], #4
 800e2e6:	e7f4      	b.n	800e2d2 <__copybits+0x1e>

0800e2e8 <__any_on>:
 800e2e8:	f100 0214 	add.w	r2, r0, #20
 800e2ec:	6900      	ldr	r0, [r0, #16]
 800e2ee:	114b      	asrs	r3, r1, #5
 800e2f0:	4298      	cmp	r0, r3
 800e2f2:	b510      	push	{r4, lr}
 800e2f4:	db11      	blt.n	800e31a <__any_on+0x32>
 800e2f6:	dd0a      	ble.n	800e30e <__any_on+0x26>
 800e2f8:	f011 011f 	ands.w	r1, r1, #31
 800e2fc:	d007      	beq.n	800e30e <__any_on+0x26>
 800e2fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e302:	fa24 f001 	lsr.w	r0, r4, r1
 800e306:	fa00 f101 	lsl.w	r1, r0, r1
 800e30a:	428c      	cmp	r4, r1
 800e30c:	d10b      	bne.n	800e326 <__any_on+0x3e>
 800e30e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e312:	4293      	cmp	r3, r2
 800e314:	d803      	bhi.n	800e31e <__any_on+0x36>
 800e316:	2000      	movs	r0, #0
 800e318:	bd10      	pop	{r4, pc}
 800e31a:	4603      	mov	r3, r0
 800e31c:	e7f7      	b.n	800e30e <__any_on+0x26>
 800e31e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e322:	2900      	cmp	r1, #0
 800e324:	d0f5      	beq.n	800e312 <__any_on+0x2a>
 800e326:	2001      	movs	r0, #1
 800e328:	e7f6      	b.n	800e318 <__any_on+0x30>

0800e32a <_calloc_r>:
 800e32a:	b538      	push	{r3, r4, r5, lr}
 800e32c:	fb02 f401 	mul.w	r4, r2, r1
 800e330:	4621      	mov	r1, r4
 800e332:	f000 f857 	bl	800e3e4 <_malloc_r>
 800e336:	4605      	mov	r5, r0
 800e338:	b118      	cbz	r0, 800e342 <_calloc_r+0x18>
 800e33a:	4622      	mov	r2, r4
 800e33c:	2100      	movs	r1, #0
 800e33e:	f7fc fd35 	bl	800adac <memset>
 800e342:	4628      	mov	r0, r5
 800e344:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e348 <_free_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4605      	mov	r5, r0
 800e34c:	2900      	cmp	r1, #0
 800e34e:	d045      	beq.n	800e3dc <_free_r+0x94>
 800e350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e354:	1f0c      	subs	r4, r1, #4
 800e356:	2b00      	cmp	r3, #0
 800e358:	bfb8      	it	lt
 800e35a:	18e4      	addlt	r4, r4, r3
 800e35c:	f000 fa36 	bl	800e7cc <__malloc_lock>
 800e360:	4a1f      	ldr	r2, [pc, #124]	; (800e3e0 <_free_r+0x98>)
 800e362:	6813      	ldr	r3, [r2, #0]
 800e364:	4610      	mov	r0, r2
 800e366:	b933      	cbnz	r3, 800e376 <_free_r+0x2e>
 800e368:	6063      	str	r3, [r4, #4]
 800e36a:	6014      	str	r4, [r2, #0]
 800e36c:	4628      	mov	r0, r5
 800e36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e372:	f000 ba2c 	b.w	800e7ce <__malloc_unlock>
 800e376:	42a3      	cmp	r3, r4
 800e378:	d90c      	bls.n	800e394 <_free_r+0x4c>
 800e37a:	6821      	ldr	r1, [r4, #0]
 800e37c:	1862      	adds	r2, r4, r1
 800e37e:	4293      	cmp	r3, r2
 800e380:	bf04      	itt	eq
 800e382:	681a      	ldreq	r2, [r3, #0]
 800e384:	685b      	ldreq	r3, [r3, #4]
 800e386:	6063      	str	r3, [r4, #4]
 800e388:	bf04      	itt	eq
 800e38a:	1852      	addeq	r2, r2, r1
 800e38c:	6022      	streq	r2, [r4, #0]
 800e38e:	6004      	str	r4, [r0, #0]
 800e390:	e7ec      	b.n	800e36c <_free_r+0x24>
 800e392:	4613      	mov	r3, r2
 800e394:	685a      	ldr	r2, [r3, #4]
 800e396:	b10a      	cbz	r2, 800e39c <_free_r+0x54>
 800e398:	42a2      	cmp	r2, r4
 800e39a:	d9fa      	bls.n	800e392 <_free_r+0x4a>
 800e39c:	6819      	ldr	r1, [r3, #0]
 800e39e:	1858      	adds	r0, r3, r1
 800e3a0:	42a0      	cmp	r0, r4
 800e3a2:	d10b      	bne.n	800e3bc <_free_r+0x74>
 800e3a4:	6820      	ldr	r0, [r4, #0]
 800e3a6:	4401      	add	r1, r0
 800e3a8:	1858      	adds	r0, r3, r1
 800e3aa:	4282      	cmp	r2, r0
 800e3ac:	6019      	str	r1, [r3, #0]
 800e3ae:	d1dd      	bne.n	800e36c <_free_r+0x24>
 800e3b0:	6810      	ldr	r0, [r2, #0]
 800e3b2:	6852      	ldr	r2, [r2, #4]
 800e3b4:	605a      	str	r2, [r3, #4]
 800e3b6:	4401      	add	r1, r0
 800e3b8:	6019      	str	r1, [r3, #0]
 800e3ba:	e7d7      	b.n	800e36c <_free_r+0x24>
 800e3bc:	d902      	bls.n	800e3c4 <_free_r+0x7c>
 800e3be:	230c      	movs	r3, #12
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	e7d3      	b.n	800e36c <_free_r+0x24>
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	1821      	adds	r1, r4, r0
 800e3c8:	428a      	cmp	r2, r1
 800e3ca:	bf04      	itt	eq
 800e3cc:	6811      	ldreq	r1, [r2, #0]
 800e3ce:	6852      	ldreq	r2, [r2, #4]
 800e3d0:	6062      	str	r2, [r4, #4]
 800e3d2:	bf04      	itt	eq
 800e3d4:	1809      	addeq	r1, r1, r0
 800e3d6:	6021      	streq	r1, [r4, #0]
 800e3d8:	605c      	str	r4, [r3, #4]
 800e3da:	e7c7      	b.n	800e36c <_free_r+0x24>
 800e3dc:	bd38      	pop	{r3, r4, r5, pc}
 800e3de:	bf00      	nop
 800e3e0:	20000240 	.word	0x20000240

0800e3e4 <_malloc_r>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	1ccd      	adds	r5, r1, #3
 800e3e8:	f025 0503 	bic.w	r5, r5, #3
 800e3ec:	3508      	adds	r5, #8
 800e3ee:	2d0c      	cmp	r5, #12
 800e3f0:	bf38      	it	cc
 800e3f2:	250c      	movcc	r5, #12
 800e3f4:	2d00      	cmp	r5, #0
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	db01      	blt.n	800e3fe <_malloc_r+0x1a>
 800e3fa:	42a9      	cmp	r1, r5
 800e3fc:	d903      	bls.n	800e406 <_malloc_r+0x22>
 800e3fe:	230c      	movs	r3, #12
 800e400:	6033      	str	r3, [r6, #0]
 800e402:	2000      	movs	r0, #0
 800e404:	bd70      	pop	{r4, r5, r6, pc}
 800e406:	f000 f9e1 	bl	800e7cc <__malloc_lock>
 800e40a:	4a21      	ldr	r2, [pc, #132]	; (800e490 <_malloc_r+0xac>)
 800e40c:	6814      	ldr	r4, [r2, #0]
 800e40e:	4621      	mov	r1, r4
 800e410:	b991      	cbnz	r1, 800e438 <_malloc_r+0x54>
 800e412:	4c20      	ldr	r4, [pc, #128]	; (800e494 <_malloc_r+0xb0>)
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	b91b      	cbnz	r3, 800e420 <_malloc_r+0x3c>
 800e418:	4630      	mov	r0, r6
 800e41a:	f000 f98f 	bl	800e73c <_sbrk_r>
 800e41e:	6020      	str	r0, [r4, #0]
 800e420:	4629      	mov	r1, r5
 800e422:	4630      	mov	r0, r6
 800e424:	f000 f98a 	bl	800e73c <_sbrk_r>
 800e428:	1c43      	adds	r3, r0, #1
 800e42a:	d124      	bne.n	800e476 <_malloc_r+0x92>
 800e42c:	230c      	movs	r3, #12
 800e42e:	6033      	str	r3, [r6, #0]
 800e430:	4630      	mov	r0, r6
 800e432:	f000 f9cc 	bl	800e7ce <__malloc_unlock>
 800e436:	e7e4      	b.n	800e402 <_malloc_r+0x1e>
 800e438:	680b      	ldr	r3, [r1, #0]
 800e43a:	1b5b      	subs	r3, r3, r5
 800e43c:	d418      	bmi.n	800e470 <_malloc_r+0x8c>
 800e43e:	2b0b      	cmp	r3, #11
 800e440:	d90f      	bls.n	800e462 <_malloc_r+0x7e>
 800e442:	600b      	str	r3, [r1, #0]
 800e444:	50cd      	str	r5, [r1, r3]
 800e446:	18cc      	adds	r4, r1, r3
 800e448:	4630      	mov	r0, r6
 800e44a:	f000 f9c0 	bl	800e7ce <__malloc_unlock>
 800e44e:	f104 000b 	add.w	r0, r4, #11
 800e452:	1d23      	adds	r3, r4, #4
 800e454:	f020 0007 	bic.w	r0, r0, #7
 800e458:	1ac3      	subs	r3, r0, r3
 800e45a:	d0d3      	beq.n	800e404 <_malloc_r+0x20>
 800e45c:	425a      	negs	r2, r3
 800e45e:	50e2      	str	r2, [r4, r3]
 800e460:	e7d0      	b.n	800e404 <_malloc_r+0x20>
 800e462:	428c      	cmp	r4, r1
 800e464:	684b      	ldr	r3, [r1, #4]
 800e466:	bf16      	itet	ne
 800e468:	6063      	strne	r3, [r4, #4]
 800e46a:	6013      	streq	r3, [r2, #0]
 800e46c:	460c      	movne	r4, r1
 800e46e:	e7eb      	b.n	800e448 <_malloc_r+0x64>
 800e470:	460c      	mov	r4, r1
 800e472:	6849      	ldr	r1, [r1, #4]
 800e474:	e7cc      	b.n	800e410 <_malloc_r+0x2c>
 800e476:	1cc4      	adds	r4, r0, #3
 800e478:	f024 0403 	bic.w	r4, r4, #3
 800e47c:	42a0      	cmp	r0, r4
 800e47e:	d005      	beq.n	800e48c <_malloc_r+0xa8>
 800e480:	1a21      	subs	r1, r4, r0
 800e482:	4630      	mov	r0, r6
 800e484:	f000 f95a 	bl	800e73c <_sbrk_r>
 800e488:	3001      	adds	r0, #1
 800e48a:	d0cf      	beq.n	800e42c <_malloc_r+0x48>
 800e48c:	6025      	str	r5, [r4, #0]
 800e48e:	e7db      	b.n	800e448 <_malloc_r+0x64>
 800e490:	20000240 	.word	0x20000240
 800e494:	20000244 	.word	0x20000244

0800e498 <__ssputs_r>:
 800e498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e49c:	688e      	ldr	r6, [r1, #8]
 800e49e:	429e      	cmp	r6, r3
 800e4a0:	4682      	mov	sl, r0
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	4690      	mov	r8, r2
 800e4a6:	4699      	mov	r9, r3
 800e4a8:	d837      	bhi.n	800e51a <__ssputs_r+0x82>
 800e4aa:	898a      	ldrh	r2, [r1, #12]
 800e4ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e4b0:	d031      	beq.n	800e516 <__ssputs_r+0x7e>
 800e4b2:	6825      	ldr	r5, [r4, #0]
 800e4b4:	6909      	ldr	r1, [r1, #16]
 800e4b6:	1a6f      	subs	r7, r5, r1
 800e4b8:	6965      	ldr	r5, [r4, #20]
 800e4ba:	2302      	movs	r3, #2
 800e4bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4c0:	fb95 f5f3 	sdiv	r5, r5, r3
 800e4c4:	f109 0301 	add.w	r3, r9, #1
 800e4c8:	443b      	add	r3, r7
 800e4ca:	429d      	cmp	r5, r3
 800e4cc:	bf38      	it	cc
 800e4ce:	461d      	movcc	r5, r3
 800e4d0:	0553      	lsls	r3, r2, #21
 800e4d2:	d530      	bpl.n	800e536 <__ssputs_r+0x9e>
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	f7ff ff85 	bl	800e3e4 <_malloc_r>
 800e4da:	4606      	mov	r6, r0
 800e4dc:	b950      	cbnz	r0, 800e4f4 <__ssputs_r+0x5c>
 800e4de:	230c      	movs	r3, #12
 800e4e0:	f8ca 3000 	str.w	r3, [sl]
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f4:	463a      	mov	r2, r7
 800e4f6:	6921      	ldr	r1, [r4, #16]
 800e4f8:	f7ff fb0e 	bl	800db18 <memcpy>
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e506:	81a3      	strh	r3, [r4, #12]
 800e508:	6126      	str	r6, [r4, #16]
 800e50a:	6165      	str	r5, [r4, #20]
 800e50c:	443e      	add	r6, r7
 800e50e:	1bed      	subs	r5, r5, r7
 800e510:	6026      	str	r6, [r4, #0]
 800e512:	60a5      	str	r5, [r4, #8]
 800e514:	464e      	mov	r6, r9
 800e516:	454e      	cmp	r6, r9
 800e518:	d900      	bls.n	800e51c <__ssputs_r+0x84>
 800e51a:	464e      	mov	r6, r9
 800e51c:	4632      	mov	r2, r6
 800e51e:	4641      	mov	r1, r8
 800e520:	6820      	ldr	r0, [r4, #0]
 800e522:	f000 f93a 	bl	800e79a <memmove>
 800e526:	68a3      	ldr	r3, [r4, #8]
 800e528:	1b9b      	subs	r3, r3, r6
 800e52a:	60a3      	str	r3, [r4, #8]
 800e52c:	6823      	ldr	r3, [r4, #0]
 800e52e:	441e      	add	r6, r3
 800e530:	6026      	str	r6, [r4, #0]
 800e532:	2000      	movs	r0, #0
 800e534:	e7dc      	b.n	800e4f0 <__ssputs_r+0x58>
 800e536:	462a      	mov	r2, r5
 800e538:	f000 f94a 	bl	800e7d0 <_realloc_r>
 800e53c:	4606      	mov	r6, r0
 800e53e:	2800      	cmp	r0, #0
 800e540:	d1e2      	bne.n	800e508 <__ssputs_r+0x70>
 800e542:	6921      	ldr	r1, [r4, #16]
 800e544:	4650      	mov	r0, sl
 800e546:	f7ff feff 	bl	800e348 <_free_r>
 800e54a:	e7c8      	b.n	800e4de <__ssputs_r+0x46>

0800e54c <_svfiprintf_r>:
 800e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e550:	461d      	mov	r5, r3
 800e552:	898b      	ldrh	r3, [r1, #12]
 800e554:	061f      	lsls	r7, r3, #24
 800e556:	b09d      	sub	sp, #116	; 0x74
 800e558:	4680      	mov	r8, r0
 800e55a:	460c      	mov	r4, r1
 800e55c:	4616      	mov	r6, r2
 800e55e:	d50f      	bpl.n	800e580 <_svfiprintf_r+0x34>
 800e560:	690b      	ldr	r3, [r1, #16]
 800e562:	b96b      	cbnz	r3, 800e580 <_svfiprintf_r+0x34>
 800e564:	2140      	movs	r1, #64	; 0x40
 800e566:	f7ff ff3d 	bl	800e3e4 <_malloc_r>
 800e56a:	6020      	str	r0, [r4, #0]
 800e56c:	6120      	str	r0, [r4, #16]
 800e56e:	b928      	cbnz	r0, 800e57c <_svfiprintf_r+0x30>
 800e570:	230c      	movs	r3, #12
 800e572:	f8c8 3000 	str.w	r3, [r8]
 800e576:	f04f 30ff 	mov.w	r0, #4294967295
 800e57a:	e0c8      	b.n	800e70e <_svfiprintf_r+0x1c2>
 800e57c:	2340      	movs	r3, #64	; 0x40
 800e57e:	6163      	str	r3, [r4, #20]
 800e580:	2300      	movs	r3, #0
 800e582:	9309      	str	r3, [sp, #36]	; 0x24
 800e584:	2320      	movs	r3, #32
 800e586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e58a:	2330      	movs	r3, #48	; 0x30
 800e58c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e590:	9503      	str	r5, [sp, #12]
 800e592:	f04f 0b01 	mov.w	fp, #1
 800e596:	4637      	mov	r7, r6
 800e598:	463d      	mov	r5, r7
 800e59a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e59e:	b10b      	cbz	r3, 800e5a4 <_svfiprintf_r+0x58>
 800e5a0:	2b25      	cmp	r3, #37	; 0x25
 800e5a2:	d13e      	bne.n	800e622 <_svfiprintf_r+0xd6>
 800e5a4:	ebb7 0a06 	subs.w	sl, r7, r6
 800e5a8:	d00b      	beq.n	800e5c2 <_svfiprintf_r+0x76>
 800e5aa:	4653      	mov	r3, sl
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	f7ff ff71 	bl	800e498 <__ssputs_r>
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	f000 80a4 	beq.w	800e704 <_svfiprintf_r+0x1b8>
 800e5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5be:	4453      	add	r3, sl
 800e5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e5c2:	783b      	ldrb	r3, [r7, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 809d 	beq.w	800e704 <_svfiprintf_r+0x1b8>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5d4:	9304      	str	r3, [sp, #16]
 800e5d6:	9307      	str	r3, [sp, #28]
 800e5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e5de:	462f      	mov	r7, r5
 800e5e0:	2205      	movs	r2, #5
 800e5e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e5e6:	4850      	ldr	r0, [pc, #320]	; (800e728 <_svfiprintf_r+0x1dc>)
 800e5e8:	f7f1 fdfa 	bl	80001e0 <memchr>
 800e5ec:	9b04      	ldr	r3, [sp, #16]
 800e5ee:	b9d0      	cbnz	r0, 800e626 <_svfiprintf_r+0xda>
 800e5f0:	06d9      	lsls	r1, r3, #27
 800e5f2:	bf44      	itt	mi
 800e5f4:	2220      	movmi	r2, #32
 800e5f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e5fa:	071a      	lsls	r2, r3, #28
 800e5fc:	bf44      	itt	mi
 800e5fe:	222b      	movmi	r2, #43	; 0x2b
 800e600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e604:	782a      	ldrb	r2, [r5, #0]
 800e606:	2a2a      	cmp	r2, #42	; 0x2a
 800e608:	d015      	beq.n	800e636 <_svfiprintf_r+0xea>
 800e60a:	9a07      	ldr	r2, [sp, #28]
 800e60c:	462f      	mov	r7, r5
 800e60e:	2000      	movs	r0, #0
 800e610:	250a      	movs	r5, #10
 800e612:	4639      	mov	r1, r7
 800e614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e618:	3b30      	subs	r3, #48	; 0x30
 800e61a:	2b09      	cmp	r3, #9
 800e61c:	d94d      	bls.n	800e6ba <_svfiprintf_r+0x16e>
 800e61e:	b1b8      	cbz	r0, 800e650 <_svfiprintf_r+0x104>
 800e620:	e00f      	b.n	800e642 <_svfiprintf_r+0xf6>
 800e622:	462f      	mov	r7, r5
 800e624:	e7b8      	b.n	800e598 <_svfiprintf_r+0x4c>
 800e626:	4a40      	ldr	r2, [pc, #256]	; (800e728 <_svfiprintf_r+0x1dc>)
 800e628:	1a80      	subs	r0, r0, r2
 800e62a:	fa0b f000 	lsl.w	r0, fp, r0
 800e62e:	4318      	orrs	r0, r3
 800e630:	9004      	str	r0, [sp, #16]
 800e632:	463d      	mov	r5, r7
 800e634:	e7d3      	b.n	800e5de <_svfiprintf_r+0x92>
 800e636:	9a03      	ldr	r2, [sp, #12]
 800e638:	1d11      	adds	r1, r2, #4
 800e63a:	6812      	ldr	r2, [r2, #0]
 800e63c:	9103      	str	r1, [sp, #12]
 800e63e:	2a00      	cmp	r2, #0
 800e640:	db01      	blt.n	800e646 <_svfiprintf_r+0xfa>
 800e642:	9207      	str	r2, [sp, #28]
 800e644:	e004      	b.n	800e650 <_svfiprintf_r+0x104>
 800e646:	4252      	negs	r2, r2
 800e648:	f043 0302 	orr.w	r3, r3, #2
 800e64c:	9207      	str	r2, [sp, #28]
 800e64e:	9304      	str	r3, [sp, #16]
 800e650:	783b      	ldrb	r3, [r7, #0]
 800e652:	2b2e      	cmp	r3, #46	; 0x2e
 800e654:	d10c      	bne.n	800e670 <_svfiprintf_r+0x124>
 800e656:	787b      	ldrb	r3, [r7, #1]
 800e658:	2b2a      	cmp	r3, #42	; 0x2a
 800e65a:	d133      	bne.n	800e6c4 <_svfiprintf_r+0x178>
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	1d1a      	adds	r2, r3, #4
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	9203      	str	r2, [sp, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	bfb8      	it	lt
 800e668:	f04f 33ff 	movlt.w	r3, #4294967295
 800e66c:	3702      	adds	r7, #2
 800e66e:	9305      	str	r3, [sp, #20]
 800e670:	4d2e      	ldr	r5, [pc, #184]	; (800e72c <_svfiprintf_r+0x1e0>)
 800e672:	7839      	ldrb	r1, [r7, #0]
 800e674:	2203      	movs	r2, #3
 800e676:	4628      	mov	r0, r5
 800e678:	f7f1 fdb2 	bl	80001e0 <memchr>
 800e67c:	b138      	cbz	r0, 800e68e <_svfiprintf_r+0x142>
 800e67e:	2340      	movs	r3, #64	; 0x40
 800e680:	1b40      	subs	r0, r0, r5
 800e682:	fa03 f000 	lsl.w	r0, r3, r0
 800e686:	9b04      	ldr	r3, [sp, #16]
 800e688:	4303      	orrs	r3, r0
 800e68a:	3701      	adds	r7, #1
 800e68c:	9304      	str	r3, [sp, #16]
 800e68e:	7839      	ldrb	r1, [r7, #0]
 800e690:	4827      	ldr	r0, [pc, #156]	; (800e730 <_svfiprintf_r+0x1e4>)
 800e692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e696:	2206      	movs	r2, #6
 800e698:	1c7e      	adds	r6, r7, #1
 800e69a:	f7f1 fda1 	bl	80001e0 <memchr>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d038      	beq.n	800e714 <_svfiprintf_r+0x1c8>
 800e6a2:	4b24      	ldr	r3, [pc, #144]	; (800e734 <_svfiprintf_r+0x1e8>)
 800e6a4:	bb13      	cbnz	r3, 800e6ec <_svfiprintf_r+0x1a0>
 800e6a6:	9b03      	ldr	r3, [sp, #12]
 800e6a8:	3307      	adds	r3, #7
 800e6aa:	f023 0307 	bic.w	r3, r3, #7
 800e6ae:	3308      	adds	r3, #8
 800e6b0:	9303      	str	r3, [sp, #12]
 800e6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b4:	444b      	add	r3, r9
 800e6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b8:	e76d      	b.n	800e596 <_svfiprintf_r+0x4a>
 800e6ba:	fb05 3202 	mla	r2, r5, r2, r3
 800e6be:	2001      	movs	r0, #1
 800e6c0:	460f      	mov	r7, r1
 800e6c2:	e7a6      	b.n	800e612 <_svfiprintf_r+0xc6>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	3701      	adds	r7, #1
 800e6c8:	9305      	str	r3, [sp, #20]
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	250a      	movs	r5, #10
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6d4:	3a30      	subs	r2, #48	; 0x30
 800e6d6:	2a09      	cmp	r2, #9
 800e6d8:	d903      	bls.n	800e6e2 <_svfiprintf_r+0x196>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d0c8      	beq.n	800e670 <_svfiprintf_r+0x124>
 800e6de:	9105      	str	r1, [sp, #20]
 800e6e0:	e7c6      	b.n	800e670 <_svfiprintf_r+0x124>
 800e6e2:	fb05 2101 	mla	r1, r5, r1, r2
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	e7f0      	b.n	800e6ce <_svfiprintf_r+0x182>
 800e6ec:	ab03      	add	r3, sp, #12
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	4622      	mov	r2, r4
 800e6f2:	4b11      	ldr	r3, [pc, #68]	; (800e738 <_svfiprintf_r+0x1ec>)
 800e6f4:	a904      	add	r1, sp, #16
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f7fc fbf4 	bl	800aee4 <_printf_float>
 800e6fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e700:	4681      	mov	r9, r0
 800e702:	d1d6      	bne.n	800e6b2 <_svfiprintf_r+0x166>
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	065b      	lsls	r3, r3, #25
 800e708:	f53f af35 	bmi.w	800e576 <_svfiprintf_r+0x2a>
 800e70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e70e:	b01d      	add	sp, #116	; 0x74
 800e710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e714:	ab03      	add	r3, sp, #12
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	4622      	mov	r2, r4
 800e71a:	4b07      	ldr	r3, [pc, #28]	; (800e738 <_svfiprintf_r+0x1ec>)
 800e71c:	a904      	add	r1, sp, #16
 800e71e:	4640      	mov	r0, r8
 800e720:	f7fc fe96 	bl	800b450 <_printf_i>
 800e724:	e7ea      	b.n	800e6fc <_svfiprintf_r+0x1b0>
 800e726:	bf00      	nop
 800e728:	0800eef4 	.word	0x0800eef4
 800e72c:	0800eefa 	.word	0x0800eefa
 800e730:	0800eefe 	.word	0x0800eefe
 800e734:	0800aee5 	.word	0x0800aee5
 800e738:	0800e499 	.word	0x0800e499

0800e73c <_sbrk_r>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4c06      	ldr	r4, [pc, #24]	; (800e758 <_sbrk_r+0x1c>)
 800e740:	2300      	movs	r3, #0
 800e742:	4605      	mov	r5, r0
 800e744:	4608      	mov	r0, r1
 800e746:	6023      	str	r3, [r4, #0]
 800e748:	f7f3 fa6a 	bl	8001c20 <_sbrk>
 800e74c:	1c43      	adds	r3, r0, #1
 800e74e:	d102      	bne.n	800e756 <_sbrk_r+0x1a>
 800e750:	6823      	ldr	r3, [r4, #0]
 800e752:	b103      	cbz	r3, 800e756 <_sbrk_r+0x1a>
 800e754:	602b      	str	r3, [r5, #0]
 800e756:	bd38      	pop	{r3, r4, r5, pc}
 800e758:	2000149c 	.word	0x2000149c

0800e75c <strncmp>:
 800e75c:	b510      	push	{r4, lr}
 800e75e:	b16a      	cbz	r2, 800e77c <strncmp+0x20>
 800e760:	3901      	subs	r1, #1
 800e762:	1884      	adds	r4, r0, r2
 800e764:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e768:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d103      	bne.n	800e778 <strncmp+0x1c>
 800e770:	42a0      	cmp	r0, r4
 800e772:	d001      	beq.n	800e778 <strncmp+0x1c>
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1f5      	bne.n	800e764 <strncmp+0x8>
 800e778:	1a98      	subs	r0, r3, r2
 800e77a:	bd10      	pop	{r4, pc}
 800e77c:	4610      	mov	r0, r2
 800e77e:	e7fc      	b.n	800e77a <strncmp+0x1e>

0800e780 <__ascii_wctomb>:
 800e780:	b149      	cbz	r1, 800e796 <__ascii_wctomb+0x16>
 800e782:	2aff      	cmp	r2, #255	; 0xff
 800e784:	bf85      	ittet	hi
 800e786:	238a      	movhi	r3, #138	; 0x8a
 800e788:	6003      	strhi	r3, [r0, #0]
 800e78a:	700a      	strbls	r2, [r1, #0]
 800e78c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e790:	bf98      	it	ls
 800e792:	2001      	movls	r0, #1
 800e794:	4770      	bx	lr
 800e796:	4608      	mov	r0, r1
 800e798:	4770      	bx	lr

0800e79a <memmove>:
 800e79a:	4288      	cmp	r0, r1
 800e79c:	b510      	push	{r4, lr}
 800e79e:	eb01 0302 	add.w	r3, r1, r2
 800e7a2:	d807      	bhi.n	800e7b4 <memmove+0x1a>
 800e7a4:	1e42      	subs	r2, r0, #1
 800e7a6:	4299      	cmp	r1, r3
 800e7a8:	d00a      	beq.n	800e7c0 <memmove+0x26>
 800e7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e7b2:	e7f8      	b.n	800e7a6 <memmove+0xc>
 800e7b4:	4283      	cmp	r3, r0
 800e7b6:	d9f5      	bls.n	800e7a4 <memmove+0xa>
 800e7b8:	1881      	adds	r1, r0, r2
 800e7ba:	1ad2      	subs	r2, r2, r3
 800e7bc:	42d3      	cmn	r3, r2
 800e7be:	d100      	bne.n	800e7c2 <memmove+0x28>
 800e7c0:	bd10      	pop	{r4, pc}
 800e7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e7ca:	e7f7      	b.n	800e7bc <memmove+0x22>

0800e7cc <__malloc_lock>:
 800e7cc:	4770      	bx	lr

0800e7ce <__malloc_unlock>:
 800e7ce:	4770      	bx	lr

0800e7d0 <_realloc_r>:
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	4607      	mov	r7, r0
 800e7d4:	4614      	mov	r4, r2
 800e7d6:	460e      	mov	r6, r1
 800e7d8:	b921      	cbnz	r1, 800e7e4 <_realloc_r+0x14>
 800e7da:	4611      	mov	r1, r2
 800e7dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e7e0:	f7ff be00 	b.w	800e3e4 <_malloc_r>
 800e7e4:	b922      	cbnz	r2, 800e7f0 <_realloc_r+0x20>
 800e7e6:	f7ff fdaf 	bl	800e348 <_free_r>
 800e7ea:	4625      	mov	r5, r4
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7f0:	f000 f814 	bl	800e81c <_malloc_usable_size_r>
 800e7f4:	42a0      	cmp	r0, r4
 800e7f6:	d20f      	bcs.n	800e818 <_realloc_r+0x48>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	f7ff fdf2 	bl	800e3e4 <_malloc_r>
 800e800:	4605      	mov	r5, r0
 800e802:	2800      	cmp	r0, #0
 800e804:	d0f2      	beq.n	800e7ec <_realloc_r+0x1c>
 800e806:	4631      	mov	r1, r6
 800e808:	4622      	mov	r2, r4
 800e80a:	f7ff f985 	bl	800db18 <memcpy>
 800e80e:	4631      	mov	r1, r6
 800e810:	4638      	mov	r0, r7
 800e812:	f7ff fd99 	bl	800e348 <_free_r>
 800e816:	e7e9      	b.n	800e7ec <_realloc_r+0x1c>
 800e818:	4635      	mov	r5, r6
 800e81a:	e7e7      	b.n	800e7ec <_realloc_r+0x1c>

0800e81c <_malloc_usable_size_r>:
 800e81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e820:	1f18      	subs	r0, r3, #4
 800e822:	2b00      	cmp	r3, #0
 800e824:	bfbc      	itt	lt
 800e826:	580b      	ldrlt	r3, [r1, r0]
 800e828:	18c0      	addlt	r0, r0, r3
 800e82a:	4770      	bx	lr

0800e82c <_init>:
 800e82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82e:	bf00      	nop
 800e830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e832:	bc08      	pop	{r3}
 800e834:	469e      	mov	lr, r3
 800e836:	4770      	bx	lr

0800e838 <_fini>:
 800e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83a:	bf00      	nop
 800e83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83e:	bc08      	pop	{r3}
 800e840:	469e      	mov	lr, r3
 800e842:	4770      	bx	lr
