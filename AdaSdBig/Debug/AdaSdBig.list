
AdaSdBig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800bb80  0800bb80  0001bb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf40  0800bf40  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf40  0800bf40  0001bf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf48  0800bf48  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf48  0800bf48  0001bf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf4c  0800bf4c  0001bf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bf50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  200001dc  0800c12c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000143c  0800c12c  0002143c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012529  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b1a  00000000  00000000  00032735  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235fe  00000000  00000000  00036b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5c9  00000000  00000000  0005a116  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd1fa  00000000  00000000  000676df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001348d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  00134954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb64 	.word	0x0800bb64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bb64 	.word	0x0800bb64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08b      	sub	sp, #44	; 0x2c
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  FRESULT fres;
	  //uint32_t raw_sec;
	  //float temp_c;
	  char log_path[] = "/SECLOG.TXT";
 8000f8e:	4a38      	ldr	r2, [pc, #224]	; (8001070 <main+0xe8>)
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f000 fd33 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f875 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 f977 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa6:	f000 f94d 	bl	8001244 <MX_DMA_Init>
  MX_RTC_Init();
 8000faa:	f000 f905 	bl	80011b8 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000fae:	f000 f929 	bl	8001204 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000fb2:	f004 fb5b 	bl	800566c <MX_FATFS_Init>
  MX_CRC_Init();
 8000fb6:	f000 f8eb 	bl	8001190 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbe:	f000 fd93 	bl	8001ae8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2118      	movs	r1, #24
 8000fc6:	482b      	ldr	r0, [pc, #172]	; (8001074 <main+0xec>)
 8000fc8:	f001 fc14 	bl	80027f4 <HAL_GPIO_WritePin>
	  //raw_sec = GetRtcSecond();
	  //raw_sec = 10000;
	  GetRtcSecond();
 8000fcc:	f000 f9ec 	bl	80013a8 <GetRtcSecond>
	    //if ( raw_sec == 0 ) {
	   //   BlinkLED(100, 5);
	   // } else {

	  microseconds = timeVar.Seconds+ (float)(32768-timeVar.SubSeconds)/(32768);
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <main+0xf0>)
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <main+0xf0>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fec:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800107c <main+0xf4>
 8000ff0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <main+0xf8>)
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
	      // Convert temperature to decimal format (without float conversion)
	      //raw_sec *= 100;
	      sprintf((char*)buf,
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <main+0xf8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff faa0 	bl	8000548 <__aeabi_f2d>
 8001008:	4603      	mov	r3, r0
 800100a:	460c      	mov	r4, r1
 800100c:	1d38      	adds	r0, r7, #4
 800100e:	461a      	mov	r2, r3
 8001010:	4623      	mov	r3, r4
 8001012:	491c      	ldr	r1, [pc, #112]	; (8001084 <main+0xfc>)
 8001014:	f007 feb2 	bl	8008d7c <siprintf>
	      // Print temperature to console
	      //CDC_Transmit_FS((uint8_t*)buf, strlen(buf));

	      // Turn LED on while writing to file

	      fres = AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8d7 	bl	80001d0 <strlen>
 8001022:	4604      	mov	r4, r0
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8d2 	bl	80001d0 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	f107 0018 	add.w	r0, r7, #24
 8001034:	4621      	mov	r1, r4
 8001036:	f000 f9d5 	bl	80013e4 <AppendToFile>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2118      	movs	r1, #24
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <main+0xec>)
 8001046:	f001 fbd5 	bl	80027f4 <HAL_GPIO_WritePin>

	      // If error writing to card, blink 3 times
	      if ( fres != FR_OK) {
 800104a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00a      	beq.n	8001068 <main+0xe0>
		      sprintf((char*)buf,
 8001052:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	490b      	ldr	r1, [pc, #44]	; (8001088 <main+0x100>)
 800105a:	4618      	mov	r0, r3
 800105c:	f007 fe8e 	bl	8008d7c <siprintf>
		    		  "%d\n",
					  fres);
		      //AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
		      //CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
	        BlinkLED(200, 3);
 8001060:	2103      	movs	r1, #3
 8001062:	20c8      	movs	r0, #200	; 0xc8
 8001064:	f000 fa88 	bl	8001578 <BlinkLED>
	  //HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_SET);
	  //HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin, GPIO_PIN_SET);
	  //HAL_Delay(1000);
	  //HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
	  //HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_RESET);
	  HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f000 fd3d 	bl	8001ae8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800106e:	e7a8      	b.n	8000fc2 <main+0x3a>
 8001070:	0800bb8c 	.word	0x0800bb8c
 8001074:	40021000 	.word	0x40021000
 8001078:	20000330 	.word	0x20000330
 800107c:	47000000 	.word	0x47000000
 8001080:	200002a0 	.word	0x200002a0
 8001084:	0800bb80 	.word	0x0800bb80
 8001088:	0800bb88 	.word	0x0800bb88

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b098      	sub	sp, #96	; 0x60
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001096:	2230      	movs	r2, #48	; 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f007 f822 	bl	80080e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <SystemClock_Config+0xfc>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a30      	ldr	r2, [pc, #192]	; (8001188 <SystemClock_Config+0xfc>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <SystemClock_Config+0xfc>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <SystemClock_Config+0x100>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <SystemClock_Config+0x100>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <SystemClock_Config+0x100>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80010f6:	2305      	movs	r3, #5
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800110e:	2304      	movs	r3, #4
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001112:	23a8      	movs	r3, #168	; 0xa8
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800111a:	2307      	movs	r3, #7
 800111c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fb80 	bl	8002828 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800112e:	f000 fa49 	bl	80015c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2105      	movs	r1, #5
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fdd9 	bl	8002d08 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800115c:	f000 fa32 	bl	80015c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001160:	2302      	movs	r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4618      	mov	r0, r3
 8001170:	f001 ff88 	bl	8003084 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800117a:	f000 fa23 	bl	80015c4 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3760      	adds	r7, #96	; 0x60
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40007000 	.word	0x40007000

08001190 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_CRC_Init+0x20>)
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <MX_CRC_Init+0x24>)
 8001198:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_CRC_Init+0x20>)
 800119c:	f000 fdd7 	bl	8001d4e <HAL_CRC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011a6:	f000 fa0d 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002a8 	.word	0x200002a8
 80011b4:	40023000 	.word	0x40023000

080011b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_RTC_Init+0x44>)
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <MX_RTC_Init+0x48>)
 80011c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_RTC_Init+0x44>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_RTC_Init+0x44>)
 80011ca:	227f      	movs	r2, #127	; 0x7f
 80011cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_RTC_Init+0x44>)
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_RTC_Init+0x44>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_RTC_Init+0x44>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_RTC_Init+0x44>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_RTC_Init+0x44>)
 80011e8:	f002 f82e 	bl	8003248 <HAL_RTC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80011f2:	f000 f9e7 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200002b0 	.word	0x200002b0
 8001200:	40002800 	.word	0x40002800

08001204 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SDIO_SD_Init+0x38>)
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <MX_SDIO_SD_Init+0x3c>)
 800120c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_SDIO_SD_Init+0x38>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SDIO_SD_Init+0x38>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_SDIO_SD_Init+0x38>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SDIO_SD_Init+0x38>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <MX_SDIO_SD_Init+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <MX_SDIO_SD_Init+0x38>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000344 	.word	0x20000344
 8001240:	40012c00 	.word	0x40012c00

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_DMA_Init+0x4c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DMA_Init+0x4c>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_DMA_Init+0x4c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	203b      	movs	r0, #59	; 0x3b
 800126c:	f000 fd39 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001270:	203b      	movs	r0, #59	; 0x3b
 8001272:	f000 fd52 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2045      	movs	r0, #69	; 0x45
 800127c:	f000 fd31 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001280:	2045      	movs	r0, #69	; 0x45
 8001282:	f000 fd4a 	bl	8001d1a <HAL_NVIC_EnableIRQ>

}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <MX_GPIO_Init+0x108>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a3a      	ldr	r2, [pc, #232]	; (800139c <MX_GPIO_Init+0x108>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <MX_GPIO_Init+0x108>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <MX_GPIO_Init+0x108>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <MX_GPIO_Init+0x108>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <MX_GPIO_Init+0x108>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_GPIO_Init+0x108>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a2c      	ldr	r2, [pc, #176]	; (800139c <MX_GPIO_Init+0x108>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_GPIO_Init+0x108>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_GPIO_Init+0x108>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a25      	ldr	r2, [pc, #148]	; (800139c <MX_GPIO_Init+0x108>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_GPIO_Init+0x108>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_GPIO_Init+0x108>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a1e      	ldr	r2, [pc, #120]	; (800139c <MX_GPIO_Init+0x108>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_GPIO_Init+0x108>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_GPIO_Init+0x108>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <MX_GPIO_Init+0x108>)
 8001340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_GPIO_Init+0x108>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2118      	movs	r1, #24
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <MX_GPIO_Init+0x10c>)
 8001358:	f001 fa4c 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800135c:	2318      	movs	r3, #24
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001360:	2311      	movs	r3, #17
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <MX_GPIO_Init+0x10c>)
 8001374:	f001 f8a4 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001382:	2302      	movs	r3, #2
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_GPIO_Init+0x110>)
 800138e:	f001 f897 	bl	80024c0 <HAL_GPIO_Init>

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40021800 	.word	0x40021800

080013a8 <GetRtcSecond>:

/* USER CODE BEGIN 4 */
void GetRtcSecond(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

    //  HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
//  if(HAL_RTC_WaitForSynchro(&hrtc) == HAL_OK){


        if (HAL_RTC_GetTime(&hrtc,&timeVar,RTC_FORMAT_BIN) != HAL_OK)
 80013ac:	2200      	movs	r2, #0
 80013ae:	490a      	ldr	r1, [pc, #40]	; (80013d8 <GetRtcSecond+0x30>)
 80013b0:	480a      	ldr	r0, [pc, #40]	; (80013dc <GetRtcSecond+0x34>)
 80013b2:	f001 ffda 	bl	800336a <HAL_RTC_GetTime>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <GetRtcSecond+0x18>
        {
          Error_Handler();
 80013bc:	f000 f902 	bl	80015c4 <Error_Handler>
        }
        if (HAL_RTC_GetDate(&hrtc,&dateVar,RTC_FORMAT_BIN) != HAL_OK)
 80013c0:	2200      	movs	r2, #0
 80013c2:	4907      	ldr	r1, [pc, #28]	; (80013e0 <GetRtcSecond+0x38>)
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <GetRtcSecond+0x34>)
 80013c6:	f002 f82e 	bl	8003426 <HAL_RTC_GetDate>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <GetRtcSecond+0x2c>
        {
          Error_Handler();
 80013d0:	f000 f8f8 	bl	80015c4 <Error_Handler>
        }

        //return timeVar.SubSeconds;
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000330 	.word	0x20000330
 80013dc:	200002b0 	.word	0x200002b0
 80013e0:	200002a4 	.word	0x200002a4

080013e4 <AppendToFile>:



// Append string to file given at path
FRESULT AppendToFile(char* path, size_t path_len, char* msg, size_t msg_len) {
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 80013ea:	b081      	sub	sp, #4
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	f107 0420 	add.w	r4, r7, #32
 80013f2:	3c14      	subs	r4, #20
 80013f4:	6020      	str	r0, [r4, #0]
 80013f6:	f107 0020 	add.w	r0, r7, #32
 80013fa:	3818      	subs	r0, #24
 80013fc:	6001      	str	r1, [r0, #0]
 80013fe:	f107 0120 	add.w	r1, r7, #32
 8001402:	391c      	subs	r1, #28
 8001404:	600a      	str	r2, [r1, #0]
 8001406:	463a      	mov	r2, r7
 8001408:	6013      	str	r3, [r2, #0]
  FIL myFILE;
  UINT testByte;
  FRESULT stat;

  // Bounds check on strings
  if ( (path[path_len] != 0) || (msg[msg_len] != 0) ) {
 800140a:	f107 0220 	add.w	r2, r7, #32
 800140e:	3a14      	subs	r2, #20
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	3b18      	subs	r3, #24
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <AppendToFile+0x52>
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	3b1c      	subs	r3, #28
 8001428:	4639      	mov	r1, r7
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	680b      	ldr	r3, [r1, #0]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <AppendToFile+0x56>
    return FR_INVALID_NAME;
 8001436:	2306      	movs	r3, #6
 8001438:	e094      	b.n	8001564 <AppendToFile+0x180>
  }

  // Re-initialize SD
  if ( BSP_SD_Init() != MSD_OK ) {
 800143a:	f004 f931 	bl	80056a0 <BSP_SD_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <AppendToFile+0x64>
    return FR_NOT_READY;
 8001444:	2303      	movs	r3, #3
 8001446:	e08d      	b.n	8001564 <AppendToFile+0x180>
  }

  // Re-initialize FATFS
  if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
 8001448:	4849      	ldr	r0, [pc, #292]	; (8001570 <AppendToFile+0x18c>)
 800144a:	f006 fe13 	bl	8008074 <FATFS_UnLinkDriver>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <AppendToFile+0x74>
    return FR_NOT_READY;
 8001454:	2303      	movs	r3, #3
 8001456:	e085      	b.n	8001564 <AppendToFile+0x180>
  }
  if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
 8001458:	4945      	ldr	r1, [pc, #276]	; (8001570 <AppendToFile+0x18c>)
 800145a:	4846      	ldr	r0, [pc, #280]	; (8001574 <AppendToFile+0x190>)
 800145c:	f006 fdc2 	bl	8007fe4 <FATFS_LinkDriver>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <AppendToFile+0x86>
    return FR_NOT_READY;
 8001466:	2303      	movs	r3, #3
 8001468:	e07c      	b.n	8001564 <AppendToFile+0x180>
  }

  // Mount filesystem
  stat = f_mount(&fs, SDPath, 0);
 800146a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 800146e:	2200      	movs	r2, #0
 8001470:	493f      	ldr	r1, [pc, #252]	; (8001570 <AppendToFile+0x18c>)
 8001472:	4618      	mov	r0, r3
 8001474:	f006 f91c 	bl	80076b0 <f_mount>
 8001478:	4603      	mov	r3, r0
 800147a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800147e:	f102 021f 	add.w	r2, r2, #31
 8001482:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 8001484:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001488:	f103 031f 	add.w	r3, r3, #31
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00a      	beq.n	80014a8 <AppendToFile+0xc4>
    f_mount(0, SDPath, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	4936      	ldr	r1, [pc, #216]	; (8001570 <AppendToFile+0x18c>)
 8001496:	2000      	movs	r0, #0
 8001498:	f006 f90a 	bl	80076b0 <f_mount>
    return stat;
 800149c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80014a0:	f103 031f 	add.w	r3, r3, #31
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	e05d      	b.n	8001564 <AppendToFile+0x180>
  }

  // Open file for appending
  stat = f_open(&myFILE, path, FA_WRITE | FA_OPEN_APPEND);
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	3b14      	subs	r3, #20
 80014ae:	f107 0020 	add.w	r0, r7, #32
 80014b2:	3808      	subs	r0, #8
 80014b4:	2232      	movs	r2, #50	; 0x32
 80014b6:	6819      	ldr	r1, [r3, #0]
 80014b8:	f006 f940 	bl	800773c <f_open>
 80014bc:	4603      	mov	r3, r0
 80014be:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014c2:	f102 021f 	add.w	r2, r2, #31
 80014c6:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 80014c8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80014cc:	f103 031f 	add.w	r3, r3, #31
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <AppendToFile+0x108>
    f_mount(0, SDPath, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	4925      	ldr	r1, [pc, #148]	; (8001570 <AppendToFile+0x18c>)
 80014da:	2000      	movs	r0, #0
 80014dc:	f006 f8e8 	bl	80076b0 <f_mount>
    return stat;
 80014e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80014e4:	f103 031f 	add.w	r3, r3, #31
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	e03b      	b.n	8001564 <AppendToFile+0x180>
  }

  // Write message to end of file
  stat = f_write(&myFILE, msg, msg_len, &testByte);
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	3b0c      	subs	r3, #12
 80014f2:	463a      	mov	r2, r7
 80014f4:	f107 0120 	add.w	r1, r7, #32
 80014f8:	391c      	subs	r1, #28
 80014fa:	f107 0020 	add.w	r0, r7, #32
 80014fe:	3808      	subs	r0, #8
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	6809      	ldr	r1, [r1, #0]
 8001504:	f006 fae6 	bl	8007ad4 <f_write>
 8001508:	4603      	mov	r3, r0
 800150a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800150e:	f102 021f 	add.w	r2, r2, #31
 8001512:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 8001514:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001518:	f103 031f 	add.w	r3, r3, #31
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00a      	beq.n	8001538 <AppendToFile+0x154>
    f_mount(0, SDPath, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	4912      	ldr	r1, [pc, #72]	; (8001570 <AppendToFile+0x18c>)
 8001526:	2000      	movs	r0, #0
 8001528:	f006 f8c2 	bl	80076b0 <f_mount>
    return stat;
 800152c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001530:	f103 031f 	add.w	r3, r3, #31
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	e015      	b.n	8001564 <AppendToFile+0x180>
  }

  // Sync, close file, unmount
  stat = f_close(&myFILE);
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	3b08      	subs	r3, #8
 800153e:	4618      	mov	r0, r3
 8001540:	f006 fcda 	bl	8007ef8 <f_close>
 8001544:	4603      	mov	r3, r0
 8001546:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800154a:	f102 021f 	add.w	r2, r2, #31
 800154e:	7013      	strb	r3, [r2, #0]
  f_mount(0, SDPath, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	4907      	ldr	r1, [pc, #28]	; (8001570 <AppendToFile+0x18c>)
 8001554:	2000      	movs	r0, #0
 8001556:	f006 f8ab 	bl	80076b0 <f_mount>

  return stat;
 800155a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800155e:	f103 031f 	add.w	r3, r3, #31
 8001562:	781b      	ldrb	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 800156a:	3704      	adds	r7, #4
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	200003d0 	.word	0x200003d0
 8001574:	0800bbf4 	.word	0x0800bbf4

08001578 <BlinkLED>:

// Blink onboard LED
void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  for ( int i = 0; i < num_blinks; i++ ) {
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e012      	b.n	80015b0 <BlinkLED+0x38>
    //HAL_GPIO_WritePin(GPIOA, 7, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2118      	movs	r1, #24
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <BlinkLED+0x48>)
 8001590:	f001 f930 	bl	80027f4 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 faa7 	bl	8001ae8 <HAL_Delay>
    //HAL_GPIO_WritePin(GPIOA, 7, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2118      	movs	r1, #24
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <BlinkLED+0x48>)
 80015a0:	f001 f928 	bl	80027f4 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fa9f 	bl	8001ae8 <HAL_Delay>
  for ( int i = 0; i < num_blinks; i++ ) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbe8      	blt.n	800158a <BlinkLED+0x12>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ca:	e7fe      	b.n	80015ca <Error_Handler+0x6>

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_MspInit+0x58>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_MspInit+0x58>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_MspInit+0x58>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_MspInit+0x58>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_MspInit+0x58>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_MspInit+0x58>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2005      	movs	r0, #5
 8001610:	f000 fb67 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001614:	2005      	movs	r0, #5
 8001616:	f000 fb80 	bl	8001d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_CRC_MspInit+0x3c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10d      	bne.n	8001656 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_CRC_MspInit+0x40>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_CRC_MspInit+0x40>)
 8001644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_CRC_MspInit+0x40>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023000 	.word	0x40023000
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_RTC_MspInit+0x24>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d102      	bne.n	8001684 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_RTC_MspInit+0x28>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40002800 	.word	0x40002800
 8001694:	42470e3c 	.word	0x42470e3c

08001698 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a68      	ldr	r2, [pc, #416]	; (8001858 <HAL_SD_MspInit+0x1c0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 80c9 	bne.w	800184e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	4a65      	ldr	r2, [pc, #404]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ca:	6453      	str	r3, [r2, #68]	; 0x44
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_SD_MspInit+0x1c4>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6313      	str	r3, [r2, #48]	; 0x30
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_SD_MspInit+0x1c4>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001710:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001714:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001722:	230c      	movs	r3, #12
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	484c      	ldr	r0, [pc, #304]	; (8001860 <HAL_SD_MspInit+0x1c8>)
 800172e:	f000 fec7 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001732:	2304      	movs	r3, #4
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001742:	230c      	movs	r3, #12
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4845      	ldr	r0, [pc, #276]	; (8001864 <HAL_SD_MspInit+0x1cc>)
 800174e:	f000 feb7 	bl	80024c0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001752:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 8001754:	4a45      	ldr	r2, [pc, #276]	; (800186c <HAL_SD_MspInit+0x1d4>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 800175a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 800176e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001772:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001774:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 8001776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800177c:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001784:	4b38      	ldr	r3, [pc, #224]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 8001786:	2220      	movs	r2, #32
 8001788:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 8001792:	2204      	movs	r2, #4
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 8001798:	2203      	movs	r2, #3
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 800179e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 80017a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80017ac:	482e      	ldr	r0, [pc, #184]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 80017ae:	f000 faeb 	bl	8001d88 <HAL_DMA_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80017b8:	f7ff ff04 	bl	80015c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
 80017c2:	4a29      	ldr	r2, [pc, #164]	; (8001868 <HAL_SD_MspInit+0x1d0>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017ca:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <HAL_SD_MspInit+0x1dc>)
 80017cc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017d8:	2240      	movs	r2, #64	; 0x40
 80017da:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 80017fc:	2220      	movs	r2, #32
 80017fe:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 8001808:	2204      	movs	r2, #4
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 800180e:	2203      	movs	r2, #3
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 8001814:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 800181c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001822:	4813      	ldr	r0, [pc, #76]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 8001824:	f000 fab0 	bl	8001d88 <HAL_DMA_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800182e:	f7ff fec9 	bl	80015c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_SD_MspInit+0x1d8>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2031      	movs	r0, #49	; 0x31
 8001844:	f000 fa4d 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001848:	2031      	movs	r0, #49	; 0x31
 800184a:	f000 fa66 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40012c00 	.word	0x40012c00
 800185c:	40023800 	.word	0x40023800
 8001860:	40020800 	.word	0x40020800
 8001864:	40020c00 	.word	0x40020c00
 8001868:	20000240 	.word	0x20000240
 800186c:	40026458 	.word	0x40026458
 8001870:	200002d0 	.word	0x200002d0
 8001874:	400264a0 	.word	0x400264a0

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f8f0 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <SDIO_IRQHandler+0x10>)
 80018e2:	f002 f8cb 	bl	8003a7c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000344 	.word	0x20000344

080018f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <DMA2_Stream3_IRQHandler+0x10>)
 80018f6:	f000 fb6f 	bl	8001fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000240 	.word	0x20000240

08001904 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA2_Stream6_IRQHandler+0x10>)
 800190a:	f000 fb65 	bl	8001fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002d0 	.word	0x200002d0

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f006 fba2 	bl	8008090 <__errno>
 800194c:	4602      	mov	r2, r0
 800194e:	230c      	movs	r3, #12
 8001950:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20020000 	.word	0x20020000
 8001978:	00000400 	.word	0x00000400
 800197c:	200001f8 	.word	0x200001f8
 8001980:	20001440 	.word	0x20001440

08001984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <SystemInit+0x28>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a07      	ldr	r2, [pc, #28]	; (80019ac <SystemInit+0x28>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SystemInit+0x28>)
 800199a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199e:	609a      	str	r2, [r3, #8]
#endif
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019b6:	e003      	b.n	80019c0 <LoopCopyDataInit>

080019b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019be:	3104      	adds	r1, #4

080019c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c8:	d3f6      	bcc.n	80019b8 <CopyDataInit>
  ldr  r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019cc:	e002      	b.n	80019d4 <LoopFillZerobss>

080019ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d0:	f842 3b04 	str.w	r3, [r2], #4

080019d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d8:	d3f9      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd3 	bl	8001984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f006 fb5d 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fad1 	bl	8000f88 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019ec:	0800bf50 	.word	0x0800bf50
  ldr  r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80019f8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80019fc:	2000143c 	.word	0x2000143c

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f94d 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fdc8 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f965 	bl	8001d36 <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f92d 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	200003c8 	.word	0x200003c8

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200003c8 	.word	0x200003c8

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_Delay+0x40>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000008 	.word	0x20000008

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff3e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff31 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e00e      	b.n	8001d7e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fc59 	bl	8001628 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fe9c 	bl	8001ad0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e099      	b.n	8001ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc4:	e00f      	b.n	8001de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc6:	f7ff fe83 	bl	8001ad0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d908      	bls.n	8001de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e078      	b.n	8001ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1e8      	bne.n	8001dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_DMA_Init+0x158>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d107      	bne.n	8001e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0307 	bic.w	r3, r3, #7
 8001e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d117      	bne.n	8001eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00e      	beq.n	8001eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fa9d 	bl	80023cc <DMA_CheckFifoParam>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2240      	movs	r2, #64	; 0x40
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e016      	b.n	8001ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fa54 	bl	8002360 <DMA_CalcBaseAndBitshift>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	223f      	movs	r2, #63	; 0x3f
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	f010803f 	.word	0xf010803f

08001ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_DMA_Start_IT+0x26>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e040      	b.n	8001f8c <HAL_DMA_Start_IT+0xa8>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d12f      	bne.n	8001f7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2202      	movs	r2, #2
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f9e6 	bl	8002304 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	223f      	movs	r2, #63	; 0x3f
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0216 	orr.w	r2, r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0208 	orr.w	r2, r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e005      	b.n	8001f8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00c      	b.n	8001fcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fe4:	4b92      	ldr	r3, [pc, #584]	; (8002230 <HAL_DMA_IRQHandler+0x258>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a92      	ldr	r2, [pc, #584]	; (8002234 <HAL_DMA_IRQHandler+0x25c>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a9b      	lsrs	r3, r3, #10
 8001ff0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2208      	movs	r2, #8
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01a      	beq.n	8002044 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0204 	bic.w	r2, r2, #4
 800202a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2208      	movs	r2, #8
 8002032:	409a      	lsls	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d012      	beq.n	800207a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2201      	movs	r2, #1
 8002068:	409a      	lsls	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	2204      	movs	r2, #4
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d012      	beq.n	80020b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	2204      	movs	r2, #4
 800209e:	409a      	lsls	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	2210      	movs	r2, #16
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d043      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d03c      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2210      	movs	r2, #16
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d018      	beq.n	800211a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d108      	bne.n	8002108 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d024      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
 8002106:	e01f      	b.n	8002148 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
 8002118:	e016      	b.n	8002148 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0208 	bic.w	r2, r2, #8
 8002136:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2220      	movs	r2, #32
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 808e 	beq.w	8002276 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8086 	beq.w	8002276 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2220      	movs	r2, #32
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b05      	cmp	r3, #5
 8002180:	d136      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0216 	bic.w	r2, r2, #22
 8002190:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x1da>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0208 	bic.w	r2, r2, #8
 80021c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	223f      	movs	r2, #63	; 0x3f
 80021c8:	409a      	lsls	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d07d      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
        }
        return;
 80021ee:	e078      	b.n	80022e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01c      	beq.n	8002238 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d108      	bne.n	800221e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	2b00      	cmp	r3, #0
 8002212:	d030      	beq.n	8002276 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e02b      	b.n	8002276 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d027      	beq.n	8002276 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
 800222e:	e022      	b.n	8002276 <HAL_DMA_IRQHandler+0x29e>
 8002230:	20000000 	.word	0x20000000
 8002234:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10f      	bne.n	8002266 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0210 	bic.w	r2, r2, #16
 8002254:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	2b00      	cmp	r3, #0
 800227c:	d032      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d022      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2205      	movs	r2, #5
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3301      	adds	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d307      	bcc.n	80022be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f2      	bne.n	80022a2 <HAL_DMA_IRQHandler+0x2ca>
 80022bc:	e000      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e000      	b.n	80022e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022e2:	bf00      	nop
    }
  }
}
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop

080022ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002320:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d108      	bne.n	8002344 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002342:	e007      	b.n	8002354 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3b10      	subs	r3, #16
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800237a:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <DMA_CalcBaseAndBitshift+0x68>)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d909      	bls.n	80023a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	1d1a      	adds	r2, r3, #4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58
 80023a0:	e007      	b.n	80023b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023aa:	f023 0303 	bic.w	r3, r3, #3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	aaaaaaab 	.word	0xaaaaaaab
 80023c8:	0800bbec 	.word	0x0800bbec

080023cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11f      	bne.n	8002426 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d855      	bhi.n	8002498 <DMA_CheckFifoParam+0xcc>
 80023ec:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <DMA_CheckFifoParam+0x28>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002417 	.word	0x08002417
 80023fc:	08002405 	.word	0x08002405
 8002400:	08002499 	.word	0x08002499
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d045      	beq.n	800249c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e042      	b.n	800249c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800241e:	d13f      	bne.n	80024a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002424:	e03c      	b.n	80024a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	d121      	bne.n	8002474 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d836      	bhi.n	80024a4 <DMA_CheckFifoParam+0xd8>
 8002436:	a201      	add	r2, pc, #4	; (adr r2, 800243c <DMA_CheckFifoParam+0x70>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	0800244d 	.word	0x0800244d
 8002440:	08002453 	.word	0x08002453
 8002444:	0800244d 	.word	0x0800244d
 8002448:	08002465 	.word	0x08002465
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e02f      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d024      	beq.n	80024a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002462:	e021      	b.n	80024a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800246c:	d11e      	bne.n	80024ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002472:	e01b      	b.n	80024ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d902      	bls.n	8002480 <DMA_CheckFifoParam+0xb4>
 800247a:	2b03      	cmp	r3, #3
 800247c:	d003      	beq.n	8002486 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800247e:	e018      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e015      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00e      	beq.n	80024b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      break;
 8002496:	e00b      	b.n	80024b0 <DMA_CheckFifoParam+0xe4>
      break;
 8002498:	bf00      	nop
 800249a:	e00a      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;
 800249c:	bf00      	nop
 800249e:	e008      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;
 80024a0:	bf00      	nop
 80024a2:	e006      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;
 80024a4:	bf00      	nop
 80024a6:	e004      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;
 80024a8:	bf00      	nop
 80024aa:	e002      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80024ac:	bf00      	nop
 80024ae:	e000      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;
 80024b0:	bf00      	nop
    }
  } 
  
  return status; 
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e16b      	b.n	80027b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 815a 	bne.w	80027ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d00b      	beq.n	800251a <HAL_GPIO_Init+0x5a>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800250e:	2b11      	cmp	r3, #17
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b12      	cmp	r3, #18
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0xfc>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80b4 	beq.w	80027ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_GPIO_Init+0x308>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a5e      	ldr	r2, [pc, #376]	; (80027c8 <HAL_GPIO_Init+0x308>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <HAL_GPIO_Init+0x308>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_GPIO_Init+0x30c>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <HAL_GPIO_Init+0x310>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02b      	beq.n	80026e6 <HAL_GPIO_Init+0x226>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_GPIO_Init+0x314>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d025      	beq.n	80026e2 <HAL_GPIO_Init+0x222>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x318>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01f      	beq.n	80026de <HAL_GPIO_Init+0x21e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_GPIO_Init+0x31c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0x21a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4d      	ldr	r2, [pc, #308]	; (80027e0 <HAL_GPIO_Init+0x320>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x216>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x324>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x212>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_GPIO_Init+0x328>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x20e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4a      	ldr	r2, [pc, #296]	; (80027ec <HAL_GPIO_Init+0x32c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x20a>
 80026c6:	2307      	movs	r3, #7
 80026c8:	e00e      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026ca:	2308      	movs	r3, #8
 80026cc:	e00c      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e00a      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x228>
 80026e6:	2300      	movs	r3, #0
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f8:	4934      	ldr	r1, [pc, #208]	; (80027cc <HAL_GPIO_Init+0x30c>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002706:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_GPIO_Init+0x330>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272a:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <HAL_GPIO_Init+0x330>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002730:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_GPIO_Init+0x330>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_GPIO_Init+0x330>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_GPIO_Init+0x330>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <HAL_GPIO_Init+0x330>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_GPIO_Init+0x330>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_GPIO_Init+0x330>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	f67f ae90 	bls.w	80024dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	3724      	adds	r7, #36	; 0x24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021400 	.word	0x40021400
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40021c00 	.word	0x40021c00
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e25b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d075      	beq.n	8002932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002846:	4ba3      	ldr	r3, [pc, #652]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d00c      	beq.n	800286c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4ba0      	ldr	r3, [pc, #640]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	2b08      	cmp	r3, #8
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b9d      	ldr	r3, [pc, #628]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	4b99      	ldr	r3, [pc, #612]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05b      	beq.n	8002930 <HAL_RCC_OscConfig+0x108>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d157      	bne.n	8002930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e236      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x74>
 800288e:	4b91      	ldr	r3, [pc, #580]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a90      	ldr	r2, [pc, #576]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b8b      	ldr	r3, [pc, #556]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a8a      	ldr	r2, [pc, #552]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b88      	ldr	r3, [pc, #544]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a87      	ldr	r2, [pc, #540]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 80028c0:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a83      	ldr	r2, [pc, #524]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a80      	ldr	r2, [pc, #512]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f8f6 	bl	8001ad0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff f8f2 	bl	8001ad0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1fb      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xc0>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7ff f8e2 	bl	8001ad0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff f8de 	bl	8001ad0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1e7      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0xe8>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d063      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294a:	4b62      	ldr	r3, [pc, #392]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	2b08      	cmp	r3, #8
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002956:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	4b5c      	ldr	r3, [pc, #368]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1bb      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b56      	ldr	r3, [pc, #344]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4952      	ldr	r1, [pc, #328]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	e03a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	4b4f      	ldr	r3, [pc, #316]	; (8002ad8 <HAL_RCC_OscConfig+0x2b0>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7ff f897 	bl	8001ad0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a6:	f7ff f893 	bl	8001ad0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e19c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4940      	ldr	r1, [pc, #256]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
 80029d8:	e015      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029da:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <HAL_RCC_OscConfig+0x2b0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7ff f876 	bl	8001ad0 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e8:	f7ff f872 	bl	8001ad0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e17b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d030      	beq.n	8002a74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	4b30      	ldr	r3, [pc, #192]	; (8002adc <HAL_RCC_OscConfig+0x2b4>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7ff f856 	bl	8001ad0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff f852 	bl	8001ad0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e15b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x200>
 8002a46:	e015      	b.n	8002a74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a48:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x2b4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff f83f 	bl	8001ad0 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a56:	f7ff f83b 	bl	8001ad0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e144      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a0 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_OscConfig+0x2b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d121      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_RCC_OscConfig+0x2b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <HAL_RCC_OscConfig+0x2b8>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aca:	f7ff f801 	bl	8001ad0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	e011      	b.n	8002af6 <HAL_RCC_OscConfig+0x2ce>
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470000 	.word	0x42470000
 8002adc:	42470e80 	.word	0x42470e80
 8002ae0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae4:	f7fe fff4 	bl	8001ad0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e0fd      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x4d4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d106      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	e01c      	b.n	8002b52 <HAL_RCC_OscConfig+0x32a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_OscConfig+0x312>
 8002b20:	4b77      	ldr	r3, [pc, #476]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a76      	ldr	r2, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	4b74      	ldr	r3, [pc, #464]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a73      	ldr	r2, [pc, #460]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	e00b      	b.n	8002b52 <HAL_RCC_OscConfig+0x32a>
 8002b3a:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a70      	ldr	r2, [pc, #448]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	4b6e      	ldr	r3, [pc, #440]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a6d      	ldr	r2, [pc, #436]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d015      	beq.n	8002b86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe ffb9 	bl	8001ad0 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe ffb5 	bl	8001ad0 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e0bc      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ee      	beq.n	8002b62 <HAL_RCC_OscConfig+0x33a>
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7fe ffa3 	bl	8001ad0 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe ff9f 	bl	8001ad0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0a6      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba4:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ee      	bne.n	8002b8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a51      	ldr	r2, [pc, #324]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8092 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d05c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d141      	bne.n	8002c64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be0:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <HAL_RCC_OscConfig+0x4dc>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe ff73 	bl	8001ad0 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe ff6f 	bl	8001ad0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e078      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	019b      	lsls	r3, r3, #6
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	4933      	ldr	r1, [pc, #204]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <HAL_RCC_OscConfig+0x4dc>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ff48 	bl	8001ad0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe ff44 	bl	8001ad0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e04d      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x41c>
 8002c62:	e045      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x4dc>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fe ff31 	bl	8001ad0 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fe ff2d 	bl	8001ad0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e036      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x44a>
 8002c90:	e02e      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e029      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_RCC_OscConfig+0x4d8>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11c      	bne.n	8002cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d115      	bne.n	8002cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10d      	bne.n	8002cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	42470060 	.word	0x42470060

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0cc      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90c      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d044      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e067      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4934      	ldr	r1, [pc, #208]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7fe fe6a 	bl	8001ad0 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe fe66 	bl	8001ad0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e04f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d20c      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 f821 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e92:	4601      	mov	r1, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fdca 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	0800bbdc 	.word	0x0800bbdc
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eea:	4b63      	ldr	r3, [pc, #396]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d007      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x32>
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x38>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80b4 	bne.w	8003068 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f02:	60bb      	str	r3, [r7, #8]
       break;
 8002f04:	e0b3      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f06:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f08:	60bb      	str	r3, [r7, #8]
      break;
 8002f0a:	e0b0      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f0c:	4b5a      	ldr	r3, [pc, #360]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f16:	4b58      	ldr	r3, [pc, #352]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d04a      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f22:	4b55      	ldr	r3, [pc, #340]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	ea03 0501 	and.w	r5, r3, r1
 8002f38:	ea04 0602 	and.w	r6, r4, r2
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4632      	mov	r2, r6
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	0154      	lsls	r4, r2, #5
 8002f4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f4e:	014b      	lsls	r3, r1, #5
 8002f50:	4619      	mov	r1, r3
 8002f52:	4622      	mov	r2, r4
 8002f54:	1b49      	subs	r1, r1, r5
 8002f56:	eb62 0206 	sbc.w	r2, r2, r6
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	f04f 0400 	mov.w	r4, #0
 8002f62:	0194      	lsls	r4, r2, #6
 8002f64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f68:	018b      	lsls	r3, r1, #6
 8002f6a:	1a5b      	subs	r3, r3, r1
 8002f6c:	eb64 0402 	sbc.w	r4, r4, r2
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	00e2      	lsls	r2, r4, #3
 8002f7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f7e:	00d9      	lsls	r1, r3, #3
 8002f80:	460b      	mov	r3, r1
 8002f82:	4614      	mov	r4, r2
 8002f84:	195b      	adds	r3, r3, r5
 8002f86:	eb44 0406 	adc.w	r4, r4, r6
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	0262      	lsls	r2, r4, #9
 8002f94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f98:	0259      	lsls	r1, r3, #9
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f04f 0400 	mov.w	r4, #0
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4623      	mov	r3, r4
 8002fac:	f7fd fe6c 	bl	8000c88 <__aeabi_uldivmod>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e049      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb8:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	f04f 0400 	mov.w	r4, #0
 8002fc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	ea03 0501 	and.w	r5, r3, r1
 8002fce:	ea04 0602 	and.w	r6, r4, r2
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	4632      	mov	r2, r6
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	f04f 0400 	mov.w	r4, #0
 8002fde:	0154      	lsls	r4, r2, #5
 8002fe0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fe4:	014b      	lsls	r3, r1, #5
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4622      	mov	r2, r4
 8002fea:	1b49      	subs	r1, r1, r5
 8002fec:	eb62 0206 	sbc.w	r2, r2, r6
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	f04f 0400 	mov.w	r4, #0
 8002ff8:	0194      	lsls	r4, r2, #6
 8002ffa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ffe:	018b      	lsls	r3, r1, #6
 8003000:	1a5b      	subs	r3, r3, r1
 8003002:	eb64 0402 	sbc.w	r4, r4, r2
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	00e2      	lsls	r2, r4, #3
 8003010:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003014:	00d9      	lsls	r1, r3, #3
 8003016:	460b      	mov	r3, r1
 8003018:	4614      	mov	r4, r2
 800301a:	195b      	adds	r3, r3, r5
 800301c:	eb44 0406 	adc.w	r4, r4, r6
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	02a2      	lsls	r2, r4, #10
 800302a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800302e:	0299      	lsls	r1, r3, #10
 8003030:	460b      	mov	r3, r1
 8003032:	4614      	mov	r4, r2
 8003034:	4618      	mov	r0, r3
 8003036:	4621      	mov	r1, r4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f04f 0400 	mov.w	r4, #0
 800303e:	461a      	mov	r2, r3
 8003040:	4623      	mov	r3, r4
 8003042:	f7fd fe21 	bl	8000c88 <__aeabi_uldivmod>
 8003046:	4603      	mov	r3, r0
 8003048:	460c      	mov	r4, r1
 800304a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	60bb      	str	r3, [r7, #8]
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800306a:	60bb      	str	r3, [r7, #8]
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	68bb      	ldr	r3, [r7, #8]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d035      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030ac:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030b2:	f7fe fd0d 	bl	8001ad0 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ba:	f7fe fd09 	bl	8001ad0 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0b0      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	019a      	lsls	r2, r3, #6
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	071b      	lsls	r3, r3, #28
 80030e4:	4955      	ldr	r1, [pc, #340]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030ec:	4b52      	ldr	r3, [pc, #328]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030f2:	f7fe fced 	bl	8001ad0 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030fa:	f7fe fce9 	bl	8001ad0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e090      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310c:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8083 	beq.w	800322c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b44      	ldr	r3, [pc, #272]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a43      	ldr	r2, [pc, #268]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b41      	ldr	r3, [pc, #260]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a3e      	ldr	r2, [pc, #248]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800314e:	f7fe fcbf 	bl	8001ad0 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe fcbb 	bl	8001ad0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e062      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02f      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	429a      	cmp	r2, r3
 8003190:	d028      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003192:	4b2a      	ldr	r3, [pc, #168]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d114      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe fc89 	bl	8001ad0 <HAL_GetTick>
 80031be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe fc85 	bl	8001ad0 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e02a      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ee      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f0:	d10d      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003206:	490d      	ldr	r1, [pc, #52]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
 800320c:	e005      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003214:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003218:	6093      	str	r3, [r2, #8]
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800321c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003226:	4905      	ldr	r1, [pc, #20]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	42470068 	.word	0x42470068
 800323c:	40023800 	.word	0x40023800
 8003240:	40007000 	.word	0x40007000
 8003244:	42470e40 	.word	0x42470e40

08003248 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e083      	b.n	8003362 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7f5b      	ldrb	r3, [r3, #29]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe f9fe 	bl	800166c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	22ca      	movs	r2, #202	; 0xca
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2253      	movs	r2, #83	; 0x53
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f944 	bl	8003514 <RTC_EnterInitMode>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	22ff      	movs	r2, #255	; 0xff
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2204      	movs	r2, #4
 800329e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e05e      	b.n	8003362 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80032b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6919      	ldr	r1, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	041a      	lsls	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003302:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10e      	bne.n	8003330 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8d6 	bl	80034c4 <HAL_RTC_WaitForSynchro>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	22ff      	movs	r2, #255	; 0xff
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2204      	movs	r2, #4
 800332a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e018      	b.n	8003362 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800339c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80033a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d11a      	bne.n	800341c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f8be 	bl	800356c <RTC_Bcd2ToByte>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f8b5 	bl	800356c <RTC_Bcd2ToByte>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	789b      	ldrb	r3, [r3, #2]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f8ac 	bl	800356c <RTC_Bcd2ToByte>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003440:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003444:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	0b5b      	lsrs	r3, r3, #13
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11a      	bne.n	80034ba <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	78db      	ldrb	r3, [r3, #3]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f86f 	bl	800356c <RTC_Bcd2ToByte>
 800348e:	4603      	mov	r3, r0
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	785b      	ldrb	r3, [r3, #1]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f866 	bl	800356c <RTC_Bcd2ToByte>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	789b      	ldrb	r3, [r3, #2]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f85d 	bl	800356c <RTC_Bcd2ToByte>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fe faf6 	bl	8001ad0 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034e6:	e009      	b.n	80034fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80034e8:	f7fe faf2 	bl	8001ad0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034f6:	d901      	bls.n	80034fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e007      	b.n	800350c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ee      	beq.n	80034e8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d119      	bne.n	8003562 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f04f 32ff 	mov.w	r2, #4294967295
 8003536:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003538:	f7fe faca 	bl	8001ad0 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800353e:	e009      	b.n	8003554 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003540:	f7fe fac6 	bl	8001ad0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354e:	d901      	bls.n	8003554 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e007      	b.n	8003564 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ee      	beq.n	8003540 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4413      	add	r3, r2
 800359a:	b2db      	uxtb	r3, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e022      	b.n	8003600 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d105      	bne.n	80035d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fe f863 	bl	8001698 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f814 	bl	8003608 <HAL_SD_InitCard>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00a      	b.n	8003600 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b08e      	sub	sp, #56	; 0x38
 800360c:	af04      	add	r7, sp, #16
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003624:	2376      	movs	r3, #118	; 0x76
 8003626:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681d      	ldr	r5, [r3, #0]
 800362c:	466c      	mov	r4, sp
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003640:	4628      	mov	r0, r5
 8003642:	f001 faaf 	bl	8004ba4 <SDIO_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800364c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e031      	b.n	80036bc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_SD_InitCard+0xbc>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fae7 	bl	8004c36 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_SD_InitCard+0xbc>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 ffdc 	bl	800462c <SD_PowerON>
 8003674:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e013      	b.n	80036bc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fefb 	bl	8004490 <SD_InitCard>
 800369a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bdb0      	pop	{r4, r5, r7, pc}
 80036c4:	422580a0 	.word	0x422580a0

080036c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0c9      	b.n	8003884 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 80c2 	bne.w	8003882 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	441a      	add	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	429a      	cmp	r2, r3
 8003710:	d907      	bls.n	8003722 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0b0      	b.n	8003884 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a50      	ldr	r2, [pc, #320]	; (800388c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a4f      	ldr	r2, [pc, #316]	; (8003890 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003754:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2200      	movs	r2, #0
 800375c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3380      	adds	r3, #128	; 0x80
 8003768:	4619      	mov	r1, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	025b      	lsls	r3, r3, #9
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	f7fe fbb7 	bl	8001ee4 <HAL_DMA_Start_IT>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a40      	ldr	r2, [pc, #256]	; (8003894 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003792:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e06b      	b.n	8003884 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80037ac:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d002      	beq.n	80037c0 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	025b      	lsls	r3, r3, #9
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fac7 	bl	8004d5c <SDMMC_CmdBlockLength>
 80037ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00f      	beq.n	80037f6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2e      	ldr	r2, [pc, #184]	; (8003894 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e046      	b.n	8003884 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	025b      	lsls	r3, r3, #9
 8003800:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003802:	2390      	movs	r3, #144	; 0x90
 8003804:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003806:	2302      	movs	r3, #2
 8003808:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800380e:	2301      	movs	r3, #1
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f107 0210 	add.w	r2, r7, #16
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fa71 	bl	8004d04 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d90a      	bls.n	800383e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2282      	movs	r2, #130	; 0x82
 800382c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003834:	4618      	mov	r0, r3
 8003836:	f001 fad5 	bl	8004de4 <SDMMC_CmdReadMultiBlock>
 800383a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800383c:	e009      	b.n	8003852 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2281      	movs	r2, #129	; 0x81
 8003842:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384a:	4618      	mov	r0, r3
 800384c:	f001 faa8 	bl	8004da0 <SDMMC_CmdReadSingleBlock>
 8003850:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e002      	b.n	8003884 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e000      	b.n	8003884 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003882:	2302      	movs	r3, #2
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	3730      	adds	r7, #48	; 0x30
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	0800429f 	.word	0x0800429f
 8003890:	08004311 	.word	0x08004311
 8003894:	004005ff 	.word	0x004005ff
 8003898:	4225858c 	.word	0x4225858c

0800389c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0ce      	b.n	8003a62 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 80c7 	bne.w	8003a60 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	441a      	add	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d907      	bls.n	80038f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0b5      	b.n	8003a62 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	4a53      	ldr	r2, [pc, #332]	; (8003a6c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8003928:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	2200      	movs	r2, #0
 8003930:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	2b01      	cmp	r3, #1
 8003938:	d002      	beq.n	8003940 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	025b      	lsls	r3, r3, #9
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fa07 	bl	8004d5c <SDMMC_CmdBlockLength>
 800394e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00f      	beq.n	8003976 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a46      	ldr	r2, [pc, #280]	; (8003a74 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	431a      	orrs	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e075      	b.n	8003a62 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d90a      	bls.n	8003992 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	22a0      	movs	r2, #160	; 0xa0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fa6f 	bl	8004e6c <SDMMC_CmdWriteMultiBlock>
 800398e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003990:	e009      	b.n	80039a6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2290      	movs	r2, #144	; 0x90
 8003996:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 fa42 	bl	8004e28 <SDMMC_CmdWriteSingleBlock>
 80039a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d012      	beq.n	80039d2 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e047      	b.n	8003a62 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3380      	adds	r3, #128	; 0x80
 80039e4:	461a      	mov	r2, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	025b      	lsls	r3, r3, #9
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	f7fe fa7a 	bl	8001ee4 <HAL_DMA_Start_IT>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01c      	beq.n	8003a30 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003a04:	f023 0302 	bic.w	r3, r3, #2
 8003a08:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e018      	b.n	8003a62 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295
 8003a34:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	025b      	lsls	r3, r3, #9
 8003a3a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003a3c:	2390      	movs	r3, #144	; 0x90
 8003a3e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f107 0210 	add.w	r2, r7, #16
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 f954 	bl	8004d04 <SDIO_ConfigData>

      return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08004275 	.word	0x08004275
 8003a70:	08004311 	.word	0x08004311
 8003a74:	004005ff 	.word	0x004005ff
 8003a78:	4225858c 	.word	0x4225858c

08003a7c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_SD_IRQHandler+0x2e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 ffd8 	bl	8004a58 <SD_Read_IT>
 8003aa8:	e165      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 808f 	beq.w	8003bd8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003ad2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003ad6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d039      	beq.n	8003b66 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <HAL_SD_IRQHandler+0x8a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f9d0 	bl	8004eb0 <SDMMC_CmdStopTransfer>
 8003b10:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f92f 	bl	8003d88 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_SD_IRQHandler+0xda>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f001 fe26 	bl	80057a8 <HAL_SD_RxCpltCallback>
 8003b5c:	e10b      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f001 fe18 	bl	8005794 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b64:	e107      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8102 	beq.w	8003d76 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f995 	bl	8004eb0 <SDMMC_CmdStopTransfer>
 8003b86:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8f4 	bl	8003d88 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 80e5 	bne.w	8003d76 <HAL_SD_IRQHandler+0x2fa>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 80df 	bne.w	8003d76 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0208 	bic.w	r2, r2, #8
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f001 fddf 	bl	8005794 <HAL_SD_TxCpltCallback>
}
 8003bd6:	e0ce      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_SD_IRQHandler+0x17c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 ff82 	bl	8004afa <SD_Write_IT>
 8003bf6:	e0be      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfe:	f240 233a 	movw	r3, #570	; 0x23a
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80b6 	beq.w	8003d76 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	f043 0202 	orr.w	r2, r3, #2
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	f043 0208 	orr.w	r2, r3, #8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	f043 0208 	orr.w	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f240 723a 	movw	r2, #1850	; 0x73a
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003ca4:	f023 0302 	bic.w	r3, r3, #2
 8003ca8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 f8fe 	bl	8004eb0 <SDMMC_CmdStopTransfer>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f855 	bl	8003d88 <HAL_SD_ErrorCallback>
}
 8003cde:	e04a      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d045      	beq.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_SD_IRQHandler+0x282>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d011      	beq.n	8003d22 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_SD_IRQHandler+0x304>)
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe f942 	bl	8001f94 <HAL_DMA_Abort_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02f      	beq.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fb4a 	bl	80043b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d20:	e029      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_SD_IRQHandler+0x2ba>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <HAL_SD_IRQHandler+0x308>)
 8003d3c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe f926 	bl	8001f94 <HAL_DMA_Abort_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d013      	beq.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb65 	bl	8004422 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003d58:	e00d      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f001 fd06 	bl	8005780 <HAL_SD_AbortCallback>
}
 8003d74:	e7ff      	b.n	8003d76 <HAL_SD_IRQHandler+0x2fa>
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	080043b5 	.word	0x080043b5
 8003d84:	08004423 	.word	0x08004423

08003d88 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003daa:	0f9b      	lsrs	r3, r3, #30
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc8:	0e1b      	lsrs	r3, r3, #24
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfc:	0d1b      	lsrs	r3, r3, #20
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e1a:	0bdb      	lsrs	r3, r3, #15
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2c:	0b9b      	lsrs	r3, r3, #14
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3e:	0b5b      	lsrs	r3, r3, #13
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e50:	0b1b      	lsrs	r3, r3, #12
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2200      	movs	r2, #0
 8003e62:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d163      	bne.n	8003f34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e70:	009a      	lsls	r2, r3, #2
 8003e72:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e76:	4013      	ands	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e7c:	0f92      	lsrs	r2, r2, #30
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e88:	0edb      	lsrs	r3, r3, #27
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	0e1b      	lsrs	r3, r3, #24
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eac:	0d5b      	lsrs	r3, r3, #21
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebe:	0c9b      	lsrs	r3, r3, #18
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed0:	0bdb      	lsrs	r3, r3, #15
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	7e1b      	ldrb	r3, [r3, #24]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003efe:	fb02 f203 	mul.w	r2, r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	7a1b      	ldrb	r3, [r3, #8]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	2201      	movs	r2, #1
 8003f12:	409a      	lsls	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f20:	0a52      	lsrs	r2, r2, #9
 8003f22:	fb02 f203 	mul.w	r2, r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	661a      	str	r2, [r3, #96]	; 0x60
 8003f32:	e031      	b.n	8003f98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d11d      	bne.n	8003f78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	0c1b      	lsrs	r3, r3, #16
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	3301      	adds	r3, #1
 8003f58:	029a      	lsls	r2, r3, #10
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60
 8003f76:	e00f      	b.n	8003f98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <HAL_SD_GetCardCSD+0x344>)
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e09d      	b.n	80040d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9c:	0b9b      	lsrs	r3, r3, #14
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	09db      	lsrs	r3, r3, #7
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	0fdb      	lsrs	r3, r3, #31
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	0f5b      	lsrs	r3, r3, #29
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	0d9b      	lsrs	r3, r3, #22
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	0d5b      	lsrs	r3, r3, #21
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	0bdb      	lsrs	r3, r3, #15
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	0b9b      	lsrs	r3, r3, #14
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	0b5b      	lsrs	r3, r3, #13
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	0b1b      	lsrs	r3, r3, #12
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	0a9b      	lsrs	r3, r3, #10
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	b2da      	uxtb	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	004005ff 	.word	0x004005ff

080040e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af04      	add	r7, sp, #16
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	2b03      	cmp	r3, #3
 8004154:	d02e      	beq.n	80041b4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	d106      	bne.n	800416c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
 800416a:	e029      	b.n	80041c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004172:	d10a      	bne.n	800418a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fb0f 	bl	8004798 <SD_WideBus_Enable>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
 8004188:	e01a      	b.n	80041c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fb4c 	bl	800482e <SD_WideBus_Disable>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
 80041a4:	e00c      	b.n	80041c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
 80041b2:	e005      	b.n	80041c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e024      	b.n	8004226 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681d      	ldr	r5, [r3, #0]
 8004202:	466c      	mov	r4, sp
 8004204:	f107 0318 	add.w	r3, r7, #24
 8004208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800420c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004216:	4628      	mov	r0, r5
 8004218:	f000 fcc4 	bl	8004ba4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3728      	adds	r7, #40	; 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bdb0      	pop	{r4, r5, r7, pc}
 800422e:	bf00      	nop
 8004230:	004005ff 	.word	0x004005ff

08004234 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa7e 	bl	8004748 <SD_SendStatus>
 800424c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800426a:	693b      	ldr	r3, [r7, #16]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004290:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b82      	cmp	r3, #130	; 0x82
 80042b2:	d111      	bne.n	80042d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fdf9 	bl	8004eb0 <SDMMC_CmdStopTransfer>
 80042be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fd58 	bl	8003d88 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0208 	bic.w	r2, r2, #8
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f001 fa51 	bl	80057a8 <HAL_SD_RxCpltCallback>
#endif
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fd ffe4 	bl	80022ec <HAL_DMA_GetError>
 8004324:	4603      	mov	r3, r0
 8004326:	2b02      	cmp	r3, #2
 8004328:	d03e      	beq.n	80043a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d002      	beq.n	8004346 <SD_DMAError+0x36>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d12d      	bne.n	80043a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <SD_DMAError+0xa0>)
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800436a:	6978      	ldr	r0, [r7, #20]
 800436c:	f7ff ff62 	bl	8004234 <HAL_SD_GetCardState>
 8004370:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b06      	cmp	r3, #6
 8004376:	d002      	beq.n	800437e <SD_DMAError+0x6e>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b05      	cmp	r3, #5
 800437c:	d10a      	bne.n	8004394 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fd94 	bl	8004eb0 <SDMMC_CmdStopTransfer>
 8004388:	4602      	mov	r2, r0
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	431a      	orrs	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f7ff fcf0 	bl	8003d88 <HAL_SD_ErrorCallback>
#endif
  }
}
 80043a8:	bf00      	nop
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	004005ff 	.word	0x004005ff

080043b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff ff31 	bl	8004234 <HAL_SD_GetCardState>
 80043d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b06      	cmp	r3, #6
 80043e6:	d002      	beq.n	80043ee <SD_DMATxAbort+0x3a>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d10a      	bne.n	8004404 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fd5c 	bl	8004eb0 <SDMMC_CmdStopTransfer>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	431a      	orrs	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f001 f9b7 	bl	8005780 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004412:	e002      	b.n	800441a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fcb7 	bl	8003d88 <HAL_SD_ErrorCallback>
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f240 523a 	movw	r2, #1338	; 0x53a
 8004438:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff fefa 	bl	8004234 <HAL_SD_GetCardState>
 8004440:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b06      	cmp	r3, #6
 8004454:	d002      	beq.n	800445c <SD_DMARxAbort+0x3a>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b05      	cmp	r3, #5
 800445a:	d10a      	bne.n	8004472 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fd25 	bl	8004eb0 <SDMMC_CmdStopTransfer>
 8004466:	4602      	mov	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f001 f980 	bl	8005780 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004480:	e002      	b.n	8004488 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fc80 	bl	8003d88 <HAL_SD_ErrorCallback>
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004490:	b5b0      	push	{r4, r5, r7, lr}
 8004492:	b094      	sub	sp, #80	; 0x50
 8004494:	af04      	add	r7, sp, #16
 8004496:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004498:	2301      	movs	r3, #1
 800449a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fbd7 	bl	8004c54 <SDIO_GetPowerState>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044b0:	e0b7      	b.n	8004622 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d02f      	beq.n	800451a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fe00 	bl	80050c4 <SDMMC_CmdSendCID>
 80044c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80044cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ce:	e0a8      	b.n	8004622 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fc01 	bl	8004cde <SDIO_GetResponse>
 80044dc:	4602      	mov	r2, r0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2104      	movs	r1, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fbf8 	bl	8004cde <SDIO_GetResponse>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2108      	movs	r1, #8
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fbef 	bl	8004cde <SDIO_GetResponse>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	210c      	movs	r1, #12
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fbe6 	bl	8004cde <SDIO_GetResponse>
 8004512:	4602      	mov	r2, r0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	2b03      	cmp	r3, #3
 8004520:	d00d      	beq.n	800453e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f107 020e 	add.w	r2, r7, #14
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fe06 	bl	800513e <SDMMC_CmdSetRelAdd>
 8004532:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <SD_InitCard+0xae>
    {
      return errorstate;
 800453a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453c:	e071      	b.n	8004622 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	2b03      	cmp	r3, #3
 8004544:	d036      	beq.n	80045b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 fdd0 	bl	8005100 <SDMMC_CmdSendCSD>
 8004560:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456a:	e05a      	b.n	8004622 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fbb3 	bl	8004cde <SDIO_GetResponse>
 8004578:	4602      	mov	r2, r0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2104      	movs	r1, #4
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fbaa 	bl	8004cde <SDIO_GetResponse>
 800458a:	4602      	mov	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2108      	movs	r1, #8
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fba1 	bl	8004cde <SDIO_GetResponse>
 800459c:	4602      	mov	r2, r0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	210c      	movs	r1, #12
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fb98 	bl	8004cde <SDIO_GetResponse>
 80045ae:	4602      	mov	r2, r0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2104      	movs	r1, #4
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fb8f 	bl	8004cde <SDIO_GetResponse>
 80045c0:	4603      	mov	r3, r0
 80045c2:	0d1a      	lsrs	r2, r3, #20
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80045c8:	f107 0310 	add.w	r3, r7, #16
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fbe4 	bl	8003d9c <HAL_SD_GetCardCSD>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045de:	e020      	b.n	8004622 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	f04f 0400 	mov.w	r4, #0
 80045ee:	461a      	mov	r2, r3
 80045f0:	4623      	mov	r3, r4
 80045f2:	4608      	mov	r0, r1
 80045f4:	f000 fc7e 	bl	8004ef4 <SDMMC_CmdSelDesel>
 80045f8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80045fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <SD_InitCard+0x174>
  {
    return errorstate;
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	e00e      	b.n	8004622 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681d      	ldr	r5, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	466c      	mov	r4, sp
 800460c:	f103 0210 	add.w	r2, r3, #16
 8004610:	ca07      	ldmia	r2, {r0, r1, r2}
 8004612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004616:	3304      	adds	r3, #4
 8004618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800461a:	4628      	mov	r0, r5
 800461c:	f000 fac2 	bl	8004ba4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3740      	adds	r7, #64	; 0x40
 8004626:	46bd      	mov	sp, r7
 8004628:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800462c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fc78 	bl	8004f3a <SDMMC_CmdGoIdleState>
 800464a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	e072      	b.n	800473c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fc8b 	bl	8004f76 <SDMMC_CmdOperCond>
 8004660:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fc61 	bl	8004f3a <SDMMC_CmdGoIdleState>
 8004678:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	e05b      	b.n	800473c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468e:	2b01      	cmp	r3, #1
 8004690:	d137      	bne.n	8004702 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fc8b 	bl	8004fb4 <SDMMC_CmdAppCommand>
 800469e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02d      	beq.n	8004702 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046aa:	e047      	b.n	800473c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fc7e 	bl	8004fb4 <SDMMC_CmdAppCommand>
 80046b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	e03b      	b.n	800473c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	491e      	ldr	r1, [pc, #120]	; (8004744 <SD_PowerON+0x118>)
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fc94 	bl	8004ff8 <SDMMC_CmdAppOperCommand>
 80046d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046dc:	e02e      	b.n	800473c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fafa 	bl	8004cde <SDIO_GetResponse>
 80046ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	0fdb      	lsrs	r3, r3, #31
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <SD_PowerON+0xcc>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <SD_PowerON+0xce>
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]

    count++;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3301      	adds	r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004708:	4293      	cmp	r3, r2
 800470a:	d802      	bhi.n	8004712 <SD_PowerON+0xe6>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0cc      	beq.n	80046ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004718:	4293      	cmp	r3, r2
 800471a:	d902      	bls.n	8004722 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800471c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004720:	e00c      	b.n	800473c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
 8004732:	e002      	b.n	800473a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	c1100000 	.word	0xc1100000

08004748 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004758:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800475c:	e018      	b.n	8004790 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 fd08 	bl	8005180 <SDMMC_CmdSendStatus>
 8004770:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	e009      	b.n	8004790 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f000 faab 	bl	8004cde <SDIO_GetResponse>
 8004788:	4602      	mov	r2, r0
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fa95 	bl	8004cde <SDIO_GetResponse>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047be:	d102      	bne.n	80047c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80047c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047c4:	e02f      	b.n	8004826 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f879 	bl	80048c4 <SD_FindSCR>
 80047d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	e023      	b.n	8004826 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01c      	beq.n	8004822 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f000 fbdd 	bl	8004fb4 <SDMMC_CmdAppCommand>
 80047fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	e00f      	b.n	8004826 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2102      	movs	r1, #2
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fc16 	bl	800503e <SDMMC_CmdBusWidth>
 8004812:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	e003      	b.n	8004826 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800481e:	2300      	movs	r3, #0
 8004820:	e001      	b.n	8004826 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004822:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fa4a 	bl	8004cde <SDIO_GetResponse>
 800484a:	4603      	mov	r3, r0
 800484c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004854:	d102      	bne.n	800485c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800485a:	e02f      	b.n	80048bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f82e 	bl	80048c4 <SD_FindSCR>
 8004868:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	e023      	b.n	80048bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01c      	beq.n	80048b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f000 fb92 	bl	8004fb4 <SDMMC_CmdAppCommand>
 8004890:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	e00f      	b.n	80048bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fbcb 	bl	800503e <SDMMC_CmdBusWidth>
 80048a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	e003      	b.n	80048bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e001      	b.n	80048bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b08f      	sub	sp, #60	; 0x3c
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80048ce:	f7fd f8ff 	bl	8001ad0 <HAL_GetTick>
 80048d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2108      	movs	r1, #8
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fa36 	bl	8004d5c <SDMMC_CmdBlockLength>
 80048f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <SD_FindSCR+0x38>
  {
    return errorstate;
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	e0a9      	b.n	8004a50 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f000 fb53 	bl	8004fb4 <SDMMC_CmdAppCommand>
 800490e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	e09a      	b.n	8004a50 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004920:	2308      	movs	r3, #8
 8004922:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004924:	2330      	movs	r3, #48	; 0x30
 8004926:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004928:	2302      	movs	r3, #2
 800492a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800492c:	2300      	movs	r3, #0
 800492e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004930:	2301      	movs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f107 0210 	add.w	r2, r7, #16
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f9e0 	bl	8004d04 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fb9a 	bl	8005082 <SDMMC_CmdSendSCR>
 800494e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d022      	beq.n	800499c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	e07a      	b.n	8004a50 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	f107 0208 	add.w	r2, r7, #8
 8004974:	18d4      	adds	r4, r2, r3
 8004976:	4608      	mov	r0, r1
 8004978:	f000 f93f 	bl	8004bfa <SDIO_ReadFIFO>
 800497c:	4603      	mov	r3, r0
 800497e:	6023      	str	r3, [r4, #0]
      index++;
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	3301      	adds	r3, #1
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004986:	f7fd f8a3 	bl	8001ad0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d102      	bne.n	800499c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004996:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800499a:	e059      	b.n	8004a50 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a2:	f240 432a 	movw	r3, #1066	; 0x42a
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0d6      	beq.n	800495a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2208      	movs	r2, #8
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80049c2:	2308      	movs	r3, #8
 80049c4:	e044      	b.n	8004a50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2202      	movs	r2, #2
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80049dc:	2302      	movs	r3, #2
 80049de:	e037      	b.n	8004a50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2220      	movs	r2, #32
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80049f6:	2320      	movs	r3, #32
 80049f8:	e02a      	b.n	8004a50 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	061a      	lsls	r2, r3, #24
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	0e1b      	lsrs	r3, r3, #24
 8004a20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	601a      	str	r2, [r3, #0]
    scr++;
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	3304      	adds	r3, #4
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	061a      	lsls	r2, r3, #24
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	0e1b      	lsrs	r3, r3, #24
 8004a48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	373c      	adds	r7, #60	; 0x3c
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd90      	pop	{r4, r7, pc}

08004a58 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d03f      	beq.n	8004af2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e033      	b.n	8004ae0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f8bc 	bl	8004bfa <SDIO_ReadFIFO>
 8004a82:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	0e1b      	lsrs	r3, r3, #24
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3301      	adds	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b07      	cmp	r3, #7
 8004ae4:	d9c8      	bls.n	8004a78 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004af2:	bf00      	nop
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d043      	beq.n	8004b9c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e037      	b.n	8004b8a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	021a      	lsls	r2, r3, #8
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	041a      	lsls	r2, r3, #16
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	061a      	lsls	r2, r3, #24
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f107 0208 	add.w	r2, r7, #8
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f848 	bl	8004c14 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3301      	adds	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b07      	cmp	r3, #7
 8004b8e:	d9c4      	bls.n	8004b1a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	f107 001c 	add.w	r0, r7, #28
 8004bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004bba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004bbe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004bc2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004bc6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004bca:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004bce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004bde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	b004      	add	sp, #16
 8004bf8:	4770      	bx	lr

08004bfa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2203      	movs	r2, #3
 8004c42:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004c44:	2002      	movs	r0, #2
 8004c46:	f7fc ff4f 	bl	8001ae8 <HAL_Delay>
  
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0303 	and.w	r3, r3, #3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004c94:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004c9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004caa:	f023 030f 	bic.w	r3, r3, #15
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	b2db      	uxtb	r3, r3
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3314      	adds	r3, #20
 8004cec:	461a      	mov	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
}  
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d2a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004d30:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004d36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0

}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d6e:	2340      	movs	r3, #64	; 0x40
 8004d70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff74 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8c:	2110      	movs	r1, #16
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa40 	bl	8005214 <SDMMC_GetCmdResp1>
 8004d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d96:	69fb      	ldr	r3, [r7, #28]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004dae:	2311      	movs	r3, #17
 8004db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004db2:	2340      	movs	r3, #64	; 0x40
 8004db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff52 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd0:	2111      	movs	r1, #17
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa1e 	bl	8005214 <SDMMC_GetCmdResp1>
 8004dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dda:	69fb      	ldr	r3, [r7, #28]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004df2:	2312      	movs	r3, #18
 8004df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e04:	f107 0308 	add.w	r3, r7, #8
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ff30 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	2112      	movs	r1, #18
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f9fc 	bl	8005214 <SDMMC_GetCmdResp1>
 8004e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004e36:	2318      	movs	r3, #24
 8004e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e3a:	2340      	movs	r3, #64	; 0x40
 8004e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e48:	f107 0308 	add.w	r3, r7, #8
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff ff0e 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	2118      	movs	r1, #24
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f9da 	bl	8005214 <SDMMC_GetCmdResp1>
 8004e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e62:	69fb      	ldr	r3, [r7, #28]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004e7a:	2319      	movs	r3, #25
 8004e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e8c:	f107 0308 	add.w	r3, r7, #8
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff feec 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9c:	2119      	movs	r1, #25
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9b8 	bl	8005214 <SDMMC_GetCmdResp1>
 8004ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ec0:	2340      	movs	r3, #64	; 0x40
 8004ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ecc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ece:	f107 0308 	add.w	r3, r7, #8
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff fecb 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004eda:	4a05      	ldr	r2, [pc, #20]	; (8004ef0 <SDMMC_CmdStopTransfer+0x40>)
 8004edc:	210c      	movs	r1, #12
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f998 	bl	8005214 <SDMMC_GetCmdResp1>
 8004ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	05f5e100 	.word	0x05f5e100

08004ef4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004f04:	2307      	movs	r3, #7
 8004f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f08:	2340      	movs	r3, #64	; 0x40
 8004f0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f14:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f16:	f107 0310 	add.w	r3, r7, #16
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff fea7 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f26:	2107      	movs	r1, #7
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f973 	bl	8005214 <SDMMC_GetCmdResp1>
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f58:	f107 0308 	add.w	r3, r7, #8
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fe86 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f92d 	bl	80051c4 <SDMMC_GetCmdError>
 8004f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b088      	sub	sp, #32
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004f7e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004f84:	2308      	movs	r3, #8
 8004f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f88:	2340      	movs	r3, #64	; 0x40
 8004f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f96:	f107 0308 	add.w	r3, r7, #8
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fe67 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fb16 	bl	80055d4 <SDMMC_GetCmdResp7>
 8004fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004faa:	69fb      	ldr	r3, [r7, #28]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004fc2:	2337      	movs	r3, #55	; 0x37
 8004fc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fc6:	2340      	movs	r3, #64	; 0x40
 8004fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fe48 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	2137      	movs	r1, #55	; 0x37
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f914 	bl	8005214 <SDMMC_GetCmdResp1>
 8004fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fee:	69fb      	ldr	r3, [r7, #28]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800500e:	2329      	movs	r3, #41	; 0x29
 8005010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005012:	2340      	movs	r3, #64	; 0x40
 8005014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fe22 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fa23 	bl	8005478 <SDMMC_GetCmdResp3>
 8005032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005034:	69fb      	ldr	r3, [r7, #28]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b088      	sub	sp, #32
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800504c:	2306      	movs	r3, #6
 800504e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005050:	2340      	movs	r3, #64	; 0x40
 8005052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800505c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800505e:	f107 0308 	add.w	r3, r7, #8
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fe03 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800506a:	f241 3288 	movw	r2, #5000	; 0x1388
 800506e:	2106      	movs	r1, #6
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8cf 	bl	8005214 <SDMMC_GetCmdResp1>
 8005076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005078:	69fb      	ldr	r3, [r7, #28]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b088      	sub	sp, #32
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800508e:	2333      	movs	r3, #51	; 0x33
 8005090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fde2 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	2133      	movs	r1, #51	; 0x33
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f8ae 	bl	8005214 <SDMMC_GetCmdResp1>
 80050b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ba:	69fb      	ldr	r3, [r7, #28]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80050d0:	2302      	movs	r3, #2
 80050d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80050d4:	23c0      	movs	r3, #192	; 0xc0
 80050d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050e2:	f107 0308 	add.w	r3, r7, #8
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fdc1 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f97c 	bl	80053ec <SDMMC_GetCmdResp2>
 80050f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800510e:	2309      	movs	r3, #9
 8005110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005112:	23c0      	movs	r3, #192	; 0xc0
 8005114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800511a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800511e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005120:	f107 0308 	add.w	r3, r7, #8
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fda2 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f95d 	bl	80053ec <SDMMC_GetCmdResp2>
 8005132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005134:	69fb      	ldr	r3, [r7, #28]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800514c:	2303      	movs	r3, #3
 800514e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800515c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff fd83 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	2103      	movs	r1, #3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9bc 	bl	80054ec <SDMMC_GetCmdResp6>
 8005174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005176:	69fb      	ldr	r3, [r7, #28]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800518e:	230d      	movs	r3, #13
 8005190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800519a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800519e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051a0:	f107 0308 	add.w	r3, r7, #8
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fd62 	bl	8004c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80051ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b0:	210d      	movs	r1, #13
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f82e 	bl	8005214 <SDMMC_GetCmdResp1>
 80051b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ba:	69fb      	ldr	r3, [r7, #28]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80051c4:	b490      	push	{r4, r7}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <SDMMC_GetCmdError+0x48>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <SDMMC_GetCmdError+0x4c>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	0a5b      	lsrs	r3, r3, #9
 80051d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80051e0:	4623      	mov	r3, r4
 80051e2:	1e5c      	subs	r4, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051ec:	e009      	b.n	8005202 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f2      	beq.n	80051e0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	22c5      	movs	r2, #197	; 0xc5
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bc90      	pop	{r4, r7}
 800520a:	4770      	bx	lr
 800520c:	20000000 	.word	0x20000000
 8005210:	10624dd3 	.word	0x10624dd3

08005214 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	460b      	mov	r3, r1
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005222:	4b6f      	ldr	r3, [pc, #444]	; (80053e0 <SDMMC_GetCmdResp1+0x1cc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a6f      	ldr	r2, [pc, #444]	; (80053e4 <SDMMC_GetCmdResp1+0x1d0>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	0a5b      	lsrs	r3, r3, #9
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005234:	4623      	mov	r3, r4
 8005236:	1e5c      	subs	r4, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800523c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005240:	e0c9      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <SDMMC_GetCmdResp1+0x20>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1eb      	bne.n	8005234 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2204      	movs	r2, #4
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800526e:	2304      	movs	r3, #4
 8005270:	e0b1      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005284:	2301      	movs	r3, #1
 8005286:	e0a6      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	22c5      	movs	r2, #197	; 0xc5
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7ff fd18 	bl	8004cc4 <SDIO_GetCommandResponse>
 8005294:	4603      	mov	r3, r0
 8005296:	461a      	mov	r2, r3
 8005298:	7afb      	ldrb	r3, [r7, #11]
 800529a:	4293      	cmp	r3, r2
 800529c:	d001      	beq.n	80052a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800529e:	2301      	movs	r3, #1
 80052a0:	e099      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80052a2:	2100      	movs	r1, #0
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fd1a 	bl	8004cde <SDIO_GetResponse>
 80052aa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4b4e      	ldr	r3, [pc, #312]	; (80053e8 <SDMMC_GetCmdResp1+0x1d4>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e08d      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da02      	bge.n	80052c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80052c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c4:	e087      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	e080      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	e079      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80052ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f0:	e071      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80052fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005300:	e069      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800530c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005310:	e061      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800531c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005320:	e059      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800532c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005330:	e051      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800533c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005340:	e049      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800534c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005350:	e041      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800535c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005360:	e039      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800536c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005370:	e031      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800537c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005380:	e029      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800538c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005390:	e021      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800539c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053a0:	e019      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80053ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053b0:	e011      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80053bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053c0:	e009      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80053cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80053d0:	e001      	b.n	80053d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000000 	.word	0x20000000
 80053e4:	10624dd3 	.word	0x10624dd3
 80053e8:	fdffe008 	.word	0xfdffe008

080053ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80053ec:	b490      	push	{r4, r7}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053f4:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <SDMMC_GetCmdResp2+0x84>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1e      	ldr	r2, [pc, #120]	; (8005474 <SDMMC_GetCmdResp2+0x88>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	0a5b      	lsrs	r3, r3, #9
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005408:	4623      	mov	r3, r4
 800540a:	1e5c      	subs	r4, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005414:	e026      	b.n	8005464 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <SDMMC_GetCmdResp2+0x1c>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1eb      	bne.n	8005408 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2204      	movs	r2, #4
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005442:	2304      	movs	r3, #4
 8005444:	e00e      	b.n	8005464 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005458:	2301      	movs	r3, #1
 800545a:	e003      	b.n	8005464 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	22c5      	movs	r2, #197	; 0xc5
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bc90      	pop	{r4, r7}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000000 	.word	0x20000000
 8005474:	10624dd3 	.word	0x10624dd3

08005478 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005478:	b490      	push	{r4, r7}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005480:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <SDMMC_GetCmdResp3+0x6c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <SDMMC_GetCmdResp3+0x70>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	0a5b      	lsrs	r3, r3, #9
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005494:	4623      	mov	r3, r4
 8005496:	1e5c      	subs	r4, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800549c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054a0:	e01b      	b.n	80054da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <SDMMC_GetCmdResp3+0x1c>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1eb      	bne.n	8005494 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2204      	movs	r2, #4
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054ce:	2304      	movs	r3, #4
 80054d0:	e003      	b.n	80054da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	22c5      	movs	r2, #197	; 0xc5
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc90      	pop	{r4, r7}
 80054e2:	4770      	bx	lr
 80054e4:	20000000 	.word	0x20000000
 80054e8:	10624dd3 	.word	0x10624dd3

080054ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	460b      	mov	r3, r1
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054fa:	4b34      	ldr	r3, [pc, #208]	; (80055cc <SDMMC_GetCmdResp6+0xe0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a34      	ldr	r2, [pc, #208]	; (80055d0 <SDMMC_GetCmdResp6+0xe4>)
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	0a5b      	lsrs	r3, r3, #9
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800550e:	4623      	mov	r3, r4
 8005510:	1e5c      	subs	r4, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005516:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800551a:	e052      	b.n	80055c2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <SDMMC_GetCmdResp6+0x22>
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1eb      	bne.n	800550e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d004      	beq.n	800554c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2204      	movs	r2, #4
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005548:	2304      	movs	r3, #4
 800554a:	e03a      	b.n	80055c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800555e:	2301      	movs	r3, #1
 8005560:	e02f      	b.n	80055c2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7ff fbae 	bl	8004cc4 <SDIO_GetCommandResponse>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	7afb      	ldrb	r3, [r7, #11]
 800556e:	4293      	cmp	r3, r2
 8005570:	d001      	beq.n	8005576 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005572:	2301      	movs	r3, #1
 8005574:	e025      	b.n	80055c2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	22c5      	movs	r2, #197	; 0xc5
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800557c:	2100      	movs	r1, #0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff fbad 	bl	8004cde <SDIO_GetResponse>
 8005584:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	b29a      	uxth	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800559a:	2300      	movs	r3, #0
 800559c:	e011      	b.n	80055c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80055a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055ac:	e009      	b.n	80055c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80055b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055bc:	e001      	b.n	80055c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd90      	pop	{r4, r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000000 	.word	0x20000000
 80055d0:	10624dd3 	.word	0x10624dd3

080055d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80055d4:	b490      	push	{r4, r7}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055dc:	4b21      	ldr	r3, [pc, #132]	; (8005664 <SDMMC_GetCmdResp7+0x90>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a21      	ldr	r2, [pc, #132]	; (8005668 <SDMMC_GetCmdResp7+0x94>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	0a5b      	lsrs	r3, r3, #9
 80055e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80055f0:	4623      	mov	r3, r4
 80055f2:	1e5c      	subs	r4, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055fc:	e02c      	b.n	8005658 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <SDMMC_GetCmdResp7+0x1c>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1eb      	bne.n	80055f0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2204      	movs	r2, #4
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800562a:	2304      	movs	r3, #4
 800562c:	e014      	b.n	8005658 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005640:	2301      	movs	r3, #1
 8005642:	e009      	b.n	8005658 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2240      	movs	r2, #64	; 0x40
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005656:	2300      	movs	r3, #0
  
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bc90      	pop	{r4, r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000000 	.word	0x20000000
 8005668:	10624dd3 	.word	0x10624dd3

0800566c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005670:	4904      	ldr	r1, [pc, #16]	; (8005684 <MX_FATFS_Init+0x18>)
 8005672:	4805      	ldr	r0, [pc, #20]	; (8005688 <MX_FATFS_Init+0x1c>)
 8005674:	f002 fcb6 	bl	8007fe4 <FATFS_LinkDriver>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <MX_FATFS_Init+0x20>)
 800567e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005680:	bf00      	nop
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200003d0 	.word	0x200003d0
 8005688:	0800bbf4 	.word	0x0800bbf4
 800568c:	200003cc 	.word	0x200003cc

08005690 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005694:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005696:	4618      	mov	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	71fb      	strb	r3, [r7, #7]
//  if (BSP_SD_IsDetected() != SD_PRESENT)
//  {
//    return MSD_ERROR;
//  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80056aa:	480b      	ldr	r0, [pc, #44]	; (80056d8 <BSP_SD_Init+0x38>)
 80056ac:	f7fd ff7c 	bl	80035a8 <HAL_SD_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <BSP_SD_Init+0x2e>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80056ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056be:	4806      	ldr	r0, [pc, #24]	; (80056d8 <BSP_SD_Init+0x38>)
 80056c0:	f7fe fd3c 	bl	800413c <HAL_SD_ConfigWideBusOperation>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <BSP_SD_Init+0x2e>
    {
      sd_state = MSD_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80056ce:	79fb      	ldrb	r3, [r7, #7]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000344 	.word	0x20000344

080056dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	68f9      	ldr	r1, [r7, #12]
 80056f2:	4806      	ldr	r0, [pc, #24]	; (800570c <BSP_SD_ReadBlocks_DMA+0x30>)
 80056f4:	f7fd ffe8 	bl	80036c8 <HAL_SD_ReadBlocks_DMA>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000344 	.word	0x20000344

08005710 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	4806      	ldr	r0, [pc, #24]	; (8005740 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005728:	f7fe f8b8 	bl	800389c <HAL_SD_WriteBlocks_DMA>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000344 	.word	0x20000344

08005744 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005748:	4805      	ldr	r0, [pc, #20]	; (8005760 <BSP_SD_GetCardState+0x1c>)
 800574a:	f7fe fd73 	bl	8004234 <HAL_SD_GetCardState>
 800574e:	4603      	mov	r3, r0
 8005750:	2b04      	cmp	r3, #4
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
}
 800575a:	4618      	mov	r0, r3
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000344 	.word	0x20000344

08005764 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4803      	ldr	r0, [pc, #12]	; (800577c <BSP_SD_GetCardInfo+0x18>)
 8005770:	f7fe fcb8 	bl	80040e4 <HAL_SD_GetCardInfo>
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000344 	.word	0x20000344

08005780 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005788:	f000 f818 	bl	80057bc <BSP_SD_AbortCallback>
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800579c:	f000 f97e 	bl	8005a9c <BSP_SD_WriteCpltCallback>
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80057b0:	f000 f980 	bl	8005ab4 <BSP_SD_ReadCpltCallback>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0

}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80057d2:	f7fc f97d 	bl	8001ad0 <HAL_GetTick>
 80057d6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80057d8:	e006      	b.n	80057e8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80057da:	f7ff ffb3 	bl	8005744 <BSP_SD_GetCardState>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e009      	b.n	80057fc <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80057e8:	f7fc f972 	bl	8001ad0 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d8f0      	bhi.n	80057da <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80057f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <SD_CheckStatus+0x38>)
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005814:	f7ff ff96 	bl	8005744 <BSP_SD_GetCardState>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d107      	bne.n	800582e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800581e:	4b07      	ldr	r3, [pc, #28]	; (800583c <SD_CheckStatus+0x38>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <SD_CheckStatus+0x38>)
 800582c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800582e:	4b03      	ldr	r3, [pc, #12]	; (800583c <SD_CheckStatus+0x38>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b2db      	uxtb	r3, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000009 	.word	0x20000009

08005840 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800584a:	f7ff ff29 	bl	80056a0 <BSP_SD_Init>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ffd4 	bl	8005804 <SD_CheckStatus>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <SD_initialize+0x34>)
 8005862:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <SD_initialize+0x34>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000009 	.word	0x20000009

08005878 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ffbd 	bl	8005804 <SD_CheckStatus>
 800588a:	4603      	mov	r3, r0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4603      	mov	r3, r0
 80058a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80058a8:	f247 5030 	movw	r0, #30000	; 0x7530
 80058ac:	f7ff ff8d 	bl	80057ca <SD_CheckStatusWithTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	da01      	bge.n	80058ba <SD_read+0x26>
  {
    return res;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	e03b      	b.n	8005932 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	68b8      	ldr	r0, [r7, #8]
 80058c0:	f7ff ff0c 	bl	80056dc <BSP_SD_ReadBlocks_DMA>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d132      	bne.n	8005930 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <SD_read+0xa8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80058d0:	f7fc f8fe 	bl	8001ad0 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80058d6:	bf00      	nop
 80058d8:	4b18      	ldr	r3, [pc, #96]	; (800593c <SD_read+0xa8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d108      	bne.n	80058f2 <SD_read+0x5e>
 80058e0:	f7fc f8f6 	bl	8001ad0 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d9f2      	bls.n	80058d8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <SD_read+0xa8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	75fb      	strb	r3, [r7, #23]
 80058fe:	e017      	b.n	8005930 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <SD_read+0xa8>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005906:	f7fc f8e3 	bl	8001ad0 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800590c:	e007      	b.n	800591e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800590e:	f7ff ff19 	bl	8005744 <BSP_SD_GetCardState>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <SD_read+0x8a>
          {
            res = RES_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800591c:	e008      	b.n	8005930 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800591e:	f7fc f8d7 	bl	8001ad0 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f247 522f 	movw	r2, #29999	; 0x752f
 800592c:	4293      	cmp	r3, r2
 800592e:	d9ee      	bls.n	800590e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000200 	.word	0x20000200

08005940 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <SD_write+0xa8>)
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800595a:	f247 5030 	movw	r0, #30000	; 0x7530
 800595e:	f7ff ff34 	bl	80057ca <SD_CheckStatusWithTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	da01      	bge.n	800596c <SD_write+0x2c>
  {
    return res;
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	e038      	b.n	80059de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f7ff fecd 	bl	8005710 <BSP_SD_WriteBlocks_DMA>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d12f      	bne.n	80059dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800597c:	f7fc f8a8 	bl	8001ad0 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005982:	bf00      	nop
 8005984:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <SD_write+0xa8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d108      	bne.n	800599e <SD_write+0x5e>
 800598c:	f7fc f8a0 	bl	8001ad0 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f247 522f 	movw	r2, #29999	; 0x752f
 800599a:	4293      	cmp	r3, r2
 800599c:	d9f2      	bls.n	8005984 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <SD_write+0xa8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
 80059aa:	e017      	b.n	80059dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <SD_write+0xa8>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80059b2:	f7fc f88d 	bl	8001ad0 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80059b8:	e007      	b.n	80059ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80059ba:	f7ff fec3 	bl	8005744 <BSP_SD_GetCardState>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <SD_write+0x8a>
          {
            res = RES_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	75fb      	strb	r3, [r7, #23]
            break;
 80059c8:	e008      	b.n	80059dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80059ca:	f7fc f881 	bl	8001ad0 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80059d8:	4293      	cmp	r3, r2
 80059da:	d9ee      	bls.n	80059ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200001fc 	.word	0x200001fc

080059ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08c      	sub	sp, #48	; 0x30
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	603a      	str	r2, [r7, #0]
 80059f6:	71fb      	strb	r3, [r7, #7]
 80059f8:	460b      	mov	r3, r1
 80059fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005a02:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <SD_ioctl+0xac>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <SD_ioctl+0x28>
 8005a10:	2303      	movs	r3, #3
 8005a12:	e03c      	b.n	8005a8e <SD_ioctl+0xa2>

  switch (cmd)
 8005a14:	79bb      	ldrb	r3, [r7, #6]
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d834      	bhi.n	8005a84 <SD_ioctl+0x98>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <SD_ioctl+0x34>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a39 	.word	0x08005a39
 8005a28:	08005a51 	.word	0x08005a51
 8005a2c:	08005a6b 	.word	0x08005a6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a36:	e028      	b.n	8005a8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fe91 	bl	8005764 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a4e:	e01c      	b.n	8005a8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a50:	f107 030c 	add.w	r3, r7, #12
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fe85 	bl	8005764 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a68:	e00f      	b.n	8005a8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a6a:	f107 030c 	add.w	r3, r7, #12
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fe78 	bl	8005764 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	0a5a      	lsrs	r2, r3, #9
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a82:	e002      	b.n	8005a8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3730      	adds	r7, #48	; 0x30
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000009 	.word	0x20000009

08005a9c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <BSP_SD_WriteCpltCallback+0x14>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	200001fc 	.word	0x200001fc

08005ab4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <BSP_SD_ReadCpltCallback+0x14>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000200 	.word	0x20000200

08005acc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	4a08      	ldr	r2, [pc, #32]	; (8005afc <disk_status+0x30>)
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	79fa      	ldrb	r2, [r7, #7]
 8005ae4:	4905      	ldr	r1, [pc, #20]	; (8005afc <disk_status+0x30>)
 8005ae6:	440a      	add	r2, r1
 8005ae8:	7a12      	ldrb	r2, [r2, #8]
 8005aea:	4610      	mov	r0, r2
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	2000022c 	.word	0x2000022c

08005b00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <disk_initialize+0x48>)
 8005b12:	5cd3      	ldrb	r3, [r2, r3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d111      	bne.n	8005b3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	4a0b      	ldr	r2, [pc, #44]	; (8005b48 <disk_initialize+0x48>)
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <disk_initialize+0x48>)
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	79fa      	ldrb	r2, [r7, #7]
 8005b2e:	4906      	ldr	r1, [pc, #24]	; (8005b48 <disk_initialize+0x48>)
 8005b30:	440a      	add	r2, r1
 8005b32:	7a12      	ldrb	r2, [r2, #8]
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	2000022c 	.word	0x2000022c

08005b4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <disk_read+0x3c>)
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	689c      	ldr	r4, [r3, #8]
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	4a07      	ldr	r2, [pc, #28]	; (8005b88 <disk_read+0x3c>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	7a18      	ldrb	r0, [r3, #8]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	47a0      	blx	r4
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd90      	pop	{r4, r7, pc}
 8005b86:	bf00      	nop
 8005b88:	2000022c 	.word	0x2000022c

08005b8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <disk_write+0x3c>)
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68dc      	ldr	r4, [r3, #12]
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	4a07      	ldr	r2, [pc, #28]	; (8005bc8 <disk_write+0x3c>)
 8005bac:	4413      	add	r3, r2
 8005bae:	7a18      	ldrb	r0, [r3, #8]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	47a0      	blx	r4
 8005bb8:	4603      	mov	r3, r0
 8005bba:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd90      	pop	{r4, r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2000022c 	.word	0x2000022c

08005bcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	603a      	str	r2, [r7, #0]
 8005bd6:	71fb      	strb	r3, [r7, #7]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <disk_ioctl+0x38>)
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	4906      	ldr	r1, [pc, #24]	; (8005c04 <disk_ioctl+0x38>)
 8005bec:	440a      	add	r2, r1
 8005bee:	7a10      	ldrb	r0, [r2, #8]
 8005bf0:	79b9      	ldrb	r1, [r7, #6]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	4798      	blx	r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	2000022c 	.word	0x2000022c

08005c08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3301      	adds	r3, #1
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	b21a      	sxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	b21b      	sxth	r3, r3
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b21b      	sxth	r3, r3
 8005c28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3303      	adds	r3, #3
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	3202      	adds	r2, #2
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	3201      	adds	r2, #1
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	7812      	ldrb	r2, [r2, #0]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	887a      	ldrh	r2, [r7, #2]
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	701a      	strb	r2, [r3, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00d      	beq.n	8005d42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	1c53      	adds	r3, r2, #1
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	6179      	str	r1, [r7, #20]
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	607b      	str	r3, [r7, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f1      	bne.n	8005d26 <mem_cpy+0x1a>
	}
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	617a      	str	r2, [r7, #20]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f3      	bne.n	8005d5e <mem_set+0x10>
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005d82:	b480      	push	{r7}
 8005d84:	b089      	sub	sp, #36	; 0x24
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	61fa      	str	r2, [r7, #28]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	4619      	mov	r1, r3
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	61ba      	str	r2, [r7, #24]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	1acb      	subs	r3, r1, r3
 8005dae:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <mem_cmp+0x40>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0eb      	beq.n	8005d9a <mem_cmp+0x18>

	return r;
 8005dc2:	697b      	ldr	r3, [r7, #20]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3724      	adds	r7, #36	; 0x24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005dda:	e002      	b.n	8005de2 <chk_chr+0x12>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3301      	adds	r3, #1
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <chk_chr+0x26>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d1f2      	bne.n	8005ddc <chk_chr+0xc>
	return *str;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	781b      	ldrb	r3, [r3, #0]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e029      	b.n	8005e70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e1c:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <chk_lock+0xb4>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	4413      	add	r3, r2
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01d      	beq.n	8005e66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e2a:	4a24      	ldr	r2, [pc, #144]	; (8005ebc <chk_lock+0xb4>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	4413      	add	r3, r2
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d116      	bne.n	8005e6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e3c:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <chk_lock+0xb4>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	4413      	add	r3, r2
 8005e44:	3304      	adds	r3, #4
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d10c      	bne.n	8005e6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e50:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <chk_lock+0xb4>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	4413      	add	r3, r2
 8005e58:	3308      	adds	r3, #8
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d102      	bne.n	8005e6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e64:	e007      	b.n	8005e76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005e66:	2301      	movs	r3, #1
 8005e68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d9d2      	bls.n	8005e1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d109      	bne.n	8005e90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <chk_lock+0x80>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d101      	bne.n	8005e8c <chk_lock+0x84>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e010      	b.n	8005eae <chk_lock+0xa6>
 8005e8c:	2312      	movs	r3, #18
 8005e8e:	e00e      	b.n	8005eae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d108      	bne.n	8005ea8 <chk_lock+0xa0>
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <chk_lock+0xb4>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	4413      	add	r3, r2
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea6:	d101      	bne.n	8005eac <chk_lock+0xa4>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	e000      	b.n	8005eae <chk_lock+0xa6>
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	2000020c 	.word	0x2000020c

08005ec0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	e002      	b.n	8005ed2 <enq_lock+0x12>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d806      	bhi.n	8005ee6 <enq_lock+0x26>
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <enq_lock+0x40>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	4413      	add	r3, r2
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f2      	bne.n	8005ecc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	bf14      	ite	ne
 8005eec:	2301      	movne	r3, #1
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	2000020c 	.word	0x2000020c

08005f04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e01f      	b.n	8005f54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f14:	4a41      	ldr	r2, [pc, #260]	; (800601c <inc_lock+0x118>)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	4413      	add	r3, r2
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d113      	bne.n	8005f4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f26:	4a3d      	ldr	r2, [pc, #244]	; (800601c <inc_lock+0x118>)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3304      	adds	r3, #4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d109      	bne.n	8005f4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f3a:	4a38      	ldr	r2, [pc, #224]	; (800601c <inc_lock+0x118>)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	4413      	add	r3, r2
 8005f42:	3308      	adds	r3, #8
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d006      	beq.n	8005f5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d9dc      	bls.n	8005f14 <inc_lock+0x10>
 8005f5a:	e000      	b.n	8005f5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005f5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d132      	bne.n	8005fca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e002      	b.n	8005f70 <inc_lock+0x6c>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d806      	bhi.n	8005f84 <inc_lock+0x80>
 8005f76:	4a29      	ldr	r2, [pc, #164]	; (800601c <inc_lock+0x118>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f2      	bne.n	8005f6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d101      	bne.n	8005f8e <inc_lock+0x8a>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e040      	b.n	8006010 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4922      	ldr	r1, [pc, #136]	; (800601c <inc_lock+0x118>)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	440b      	add	r3, r1
 8005f9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	491e      	ldr	r1, [pc, #120]	; (800601c <inc_lock+0x118>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3304      	adds	r3, #4
 8005faa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	491a      	ldr	r1, [pc, #104]	; (800601c <inc_lock+0x118>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	440b      	add	r3, r1
 8005fb8:	3308      	adds	r3, #8
 8005fba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005fbc:	4a17      	ldr	r2, [pc, #92]	; (800601c <inc_lock+0x118>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	4413      	add	r3, r2
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d009      	beq.n	8005fe4 <inc_lock+0xe0>
 8005fd0:	4a12      	ldr	r2, [pc, #72]	; (800601c <inc_lock+0x118>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	4413      	add	r3, r2
 8005fd8:	330c      	adds	r3, #12
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <inc_lock+0xe0>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e015      	b.n	8006010 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d108      	bne.n	8005ffc <inc_lock+0xf8>
 8005fea:	4a0c      	ldr	r2, [pc, #48]	; (800601c <inc_lock+0x118>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	4413      	add	r3, r2
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	e001      	b.n	8006000 <inc_lock+0xfc>
 8005ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006000:	4906      	ldr	r1, [pc, #24]	; (800601c <inc_lock+0x118>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	440b      	add	r3, r1
 8006008:	330c      	adds	r3, #12
 800600a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	2000020c 	.word	0x2000020c

08006020 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3b01      	subs	r3, #1
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d825      	bhi.n	8006080 <dec_lock+0x60>
		n = Files[i].ctr;
 8006034:	4a17      	ldr	r2, [pc, #92]	; (8006094 <dec_lock+0x74>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	4413      	add	r3, r2
 800603c:	330c      	adds	r3, #12
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006042:	89fb      	ldrh	r3, [r7, #14]
 8006044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006048:	d101      	bne.n	800604e <dec_lock+0x2e>
 800604a:	2300      	movs	r3, #0
 800604c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800604e:	89fb      	ldrh	r3, [r7, #14]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <dec_lock+0x3a>
 8006054:	89fb      	ldrh	r3, [r7, #14]
 8006056:	3b01      	subs	r3, #1
 8006058:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800605a:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <dec_lock+0x74>)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4413      	add	r3, r2
 8006062:	330c      	adds	r3, #12
 8006064:	89fa      	ldrh	r2, [r7, #14]
 8006066:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006068:	89fb      	ldrh	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <dec_lock+0x5a>
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <dec_lock+0x74>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	4413      	add	r3, r2
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	737b      	strb	r3, [r7, #13]
 800607e:	e001      	b.n	8006084 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006080:	2302      	movs	r3, #2
 8006082:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006084:	7b7b      	ldrb	r3, [r7, #13]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	2000020c 	.word	0x2000020c

08006098 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e010      	b.n	80060c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060a6:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <clear_lock+0x44>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	4413      	add	r3, r2
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d105      	bne.n	80060c2 <clear_lock+0x2a>
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <clear_lock+0x44>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d9eb      	bls.n	80060a6 <clear_lock+0xe>
	}
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000020c 	.word	0x2000020c

080060e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	78db      	ldrb	r3, [r3, #3]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d034      	beq.n	800615e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7858      	ldrb	r0, [r3, #1]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006104:	2301      	movs	r3, #1
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	f7ff fd40 	bl	8005b8c <disk_write>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e022      	b.n	800615e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	1ad2      	subs	r2, r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	429a      	cmp	r2, r3
 800612c:	d217      	bcs.n	800615e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	789b      	ldrb	r3, [r3, #2]
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	e010      	b.n	8006158 <sync_window+0x78>
					wsect += fs->fsize;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7858      	ldrb	r0, [r3, #1]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800614a:	2301      	movs	r3, #1
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	f7ff fd1d 	bl	8005b8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3b01      	subs	r3, #1
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d8eb      	bhi.n	8006136 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d01b      	beq.n	80061b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ffad 	bl	80060e0 <sync_window>
 8006186:	4603      	mov	r3, r0
 8006188:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d113      	bne.n	80061b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	7858      	ldrb	r0, [r3, #1]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800619a:	2301      	movs	r3, #1
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	f7ff fcd5 	bl	8005b4c <disk_read>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff ff87 	bl	80060e0 <sync_window>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d159      	bne.n	8006290 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d149      	bne.n	8006278 <sync_fs+0xb4>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	791b      	ldrb	r3, [r3, #4]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d145      	bne.n	8006278 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	899b      	ldrh	r3, [r3, #12]
 80061f6:	461a      	mov	r2, r3
 80061f8:	2100      	movs	r1, #0
 80061fa:	f7ff fda8 	bl	8005d4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3334      	adds	r3, #52	; 0x34
 8006202:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006206:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fd37 	bl	8005c7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3334      	adds	r3, #52	; 0x34
 8006214:	4921      	ldr	r1, [pc, #132]	; (800629c <sync_fs+0xd8>)
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fd4c 	bl	8005cb4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3334      	adds	r3, #52	; 0x34
 8006220:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006224:	491e      	ldr	r1, [pc, #120]	; (80062a0 <sync_fs+0xdc>)
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fd44 	bl	8005cb4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3334      	adds	r3, #52	; 0x34
 8006230:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f7ff fd3a 	bl	8005cb4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3334      	adds	r3, #52	; 0x34
 8006244:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f7ff fd30 	bl	8005cb4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7858      	ldrb	r0, [r3, #1]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800626c:	2301      	movs	r3, #1
 800626e:	f7ff fc8d 	bl	8005b8c <disk_write>
			fs->fsi_flag = 0;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2200      	movs	r2, #0
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fca3 	bl	8005bcc <disk_ioctl>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <sync_fs+0xcc>
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	41615252 	.word	0x41615252
 80062a0:	61417272 	.word	0x61417272

080062a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	3b02      	subs	r3, #2
 80062b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	3b02      	subs	r3, #2
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d301      	bcc.n	80062c4 <clust2sect+0x20>
 80062c0:	2300      	movs	r3, #0
 80062c2:	e008      	b.n	80062d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	895b      	ldrh	r3, [r3, #10]
 80062c8:	461a      	mov	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	fb03 f202 	mul.w	r2, r3, r2
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4413      	add	r3, r2
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d904      	bls.n	8006302 <get_fat+0x20>
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006302:	2301      	movs	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e0b7      	b.n	8006478 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d05a      	beq.n	80063cc <get_fat+0xea>
 8006316:	2b03      	cmp	r3, #3
 8006318:	d07d      	beq.n	8006416 <get_fat+0x134>
 800631a:	2b01      	cmp	r3, #1
 800631c:	f040 80a2 	bne.w	8006464 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	085b      	lsrs	r3, r3, #1
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	899b      	ldrh	r3, [r3, #12]
 8006336:	4619      	mov	r1, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	fbb3 f3f1 	udiv	r3, r3, r1
 800633e:	4413      	add	r3, r2
 8006340:	4619      	mov	r1, r3
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f7ff ff10 	bl	8006168 <move_window>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 808d 	bne.w	800646a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	60fa      	str	r2, [r7, #12]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	8992      	ldrh	r2, [r2, #12]
 800635a:	fbb3 f1f2 	udiv	r1, r3, r2
 800635e:	fb02 f201 	mul.w	r2, r2, r1
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800636c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	899b      	ldrh	r3, [r3, #12]
 8006376:	4619      	mov	r1, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	fbb3 f3f1 	udiv	r3, r3, r1
 800637e:	4413      	add	r3, r2
 8006380:	4619      	mov	r1, r3
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f7ff fef0 	bl	8006168 <move_window>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d16f      	bne.n	800646e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	899b      	ldrh	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	fbb3 f1f2 	udiv	r1, r3, r2
 800639a:	fb02 f201 	mul.w	r2, r2, r1
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4413      	add	r3, r2
 80063a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <get_fat+0xe0>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	e002      	b.n	80063c8 <get_fat+0xe6>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c8:	617b      	str	r3, [r7, #20]
			break;
 80063ca:	e055      	b.n	8006478 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	899b      	ldrh	r3, [r3, #12]
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4619      	mov	r1, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80063e0:	4413      	add	r3, r2
 80063e2:	4619      	mov	r1, r3
 80063e4:	6938      	ldr	r0, [r7, #16]
 80063e6:	f7ff febf 	bl	8006168 <move_window>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d140      	bne.n	8006472 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	8992      	ldrh	r2, [r2, #12]
 80063fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006402:	fb02 f200 	mul.w	r2, r2, r0
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	440b      	add	r3, r1
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fbfc 	bl	8005c08 <ld_word>
 8006410:	4603      	mov	r3, r0
 8006412:	617b      	str	r3, [r7, #20]
			break;
 8006414:	e030      	b.n	8006478 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	899b      	ldrh	r3, [r3, #12]
 800641e:	089b      	lsrs	r3, r3, #2
 8006420:	b29b      	uxth	r3, r3
 8006422:	4619      	mov	r1, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	fbb3 f3f1 	udiv	r3, r3, r1
 800642a:	4413      	add	r3, r2
 800642c:	4619      	mov	r1, r3
 800642e:	6938      	ldr	r0, [r7, #16]
 8006430:	f7ff fe9a 	bl	8006168 <move_window>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	8992      	ldrh	r2, [r2, #12]
 8006448:	fbb3 f0f2 	udiv	r0, r3, r2
 800644c:	fb02 f200 	mul.w	r2, r2, r0
 8006450:	1a9b      	subs	r3, r3, r2
 8006452:	440b      	add	r3, r1
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fbef 	bl	8005c38 <ld_dword>
 800645a:	4603      	mov	r3, r0
 800645c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006460:	617b      	str	r3, [r7, #20]
			break;
 8006462:	e009      	b.n	8006478 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	e006      	b.n	8006478 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800646a:	bf00      	nop
 800646c:	e004      	b.n	8006478 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800646e:	bf00      	nop
 8006470:	e002      	b.n	8006478 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006476:	bf00      	nop
		}
	}

	return val;
 8006478:	697b      	ldr	r3, [r7, #20]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006482:	b590      	push	{r4, r7, lr}
 8006484:	b089      	sub	sp, #36	; 0x24
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800648e:	2302      	movs	r3, #2
 8006490:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b01      	cmp	r3, #1
 8006496:	f240 8106 	bls.w	80066a6 <put_fat+0x224>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	f080 8100 	bcs.w	80066a6 <put_fat+0x224>
		switch (fs->fs_type) {
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	f000 8088 	beq.w	80065c0 <put_fat+0x13e>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	f000 80b0 	beq.w	8006616 <put_fat+0x194>
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	f040 80f5 	bne.w	80066a6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4413      	add	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	899b      	ldrh	r3, [r3, #12]
 80064d2:	4619      	mov	r1, r3
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064da:	4413      	add	r3, r2
 80064dc:	4619      	mov	r1, r3
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff fe42 	bl	8006168 <move_window>
 80064e4:	4603      	mov	r3, r0
 80064e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064e8:	7ffb      	ldrb	r3, [r7, #31]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 80d4 	bne.w	8006698 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	61ba      	str	r2, [r7, #24]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	8992      	ldrh	r2, [r2, #12]
 8006500:	fbb3 f0f2 	udiv	r0, r3, r2
 8006504:	fb02 f200 	mul.w	r2, r2, r0
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	440b      	add	r3, r1
 800650c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00d      	beq.n	8006534 <put_fat+0xb2>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b25b      	sxtb	r3, r3
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	b25a      	sxtb	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	b25b      	sxtb	r3, r3
 800652c:	4313      	orrs	r3, r2
 800652e:	b25b      	sxtb	r3, r3
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e001      	b.n	8006538 <put_fat+0xb6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	899b      	ldrh	r3, [r3, #12]
 800654a:	4619      	mov	r1, r3
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006552:	4413      	add	r3, r2
 8006554:	4619      	mov	r1, r3
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff fe06 	bl	8006168 <move_window>
 800655c:	4603      	mov	r3, r0
 800655e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006560:	7ffb      	ldrb	r3, [r7, #31]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 809a 	bne.w	800669c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	899b      	ldrh	r3, [r3, #12]
 8006572:	461a      	mov	r2, r3
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	fbb3 f0f2 	udiv	r0, r3, r2
 800657a:	fb02 f200 	mul.w	r2, r2, r0
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	440b      	add	r3, r1
 8006582:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <put_fat+0x114>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	b2db      	uxtb	r3, r3
 8006594:	e00e      	b.n	80065b4 <put_fat+0x132>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	f023 030f 	bic.w	r3, r3, #15
 80065a0:	b25a      	sxtb	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	b25b      	sxtb	r3, r3
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b25b      	sxtb	r3, r3
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	70da      	strb	r2, [r3, #3]
			break;
 80065be:	e072      	b.n	80066a6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	899b      	ldrh	r3, [r3, #12]
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4619      	mov	r1, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80065d4:	4413      	add	r3, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff fdc5 	bl	8006168 <move_window>
 80065de:	4603      	mov	r3, r0
 80065e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065e2:	7ffb      	ldrb	r3, [r7, #31]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d15b      	bne.n	80066a0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	8992      	ldrh	r2, [r2, #12]
 80065f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80065fa:	fb02 f200 	mul.w	r2, r2, r0
 80065fe:	1a9b      	subs	r3, r3, r2
 8006600:	440b      	add	r3, r1
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	b292      	uxth	r2, r2
 8006606:	4611      	mov	r1, r2
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fb38 	bl	8005c7e <st_word>
			fs->wflag = 1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	70da      	strb	r2, [r3, #3]
			break;
 8006614:	e047      	b.n	80066a6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	899b      	ldrh	r3, [r3, #12]
 800661e:	089b      	lsrs	r3, r3, #2
 8006620:	b29b      	uxth	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	fbb3 f3f1 	udiv	r3, r3, r1
 800662a:	4413      	add	r3, r2
 800662c:	4619      	mov	r1, r3
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fd9a 	bl	8006168 <move_window>
 8006634:	4603      	mov	r3, r0
 8006636:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006638:	7ffb      	ldrb	r3, [r7, #31]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d132      	bne.n	80066a4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	8992      	ldrh	r2, [r2, #12]
 8006652:	fbb3 f0f2 	udiv	r0, r3, r2
 8006656:	fb02 f200 	mul.w	r2, r2, r0
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	440b      	add	r3, r1
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff faea 	bl	8005c38 <ld_dword>
 8006664:	4603      	mov	r3, r0
 8006666:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800666a:	4323      	orrs	r3, r4
 800666c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	8992      	ldrh	r2, [r2, #12]
 800667c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006680:	fb02 f200 	mul.w	r2, r2, r0
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	440b      	add	r3, r1
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fb12 	bl	8005cb4 <st_dword>
			fs->wflag = 1;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	70da      	strb	r2, [r3, #3]
			break;
 8006696:	e006      	b.n	80066a6 <put_fat+0x224>
			if (res != FR_OK) break;
 8006698:	bf00      	nop
 800669a:	e004      	b.n	80066a6 <put_fat+0x224>
			if (res != FR_OK) break;
 800669c:	bf00      	nop
 800669e:	e002      	b.n	80066a6 <put_fat+0x224>
			if (res != FR_OK) break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <put_fat+0x224>
			if (res != FR_OK) break;
 80066a4:	bf00      	nop
		}
	}
	return res;
 80066a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3724      	adds	r7, #36	; 0x24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd90      	pop	{r4, r7, pc}

080066b0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d904      	bls.n	80066d6 <remove_chain+0x26>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d301      	bcc.n	80066da <remove_chain+0x2a>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e04b      	b.n	8006772 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	69b8      	ldr	r0, [r7, #24]
 80066e8:	f7ff fecb 	bl	8006482 <put_fat>
 80066ec:	4603      	mov	r3, r0
 80066ee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80066f0:	7ffb      	ldrb	r3, [r7, #31]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <remove_chain+0x4a>
 80066f6:	7ffb      	ldrb	r3, [r7, #31]
 80066f8:	e03b      	b.n	8006772 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff fdf0 	bl	80062e2 <get_fat>
 8006702:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d031      	beq.n	800676e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <remove_chain+0x64>
 8006710:	2302      	movs	r3, #2
 8006712:	e02e      	b.n	8006772 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671a:	d101      	bne.n	8006720 <remove_chain+0x70>
 800671c:	2301      	movs	r3, #1
 800671e:	e028      	b.n	8006772 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006720:	2200      	movs	r2, #0
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	69b8      	ldr	r0, [r7, #24]
 8006726:	f7ff feac 	bl	8006482 <put_fat>
 800672a:	4603      	mov	r3, r0
 800672c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800672e:	7ffb      	ldrb	r3, [r7, #31]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <remove_chain+0x88>
 8006734:	7ffb      	ldrb	r3, [r7, #31]
 8006736:	e01c      	b.n	8006772 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	695a      	ldr	r2, [r3, #20]
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	3b02      	subs	r3, #2
 8006742:	429a      	cmp	r2, r3
 8006744:	d20b      	bcs.n	800675e <remove_chain+0xae>
			fs->free_clst++;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	791b      	ldrb	r3, [r3, #4]
 8006754:	f043 0301 	orr.w	r3, r3, #1
 8006758:	b2da      	uxtb	r2, r3
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	d3c6      	bcc.n	80066fa <remove_chain+0x4a>
 800676c:	e000      	b.n	8006770 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800676e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b088      	sub	sp, #32
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10d      	bne.n	80067ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <create_chain+0x2c>
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d31b      	bcc.n	80067de <create_chain+0x64>
 80067a6:	2301      	movs	r3, #1
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e018      	b.n	80067de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fd97 	bl	80062e2 <get_fat>
 80067b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d801      	bhi.n	80067c0 <create_chain+0x46>
 80067bc:	2301      	movs	r3, #1
 80067be:	e070      	b.n	80068a2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d101      	bne.n	80067cc <create_chain+0x52>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	e06a      	b.n	80068a2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d201      	bcs.n	80067da <create_chain+0x60>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	e063      	b.n	80068a2 <create_chain+0x128>
		scl = clst;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	3301      	adds	r3, #1
 80067e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d307      	bcc.n	8006802 <create_chain+0x88>
				ncl = 2;
 80067f2:	2302      	movs	r3, #2
 80067f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d901      	bls.n	8006802 <create_chain+0x88>
 80067fe:	2300      	movs	r3, #0
 8006800:	e04f      	b.n	80068a2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006802:	69f9      	ldr	r1, [r7, #28]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fd6c 	bl	80062e2 <get_fat>
 800680a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00e      	beq.n	8006830 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d003      	beq.n	8006820 <create_chain+0xa6>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681e:	d101      	bne.n	8006824 <create_chain+0xaa>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	e03e      	b.n	80068a2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	429a      	cmp	r2, r3
 800682a:	d1da      	bne.n	80067e2 <create_chain+0x68>
 800682c:	2300      	movs	r3, #0
 800682e:	e038      	b.n	80068a2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006830:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006832:	f04f 32ff 	mov.w	r2, #4294967295
 8006836:	69f9      	ldr	r1, [r7, #28]
 8006838:	6938      	ldr	r0, [r7, #16]
 800683a:	f7ff fe22 	bl	8006482 <put_fat>
 800683e:	4603      	mov	r3, r0
 8006840:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <create_chain+0xe2>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d006      	beq.n	800685c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6938      	ldr	r0, [r7, #16]
 8006854:	f7ff fe15 	bl	8006482 <put_fat>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d116      	bne.n	8006890 <create_chain+0x116>
		fs->last_clst = ncl;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	695a      	ldr	r2, [r3, #20]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	3b02      	subs	r3, #2
 8006872:	429a      	cmp	r2, r3
 8006874:	d804      	bhi.n	8006880 <create_chain+0x106>
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	1e5a      	subs	r2, r3, #1
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	711a      	strb	r2, [r3, #4]
 800688e:	e007      	b.n	80068a0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d102      	bne.n	800689c <create_chain+0x122>
 8006896:	f04f 33ff 	mov.w	r3, #4294967295
 800689a:	e000      	b.n	800689e <create_chain+0x124>
 800689c:	2301      	movs	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80068a0:	69fb      	ldr	r3, [r7, #28]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	3304      	adds	r3, #4
 80068c0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	899b      	ldrh	r3, [r3, #12]
 80068c6:	461a      	mov	r2, r3
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	8952      	ldrh	r2, [r2, #10]
 80068d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	613a      	str	r2, [r7, #16]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <clmt_clust+0x42>
 80068e8:	2300      	movs	r3, #0
 80068ea:	e010      	b.n	800690e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d307      	bcc.n	8006904 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	3304      	adds	r3, #4
 8006900:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006902:	e7e9      	b.n	80068d8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006904:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4413      	add	r3, r2
}
 800690e:	4618      	mov	r0, r3
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006930:	d204      	bcs.n	800693c <dir_sdi+0x22>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <dir_sdi+0x26>
		return FR_INT_ERR;
 800693c:	2302      	movs	r3, #2
 800693e:	e071      	b.n	8006a24 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <dir_sdi+0x46>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d902      	bls.n	8006960 <dir_sdi+0x46>
		clst = fs->dirbase;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10c      	bne.n	8006980 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	8912      	ldrh	r2, [r2, #8]
 800696e:	4293      	cmp	r3, r2
 8006970:	d301      	bcc.n	8006976 <dir_sdi+0x5c>
 8006972:	2302      	movs	r3, #2
 8006974:	e056      	b.n	8006a24 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	61da      	str	r2, [r3, #28]
 800697e:	e02d      	b.n	80069dc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	895b      	ldrh	r3, [r3, #10]
 8006984:	461a      	mov	r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	899b      	ldrh	r3, [r3, #12]
 800698a:	fb03 f302 	mul.w	r3, r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006990:	e019      	b.n	80069c6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6979      	ldr	r1, [r7, #20]
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fca3 	bl	80062e2 <get_fat>
 800699c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d101      	bne.n	80069aa <dir_sdi+0x90>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e03c      	b.n	8006a24 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d904      	bls.n	80069ba <dir_sdi+0xa0>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d301      	bcc.n	80069be <dir_sdi+0xa4>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e032      	b.n	8006a24 <dir_sdi+0x10a>
			ofs -= csz;
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d2e1      	bcs.n	8006992 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80069ce:	6979      	ldr	r1, [r7, #20]
 80069d0:	6938      	ldr	r0, [r7, #16]
 80069d2:	f7ff fc67 	bl	80062a4 <clust2sect>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <dir_sdi+0xd4>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e01a      	b.n	8006a24 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69da      	ldr	r2, [r3, #28]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	899b      	ldrh	r3, [r3, #12]
 80069f6:	4619      	mov	r1, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80069fe:	441a      	add	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	899b      	ldrh	r3, [r3, #12]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a16:	fb02 f200 	mul.w	r2, r2, r0
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	18ca      	adds	r2, r1, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	3320      	adds	r3, #32
 8006a42:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <dir_next+0x28>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a52:	d301      	bcc.n	8006a58 <dir_next+0x2c>
 8006a54:	2304      	movs	r3, #4
 8006a56:	e0bb      	b.n	8006bd0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	899b      	ldrh	r3, [r3, #12]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a64:	fb02 f201 	mul.w	r2, r2, r1
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 809d 	bne.w	8006baa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	8912      	ldrh	r2, [r2, #8]
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	f0c0 808d 	bcc.w	8006baa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	61da      	str	r2, [r3, #28]
 8006a96:	2304      	movs	r3, #4
 8006a98:	e09a      	b.n	8006bd0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	899b      	ldrh	r3, [r3, #12]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	8952      	ldrh	r2, [r2, #10]
 8006aaa:	3a01      	subs	r2, #1
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d17b      	bne.n	8006baa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7ff fc11 	bl	80062e2 <get_fat>
 8006ac0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d801      	bhi.n	8006acc <dir_next+0xa0>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e081      	b.n	8006bd0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d101      	bne.n	8006ad8 <dir_next+0xac>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e07b      	b.n	8006bd0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d359      	bcc.n	8006b96 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	61da      	str	r2, [r3, #28]
 8006aee:	2304      	movs	r3, #4
 8006af0:	e06e      	b.n	8006bd0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f7ff fe3d 	bl	800677a <create_chain>
 8006b00:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <dir_next+0xe0>
 8006b08:	2307      	movs	r3, #7
 8006b0a:	e061      	b.n	8006bd0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <dir_next+0xea>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e05c      	b.n	8006bd0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d101      	bne.n	8006b22 <dir_next+0xf6>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e056      	b.n	8006bd0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff fadc 	bl	80060e0 <sync_window>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <dir_next+0x106>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e04e      	b.n	8006bd0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	899b      	ldrh	r3, [r3, #12]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2100      	movs	r1, #0
 8006b40:	f7ff f905 	bl	8005d4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	6979      	ldr	r1, [r7, #20]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff fbaa 	bl	80062a4 <clust2sect>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
 8006b56:	e012      	b.n	8006b7e <dir_next+0x152>
						fs->wflag = 1;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7ff fabe 	bl	80060e0 <sync_window>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <dir_next+0x142>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e030      	b.n	8006bd0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	3301      	adds	r3, #1
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	895b      	ldrh	r3, [r3, #10]
 8006b82:	461a      	mov	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d3e6      	bcc.n	8006b58 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad2      	subs	r2, r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006b9c:	6979      	ldr	r1, [r7, #20]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fb80 	bl	80062a4 <clust2sect>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	899b      	ldrh	r3, [r3, #12]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bc2:	fb02 f200 	mul.w	r2, r2, r0
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	18ca      	adds	r2, r1, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006be8:	2100      	movs	r1, #0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fe95 	bl	800691a <dir_sdi>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d12b      	bne.n	8006c52 <dir_alloc+0x7a>
		n = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4619      	mov	r1, r3
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff faaf 	bl	8006168 <move_window>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d11d      	bne.n	8006c50 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2be5      	cmp	r3, #229	; 0xe5
 8006c1c:	d004      	beq.n	8006c28 <dir_alloc+0x50>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d102      	bne.n	8006c3c <dir_alloc+0x64>
 8006c36:	e00c      	b.n	8006c52 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fef4 	bl	8006a2c <dir_next>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0d7      	beq.n	8006bfe <dir_alloc+0x26>
 8006c4e:	e000      	b.n	8006c52 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006c50:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d101      	bne.n	8006c5c <dir_alloc+0x84>
 8006c58:	2307      	movs	r3, #7
 8006c5a:	75fb      	strb	r3, [r7, #23]
	return res;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	331a      	adds	r3, #26
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe ffc7 	bl	8005c08 <ld_word>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d109      	bne.n	8006c9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe ffbc 	bl	8005c08 <ld_word>
 8006c90:	4603      	mov	r3, r0
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	331a      	adds	r3, #26
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe ffdf 	bl	8005c7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d109      	bne.n	8006cdc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f103 0214 	add.w	r2, r3, #20
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0c1b      	lsrs	r3, r3, #16
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f7fe ffd1 	bl	8005c7e <st_word>
	}
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fe10 	bl	800691a <dir_sdi>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <dir_find+0x24>
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	e03e      	b.n	8006d86 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6938      	ldr	r0, [r7, #16]
 8006d10:	f7ff fa2a 	bl	8006168 <move_window>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d12f      	bne.n	8006d7e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <dir_find+0x4e>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	75fb      	strb	r3, [r7, #23]
 8006d30:	e028      	b.n	8006d84 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	330b      	adds	r3, #11
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	330b      	adds	r3, #11
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <dir_find+0x86>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a18      	ldr	r0, [r3, #32]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3324      	adds	r3, #36	; 0x24
 8006d5c:	220b      	movs	r2, #11
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f7ff f80f 	bl	8005d82 <mem_cmp>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fe5d 	bl	8006a2c <dir_next>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0c5      	beq.n	8006d08 <dir_find+0x24>
 8006d7c:	e002      	b.n	8006d84 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d82:	bf00      	nop

	return res;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff ff1a 	bl	8006bd8 <dir_alloc>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d11c      	bne.n	8006de8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	4619      	mov	r1, r3
 8006db4:	68b8      	ldr	r0, [r7, #8]
 8006db6:	f7ff f9d7 	bl	8006168 <move_window>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d111      	bne.n	8006de8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe ffbe 	bl	8005d4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a18      	ldr	r0, [r3, #32]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3324      	adds	r3, #36	; 0x24
 8006dda:	220b      	movs	r2, #11
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f7fe ff95 	bl	8005d0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2201      	movs	r2, #1
 8006de6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006e0a:	220b      	movs	r2, #11
 8006e0c:	2120      	movs	r1, #32
 8006e0e:	68b8      	ldr	r0, [r7, #8]
 8006e10:	f7fe ff9d 	bl	8005d4e <mem_set>
	si = i = 0; ni = 8;
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	617a      	str	r2, [r7, #20]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006e2e:	7ffb      	ldrb	r3, [r7, #31]
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d94e      	bls.n	8006ed2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006e34:	7ffb      	ldrb	r3, [r7, #31]
 8006e36:	2b2f      	cmp	r3, #47	; 0x2f
 8006e38:	d006      	beq.n	8006e48 <create_name+0x54>
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
 8006e3c:	2b5c      	cmp	r3, #92	; 0x5c
 8006e3e:	d110      	bne.n	8006e62 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006e40:	e002      	b.n	8006e48 <create_name+0x54>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	3301      	adds	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b2f      	cmp	r3, #47	; 0x2f
 8006e52:	d0f6      	beq.n	8006e42 <create_name+0x4e>
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006e5e:	d0f0      	beq.n	8006e42 <create_name+0x4e>
			break;
 8006e60:	e038      	b.n	8006ed4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006e62:	7ffb      	ldrb	r3, [r7, #31]
 8006e64:	2b2e      	cmp	r3, #46	; 0x2e
 8006e66:	d003      	beq.n	8006e70 <create_name+0x7c>
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d30c      	bcc.n	8006e8a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b0b      	cmp	r3, #11
 8006e74:	d002      	beq.n	8006e7c <create_name+0x88>
 8006e76:	7ffb      	ldrb	r3, [r7, #31]
 8006e78:	2b2e      	cmp	r3, #46	; 0x2e
 8006e7a:	d001      	beq.n	8006e80 <create_name+0x8c>
 8006e7c:	2306      	movs	r3, #6
 8006e7e:	e044      	b.n	8006f0a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006e80:	2308      	movs	r3, #8
 8006e82:	613b      	str	r3, [r7, #16]
 8006e84:	230b      	movs	r3, #11
 8006e86:	61bb      	str	r3, [r7, #24]
			continue;
 8006e88:	e022      	b.n	8006ed0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006e8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da04      	bge.n	8006e9c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006e92:	7ffb      	ldrb	r3, [r7, #31]
 8006e94:	3b80      	subs	r3, #128	; 0x80
 8006e96:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <create_name+0x120>)
 8006e98:	5cd3      	ldrb	r3, [r2, r3]
 8006e9a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006e9c:	7ffb      	ldrb	r3, [r7, #31]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	481d      	ldr	r0, [pc, #116]	; (8006f18 <create_name+0x124>)
 8006ea2:	f7fe ff95 	bl	8005dd0 <chk_chr>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <create_name+0xbc>
 8006eac:	2306      	movs	r3, #6
 8006eae:	e02c      	b.n	8006f0a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006eb0:	7ffb      	ldrb	r3, [r7, #31]
 8006eb2:	2b60      	cmp	r3, #96	; 0x60
 8006eb4:	d905      	bls.n	8006ec2 <create_name+0xce>
 8006eb6:	7ffb      	ldrb	r3, [r7, #31]
 8006eb8:	2b7a      	cmp	r3, #122	; 0x7a
 8006eba:	d802      	bhi.n	8006ec2 <create_name+0xce>
 8006ebc:	7ffb      	ldrb	r3, [r7, #31]
 8006ebe:	3b20      	subs	r3, #32
 8006ec0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	613a      	str	r2, [r7, #16]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	4413      	add	r3, r2
 8006ecc:	7ffa      	ldrb	r2, [r7, #31]
 8006ece:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006ed0:	e7a6      	b.n	8006e20 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006ed2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	441a      	add	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <create_name+0xf4>
 8006ee4:	2306      	movs	r3, #6
 8006ee6:	e010      	b.n	8006f0a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2be5      	cmp	r3, #229	; 0xe5
 8006eee:	d102      	bne.n	8006ef6 <create_name+0x102>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2205      	movs	r2, #5
 8006ef4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006ef6:	7ffb      	ldrb	r3, [r7, #31]
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d801      	bhi.n	8006f00 <create_name+0x10c>
 8006efc:	2204      	movs	r2, #4
 8006efe:	e000      	b.n	8006f02 <create_name+0x10e>
 8006f00:	2200      	movs	r2, #0
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	330b      	adds	r3, #11
 8006f06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006f08:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3720      	adds	r7, #32
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	0800bc08 	.word	0x0800bc08
 8006f18:	0800bb98 	.word	0x0800bb98

08006f1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006f30:	e002      	b.n	8006f38 <follow_path+0x1c>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b2f      	cmp	r3, #47	; 0x2f
 8006f3e:	d0f8      	beq.n	8006f32 <follow_path+0x16>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b5c      	cmp	r3, #92	; 0x5c
 8006f46:	d0f4      	beq.n	8006f32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b1f      	cmp	r3, #31
 8006f54:	d80a      	bhi.n	8006f6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2280      	movs	r2, #128	; 0x80
 8006f5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006f5e:	2100      	movs	r1, #0
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff fcda 	bl	800691a <dir_sdi>
 8006f66:	4603      	mov	r3, r0
 8006f68:	75fb      	strb	r3, [r7, #23]
 8006f6a:	e048      	b.n	8006ffe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff3f 	bl	8006df4 <create_name>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d139      	bne.n	8006ff4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff feaf 	bl	8006ce4 <dir_find>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006f90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d12c      	bne.n	8006ff8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006f9e:	7afb      	ldrb	r3, [r7, #11]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d127      	bne.n	8006ff8 <follow_path+0xdc>
 8006fa8:	2305      	movs	r3, #5
 8006faa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006fac:	e024      	b.n	8006ff8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d121      	bne.n	8006ffc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	799b      	ldrb	r3, [r3, #6]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006fc4:	2305      	movs	r3, #5
 8006fc6:	75fb      	strb	r3, [r7, #23]
 8006fc8:	e019      	b.n	8006ffe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	8992      	ldrh	r2, [r2, #12]
 8006fd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fdc:	fb02 f200 	mul.w	r2, r2, r0
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fe3d 	bl	8006c66 <ld_clust>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ff2:	e7bb      	b.n	8006f6c <follow_path+0x50>
			if (res != FR_OK) break;
 8006ff4:	bf00      	nop
 8006ff6:	e002      	b.n	8006ffe <follow_path+0xe2>
				break;
 8006ff8:	bf00      	nop
 8006ffa:	e000      	b.n	8006ffe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ffc:	bf00      	nop
			}
		}
	}

	return res;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d031      	beq.n	8007082 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e002      	b.n	800702c <get_ldnumber+0x24>
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	3301      	adds	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b20      	cmp	r3, #32
 8007032:	d903      	bls.n	800703c <get_ldnumber+0x34>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b3a      	cmp	r3, #58	; 0x3a
 800703a:	d1f4      	bne.n	8007026 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b3a      	cmp	r3, #58	; 0x3a
 8007042:	d11c      	bne.n	800707e <get_ldnumber+0x76>
			tp = *path;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	60fa      	str	r2, [r7, #12]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	3b30      	subs	r3, #48	; 0x30
 8007054:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b09      	cmp	r3, #9
 800705a:	d80e      	bhi.n	800707a <get_ldnumber+0x72>
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	429a      	cmp	r2, r3
 8007062:	d10a      	bne.n	800707a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d107      	bne.n	800707a <get_ldnumber+0x72>
					vol = (int)i;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	3301      	adds	r3, #1
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	e002      	b.n	8007084 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007082:	693b      	ldr	r3, [r7, #16]
}
 8007084:	4618      	mov	r0, r3
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	70da      	strb	r2, [r3, #3]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff f85c 	bl	8006168 <move_window>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <check_fs+0x2a>
 80070b6:	2304      	movs	r3, #4
 80070b8:	e038      	b.n	800712c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3334      	adds	r3, #52	; 0x34
 80070be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fda0 	bl	8005c08 <ld_word>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d001      	beq.n	80070d8 <check_fs+0x48>
 80070d4:	2303      	movs	r3, #3
 80070d6:	e029      	b.n	800712c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070de:	2be9      	cmp	r3, #233	; 0xe9
 80070e0:	d009      	beq.n	80070f6 <check_fs+0x66>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070e8:	2beb      	cmp	r3, #235	; 0xeb
 80070ea:	d11e      	bne.n	800712a <check_fs+0x9a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80070f2:	2b90      	cmp	r3, #144	; 0x90
 80070f4:	d119      	bne.n	800712a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3334      	adds	r3, #52	; 0x34
 80070fa:	3336      	adds	r3, #54	; 0x36
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe fd9b 	bl	8005c38 <ld_dword>
 8007102:	4603      	mov	r3, r0
 8007104:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007108:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <check_fs+0xa4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <check_fs+0x82>
 800710e:	2300      	movs	r3, #0
 8007110:	e00c      	b.n	800712c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3334      	adds	r3, #52	; 0x34
 8007116:	3352      	adds	r3, #82	; 0x52
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fd8d 	bl	8005c38 <ld_dword>
 800711e:	4602      	mov	r2, r0
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <check_fs+0xa8>)
 8007122:	429a      	cmp	r2, r3
 8007124:	d101      	bne.n	800712a <check_fs+0x9a>
 8007126:	2300      	movs	r3, #0
 8007128:	e000      	b.n	800712c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800712a:	2302      	movs	r3, #2
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	00544146 	.word	0x00544146
 8007138:	33544146 	.word	0x33544146

0800713c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b096      	sub	sp, #88	; 0x58
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	4613      	mov	r3, r2
 8007148:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff ff59 	bl	8007008 <get_ldnumber>
 8007156:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	2b00      	cmp	r3, #0
 800715c:	da01      	bge.n	8007162 <find_volume+0x26>
 800715e:	230b      	movs	r3, #11
 8007160:	e265      	b.n	800762e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007162:	4ab0      	ldr	r2, [pc, #704]	; (8007424 <find_volume+0x2e8>)
 8007164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <find_volume+0x3a>
 8007172:	230c      	movs	r3, #12
 8007174:	e25b      	b.n	800762e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01a      	beq.n	80071c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fc9b 	bl	8005acc <disk_status>
 8007196:	4603      	mov	r3, r0
 8007198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800719c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10c      	bne.n	80071c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <find_volume+0x82>
 80071ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80071ba:	230a      	movs	r3, #10
 80071bc:	e237      	b.n	800762e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80071be:	2300      	movs	r3, #0
 80071c0:	e235      	b.n	800762e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80071c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fc93 	bl	8005b00 <disk_initialize>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80071e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80071ec:	2303      	movs	r3, #3
 80071ee:	e21e      	b.n	800762e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <find_volume+0xca>
 80071f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007202:	230a      	movs	r3, #10
 8007204:	e213      	b.n	800762e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	7858      	ldrb	r0, [r3, #1]
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	330c      	adds	r3, #12
 800720e:	461a      	mov	r2, r3
 8007210:	2102      	movs	r1, #2
 8007212:	f7fe fcdb 	bl	8005bcc <disk_ioctl>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <find_volume+0xe4>
 800721c:	2301      	movs	r3, #1
 800721e:	e206      	b.n	800762e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	899b      	ldrh	r3, [r3, #12]
 8007224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007228:	d80d      	bhi.n	8007246 <find_volume+0x10a>
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	899b      	ldrh	r3, [r3, #12]
 800722e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007232:	d308      	bcc.n	8007246 <find_volume+0x10a>
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	899b      	ldrh	r3, [r3, #12]
 8007238:	461a      	mov	r2, r3
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	899b      	ldrh	r3, [r3, #12]
 800723e:	3b01      	subs	r3, #1
 8007240:	4013      	ands	r3, r2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <find_volume+0x10e>
 8007246:	2301      	movs	r3, #1
 8007248:	e1f1      	b.n	800762e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800724e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007250:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007252:	f7ff ff1d 	bl	8007090 <check_fs>
 8007256:	4603      	mov	r3, r0
 8007258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800725c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007260:	2b02      	cmp	r3, #2
 8007262:	d14b      	bne.n	80072fc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007264:	2300      	movs	r3, #0
 8007266:	643b      	str	r3, [r7, #64]	; 0x40
 8007268:	e01f      	b.n	80072aa <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007278:	4413      	add	r3, r2
 800727a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	3304      	adds	r3, #4
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <find_volume+0x158>
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	3308      	adds	r3, #8
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fcd4 	bl	8005c38 <ld_dword>
 8007290:	4602      	mov	r2, r0
 8007292:	e000      	b.n	8007296 <find_volume+0x15a>
 8007294:	2200      	movs	r2, #0
 8007296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800729e:	440b      	add	r3, r1
 80072a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	3301      	adds	r3, #1
 80072a8:	643b      	str	r3, [r7, #64]	; 0x40
 80072aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d9dc      	bls.n	800726a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80072b0:	2300      	movs	r3, #0
 80072b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80072b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <find_volume+0x184>
 80072ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072bc:	3b01      	subs	r3, #1
 80072be:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80072c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80072c8:	4413      	add	r3, r2
 80072ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80072d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <find_volume+0x1a6>
 80072d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072da:	f7ff fed9 	bl	8007090 <check_fs>
 80072de:	4603      	mov	r3, r0
 80072e0:	e000      	b.n	80072e4 <find_volume+0x1a8>
 80072e2:	2303      	movs	r3, #3
 80072e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80072e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d905      	bls.n	80072fc <find_volume+0x1c0>
 80072f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f2:	3301      	adds	r3, #1
 80072f4:	643b      	str	r3, [r7, #64]	; 0x40
 80072f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d9e1      	bls.n	80072c0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80072fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007300:	2b04      	cmp	r3, #4
 8007302:	d101      	bne.n	8007308 <find_volume+0x1cc>
 8007304:	2301      	movs	r3, #1
 8007306:	e192      	b.n	800762e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800730c:	2b01      	cmp	r3, #1
 800730e:	d901      	bls.n	8007314 <find_volume+0x1d8>
 8007310:	230d      	movs	r3, #13
 8007312:	e18c      	b.n	800762e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	3334      	adds	r3, #52	; 0x34
 8007318:	330b      	adds	r3, #11
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fc74 	bl	8005c08 <ld_word>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	899b      	ldrh	r3, [r3, #12]
 8007328:	429a      	cmp	r2, r3
 800732a:	d001      	beq.n	8007330 <find_volume+0x1f4>
 800732c:	230d      	movs	r3, #13
 800732e:	e17e      	b.n	800762e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	3334      	adds	r3, #52	; 0x34
 8007334:	3316      	adds	r3, #22
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fc66 	bl	8005c08 <ld_word>
 800733c:	4603      	mov	r3, r0
 800733e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <find_volume+0x218>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	3334      	adds	r3, #52	; 0x34
 800734a:	3324      	adds	r3, #36	; 0x24
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe fc73 	bl	8005c38 <ld_dword>
 8007352:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007358:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	789b      	ldrb	r3, [r3, #2]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d005      	beq.n	8007378 <find_volume+0x23c>
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	789b      	ldrb	r3, [r3, #2]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d001      	beq.n	8007378 <find_volume+0x23c>
 8007374:	230d      	movs	r3, #13
 8007376:	e15a      	b.n	800762e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	789b      	ldrb	r3, [r3, #2]
 800737c:	461a      	mov	r2, r3
 800737e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007380:	fb02 f303 	mul.w	r3, r2, r3
 8007384:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800738c:	b29a      	uxth	r2, r3
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	895b      	ldrh	r3, [r3, #10]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <find_volume+0x270>
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	895b      	ldrh	r3, [r3, #10]
 800739e:	461a      	mov	r2, r3
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	895b      	ldrh	r3, [r3, #10]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <find_volume+0x274>
 80073ac:	230d      	movs	r3, #13
 80073ae:	e13e      	b.n	800762e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	3334      	adds	r3, #52	; 0x34
 80073b4:	3311      	adds	r3, #17
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fc26 	bl	8005c08 <ld_word>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	891b      	ldrh	r3, [r3, #8]
 80073c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ca:	8992      	ldrh	r2, [r2, #12]
 80073cc:	0952      	lsrs	r2, r2, #5
 80073ce:	b292      	uxth	r2, r2
 80073d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80073d4:	fb02 f201 	mul.w	r2, r2, r1
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <find_volume+0x2a8>
 80073e0:	230d      	movs	r3, #13
 80073e2:	e124      	b.n	800762e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	3334      	adds	r3, #52	; 0x34
 80073e8:	3313      	adds	r3, #19
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fc0c 	bl	8005c08 <ld_word>
 80073f0:	4603      	mov	r3, r0
 80073f2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80073f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <find_volume+0x2cc>
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	3334      	adds	r3, #52	; 0x34
 80073fe:	3320      	adds	r3, #32
 8007400:	4618      	mov	r0, r3
 8007402:	f7fe fc19 	bl	8005c38 <ld_dword>
 8007406:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	3334      	adds	r3, #52	; 0x34
 800740c:	330e      	adds	r3, #14
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fbfa 	bl	8005c08 <ld_word>
 8007414:	4603      	mov	r3, r0
 8007416:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007418:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <find_volume+0x2ec>
 800741e:	230d      	movs	r3, #13
 8007420:	e105      	b.n	800762e <find_volume+0x4f2>
 8007422:	bf00      	nop
 8007424:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007428:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800742a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800742c:	4413      	add	r3, r2
 800742e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007430:	8911      	ldrh	r1, [r2, #8]
 8007432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007434:	8992      	ldrh	r2, [r2, #12]
 8007436:	0952      	lsrs	r2, r2, #5
 8007438:	b292      	uxth	r2, r2
 800743a:	fbb1 f2f2 	udiv	r2, r1, r2
 800743e:	b292      	uxth	r2, r2
 8007440:	4413      	add	r3, r2
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	429a      	cmp	r2, r3
 800744a:	d201      	bcs.n	8007450 <find_volume+0x314>
 800744c:	230d      	movs	r3, #13
 800744e:	e0ee      	b.n	800762e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007458:	8952      	ldrh	r2, [r2, #10]
 800745a:	fbb3 f3f2 	udiv	r3, r3, r2
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <find_volume+0x32e>
 8007466:	230d      	movs	r3, #13
 8007468:	e0e1      	b.n	800762e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800746a:	2303      	movs	r3, #3
 800746c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007476:	4293      	cmp	r3, r2
 8007478:	d802      	bhi.n	8007480 <find_volume+0x344>
 800747a:	2302      	movs	r3, #2
 800747c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007486:	4293      	cmp	r3, r2
 8007488:	d802      	bhi.n	8007490 <find_volume+0x354>
 800748a:	2301      	movs	r3, #1
 800748c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	1c9a      	adds	r2, r3, #2
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800749c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800749e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a2:	441a      	add	r2, r3
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80074a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	441a      	add	r2, r3
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80074b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d11e      	bne.n	80074f8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	3334      	adds	r3, #52	; 0x34
 80074be:	332a      	adds	r3, #42	; 0x2a
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fba1 	bl	8005c08 <ld_word>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <find_volume+0x394>
 80074cc:	230d      	movs	r3, #13
 80074ce:	e0ae      	b.n	800762e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	891b      	ldrh	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <find_volume+0x3a0>
 80074d8:	230d      	movs	r3, #13
 80074da:	e0a8      	b.n	800762e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	3334      	adds	r3, #52	; 0x34
 80074e0:	332c      	adds	r3, #44	; 0x2c
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fba8 	bl	8005c38 <ld_dword>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	647b      	str	r3, [r7, #68]	; 0x44
 80074f6:	e01f      	b.n	8007538 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	891b      	ldrh	r3, [r3, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <find_volume+0x3c8>
 8007500:	230d      	movs	r3, #13
 8007502:	e094      	b.n	800762e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750a:	441a      	add	r2, r3
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007514:	2b02      	cmp	r3, #2
 8007516:	d103      	bne.n	8007520 <find_volume+0x3e4>
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	e00a      	b.n	8007536 <find_volume+0x3fa>
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	4613      	mov	r3, r2
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	4413      	add	r3, r2
 800752a:	085a      	lsrs	r2, r3, #1
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007536:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	899b      	ldrh	r3, [r3, #12]
 8007540:	4619      	mov	r1, r3
 8007542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007544:	440b      	add	r3, r1
 8007546:	3b01      	subs	r3, #1
 8007548:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800754a:	8989      	ldrh	r1, [r1, #12]
 800754c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007550:	429a      	cmp	r2, r3
 8007552:	d201      	bcs.n	8007558 <find_volume+0x41c>
 8007554:	230d      	movs	r3, #13
 8007556:	e06a      	b.n	800762e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	615a      	str	r2, [r3, #20]
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	695a      	ldr	r2, [r3, #20]
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	2280      	movs	r2, #128	; 0x80
 800756c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800756e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007572:	2b03      	cmp	r3, #3
 8007574:	d149      	bne.n	800760a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	3334      	adds	r3, #52	; 0x34
 800757a:	3330      	adds	r3, #48	; 0x30
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fb43 	bl	8005c08 <ld_word>
 8007582:	4603      	mov	r3, r0
 8007584:	2b01      	cmp	r3, #1
 8007586:	d140      	bne.n	800760a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758a:	3301      	adds	r3, #1
 800758c:	4619      	mov	r1, r3
 800758e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007590:	f7fe fdea 	bl	8006168 <move_window>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d137      	bne.n	800760a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	2200      	movs	r2, #0
 800759e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	3334      	adds	r3, #52	; 0x34
 80075a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fb2d 	bl	8005c08 <ld_word>
 80075ae:	4603      	mov	r3, r0
 80075b0:	461a      	mov	r2, r3
 80075b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d127      	bne.n	800760a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	3334      	adds	r3, #52	; 0x34
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fb3a 	bl	8005c38 <ld_dword>
 80075c4:	4602      	mov	r2, r0
 80075c6:	4b1c      	ldr	r3, [pc, #112]	; (8007638 <find_volume+0x4fc>)
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d11e      	bne.n	800760a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	3334      	adds	r3, #52	; 0x34
 80075d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fb2f 	bl	8005c38 <ld_dword>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b17      	ldr	r3, [pc, #92]	; (800763c <find_volume+0x500>)
 80075de:	429a      	cmp	r2, r3
 80075e0:	d113      	bne.n	800760a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	3334      	adds	r3, #52	; 0x34
 80075e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fb24 	bl	8005c38 <ld_dword>
 80075f0:	4602      	mov	r2, r0
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	3334      	adds	r3, #52	; 0x34
 80075fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fb1a 	bl	8005c38 <ld_dword>
 8007604:	4602      	mov	r2, r0
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007610:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <find_volume+0x504>)
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	3301      	adds	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <find_volume+0x504>)
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	4b08      	ldr	r3, [pc, #32]	; (8007640 <find_volume+0x504>)
 8007620:	881a      	ldrh	r2, [r3, #0]
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007626:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007628:	f7fe fd36 	bl	8006098 <clear_lock>
#endif
	return FR_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3758      	adds	r7, #88	; 0x58
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	41615252 	.word	0x41615252
 800763c:	61417272 	.word	0x61417272
 8007640:	20000208 	.word	0x20000208

08007644 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800764e:	2309      	movs	r3, #9
 8007650:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01c      	beq.n	8007692 <validate+0x4e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d018      	beq.n	8007692 <validate+0x4e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d013      	beq.n	8007692 <validate+0x4e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	889a      	ldrh	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	88db      	ldrh	r3, [r3, #6]
 8007674:	429a      	cmp	r2, r3
 8007676:	d10c      	bne.n	8007692 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fa24 	bl	8005acc <disk_status>
 8007684:	4603      	mov	r3, r0
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <validate+0x4e>
			res = FR_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <validate+0x5a>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	e000      	b.n	80076a0 <validate+0x5c>
 800769e:	2300      	movs	r3, #0
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	6013      	str	r3, [r2, #0]
	return res;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80076c2:	f107 0310 	add.w	r3, r7, #16
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fc9e 	bl	8007008 <get_ldnumber>
 80076cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da01      	bge.n	80076d8 <f_mount+0x28>
 80076d4:	230b      	movs	r3, #11
 80076d6:	e02b      	b.n	8007730 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <f_mount+0x88>)
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80076e8:	69b8      	ldr	r0, [r7, #24]
 80076ea:	f7fe fcd5 	bl	8006098 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	490d      	ldr	r1, [pc, #52]	; (8007738 <f_mount+0x88>)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <f_mount+0x66>
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d001      	beq.n	800771a <f_mount+0x6a>
 8007716:	2300      	movs	r3, #0
 8007718:	e00a      	b.n	8007730 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800771a:	f107 010c 	add.w	r1, r7, #12
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	2200      	movs	r2, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fd09 	bl	800713c <find_volume>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800772e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3720      	adds	r7, #32
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000204 	.word	0x20000204

0800773c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b098      	sub	sp, #96	; 0x60
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <f_open+0x18>
 8007750:	2309      	movs	r3, #9
 8007752:	e1bb      	b.n	8007acc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800775a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800775c:	79fa      	ldrb	r2, [r7, #7]
 800775e:	f107 0110 	add.w	r1, r7, #16
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fce8 	bl	800713c <find_volume>
 800776c:	4603      	mov	r3, r0
 800776e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 819f 	bne.w	8007aba <f_open+0x37e>
		dj.obj.fs = fs;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	f107 0314 	add.w	r3, r7, #20
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fbc7 	bl	8006f1c <follow_path>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11a      	bne.n	80077d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800779c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077a0:	b25b      	sxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da03      	bge.n	80077ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80077a6:	2306      	movs	r3, #6
 80077a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80077ac:	e011      	b.n	80077d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	f023 0301 	bic.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	f107 0314 	add.w	r3, r7, #20
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fb1e 	bl	8005e08 <chk_lock>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	f003 031c 	and.w	r3, r3, #28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d07f      	beq.n	80078dc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80077dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d017      	beq.n	8007814 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80077e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d10e      	bne.n	800780a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80077ec:	f7fe fb68 	bl	8005ec0 <enq_lock>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d006      	beq.n	8007804 <f_open+0xc8>
 80077f6:	f107 0314 	add.w	r3, r7, #20
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fac7 	bl	8006d8e <dir_register>
 8007800:	4603      	mov	r3, r0
 8007802:	e000      	b.n	8007806 <f_open+0xca>
 8007804:	2312      	movs	r3, #18
 8007806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	f043 0308 	orr.w	r3, r3, #8
 8007810:	71fb      	strb	r3, [r7, #7]
 8007812:	e010      	b.n	8007836 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007814:	7ebb      	ldrb	r3, [r7, #26]
 8007816:	f003 0311 	and.w	r3, r3, #17
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <f_open+0xea>
					res = FR_DENIED;
 800781e:	2307      	movs	r3, #7
 8007820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007824:	e007      	b.n	8007836 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <f_open+0xfa>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800783a:	2b00      	cmp	r3, #0
 800783c:	d168      	bne.n	8007910 <f_open+0x1d4>
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d063      	beq.n	8007910 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007848:	f7fd ff22 	bl	8005690 <get_fattime>
 800784c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	330e      	adds	r3, #14
 8007852:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fa2d 	bl	8005cb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	3316      	adds	r3, #22
 800785e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007860:	4618      	mov	r0, r3
 8007862:	f7fe fa27 	bl	8005cb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	330b      	adds	r3, #11
 800786a:	2220      	movs	r2, #32
 800786c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007872:	4611      	mov	r1, r2
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff f9f6 	bl	8006c66 <ld_clust>
 800787a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007880:	2200      	movs	r2, #0
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff fa0e 	bl	8006ca4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	331c      	adds	r3, #28
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fa10 	bl	8005cb4 <st_dword>
					fs->wflag = 1;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2201      	movs	r2, #1
 8007898:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800789a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d037      	beq.n	8007910 <f_open+0x1d4>
						dw = fs->winsect;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	2200      	movs	r2, #0
 80078ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fefe 	bl	80066b0 <remove_chain>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80078ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d126      	bne.n	8007910 <f_open+0x1d4>
							res = move_window(fs, dw);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fc4e 	bl	8006168 <move_window>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078d6:	3a01      	subs	r2, #1
 80078d8:	611a      	str	r2, [r3, #16]
 80078da:	e019      	b.n	8007910 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80078dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d115      	bne.n	8007910 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80078e4:	7ebb      	ldrb	r3, [r7, #26]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80078ee:	2304      	movs	r3, #4
 80078f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80078f4:	e00c      	b.n	8007910 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <f_open+0x1d4>
 8007900:	7ebb      	ldrb	r3, [r7, #26]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <f_open+0x1d4>
						res = FR_DENIED;
 800790a:	2307      	movs	r3, #7
 800790c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007914:	2b00      	cmp	r3, #0
 8007916:	d128      	bne.n	800796a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007928:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007938:	79fb      	ldrb	r3, [r7, #7]
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	bf14      	ite	ne
 8007942:	2301      	movne	r3, #1
 8007944:	2300      	moveq	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fad7 	bl	8005f04 <inc_lock>
 8007956:	4602      	mov	r2, r0
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d102      	bne.n	800796a <f_open+0x22e>
 8007964:	2302      	movs	r3, #2
 8007966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800796a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 80a3 	bne.w	8007aba <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff f973 	bl	8006c66 <ld_clust>
 8007980:	4602      	mov	r2, r0
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007988:	331c      	adds	r3, #28
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe f954 	bl	8005c38 <ld_dword>
 8007990:	4602      	mov	r2, r0
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	88da      	ldrh	r2, [r3, #6]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	79fa      	ldrb	r2, [r7, #7]
 80079ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3330      	adds	r3, #48	; 0x30
 80079c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079ca:	2100      	movs	r1, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe f9be 	bl	8005d4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d06e      	beq.n	8007aba <f_open+0x37e>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d06a      	beq.n	8007aba <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	895b      	ldrh	r3, [r3, #10]
 80079f0:	461a      	mov	r2, r3
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	899b      	ldrh	r3, [r3, #12]
 80079f6:	fb03 f302 	mul.w	r3, r3, r2
 80079fa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	657b      	str	r3, [r7, #84]	; 0x54
 8007a08:	e016      	b.n	8007a38 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fc67 	bl	80062e2 <get_fat>
 8007a14:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d802      	bhi.n	8007a22 <f_open+0x2e6>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d102      	bne.n	8007a30 <f_open+0x2f4>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	657b      	str	r3, [r7, #84]	; 0x54
 8007a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <f_open+0x30c>
 8007a40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d8e0      	bhi.n	8007a0a <f_open+0x2ce>
				}
				fp->clust = clst;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d131      	bne.n	8007aba <f_open+0x37e>
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	899b      	ldrh	r3, [r3, #12]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a62:	fb02 f201 	mul.w	r2, r2, r1
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d026      	beq.n	8007aba <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fc17 	bl	80062a4 <clust2sect>
 8007a76:	6478      	str	r0, [r7, #68]	; 0x44
 8007a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d103      	bne.n	8007a86 <f_open+0x34a>
						res = FR_INT_ERR;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a84:	e019      	b.n	8007aba <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	899b      	ldrh	r3, [r3, #12]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	7858      	ldrb	r0, [r3, #1]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6a1a      	ldr	r2, [r3, #32]
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f7fe f84f 	bl	8005b4c <disk_read>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <f_open+0x37e>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <f_open+0x38c>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3760      	adds	r7, #96	; 0x60
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08c      	sub	sp, #48	; 0x30
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f107 0210 	add.w	r2, r7, #16
 8007af2:	4611      	mov	r1, r2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fda5 	bl	8007644 <validate>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d107      	bne.n	8007b18 <f_write+0x44>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	7d5b      	ldrb	r3, [r3, #21]
 8007b0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <f_write+0x4a>
 8007b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b1c:	e16a      	b.n	8007df4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	7d1b      	ldrb	r3, [r3, #20]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <f_write+0x5a>
 8007b2a:	2307      	movs	r3, #7
 8007b2c:	e162      	b.n	8007df4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	f080 814c 	bcs.w	8007dd8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	43db      	mvns	r3, r3
 8007b46:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007b48:	e146      	b.n	8007dd8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	8992      	ldrh	r2, [r2, #12]
 8007b52:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b56:	fb02 f201 	mul.w	r2, r2, r1
 8007b5a:	1a9b      	subs	r3, r3, r2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 80f1 	bne.w	8007d44 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	8992      	ldrh	r2, [r2, #12]
 8007b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	8952      	ldrh	r2, [r2, #10]
 8007b72:	3a01      	subs	r2, #1
 8007b74:	4013      	ands	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d143      	bne.n	8007c06 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10c      	bne.n	8007ba0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d11a      	bne.n	8007bc8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fe fdef 	bl	800677a <create_chain>
 8007b9c:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b9e:	e013      	b.n	8007bc8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7fe fe7b 	bl	80068aa <clmt_clust>
 8007bb4:	62b8      	str	r0, [r7, #40]	; 0x28
 8007bb6:	e007      	b.n	8007bc8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f7fe fdda 	bl	800677a <create_chain>
 8007bc6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8109 	beq.w	8007de2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d104      	bne.n	8007be0 <f_write+0x10c>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	755a      	strb	r2, [r3, #21]
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e109      	b.n	8007df4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be6:	d104      	bne.n	8007bf2 <f_write+0x11e>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	755a      	strb	r2, [r3, #21]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e100      	b.n	8007df4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bf6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <f_write+0x132>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c04:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	7d1b      	ldrb	r3, [r3, #20]
 8007c0a:	b25b      	sxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	da18      	bge.n	8007c42 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	7858      	ldrb	r0, [r3, #1]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f7fd ffb4 	bl	8005b8c <disk_write>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <f_write+0x160>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	755a      	strb	r2, [r3, #21]
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0df      	b.n	8007df4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	7d1b      	ldrb	r3, [r3, #20]
 8007c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fe fb2a 	bl	80062a4 <clust2sect>
 8007c50:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <f_write+0x18e>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	755a      	strb	r2, [r3, #21]
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e0c8      	b.n	8007df4 <f_write+0x320>
			sect += csect;
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	4413      	add	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	899b      	ldrh	r3, [r3, #12]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c76:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d043      	beq.n	8007d06 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	4413      	add	r3, r2
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	8952      	ldrh	r2, [r2, #10]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d905      	bls.n	8007c98 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	895b      	ldrh	r3, [r3, #10]
 8007c90:	461a      	mov	r2, r3
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	7858      	ldrb	r0, [r3, #1]
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	f7fd ff73 	bl	8005b8c <disk_write>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <f_write+0x1e2>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	755a      	strb	r2, [r3, #21]
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e09e      	b.n	8007df4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	6a3a      	ldr	r2, [r7, #32]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d918      	bls.n	8007cf6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a1a      	ldr	r2, [r3, #32]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	8992      	ldrh	r2, [r2, #12]
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	18d1      	adds	r1, r2, r3
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	899b      	ldrh	r3, [r3, #12]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f7fe f812 	bl	8005d0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	7d1b      	ldrb	r3, [r3, #20]
 8007cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	899b      	ldrh	r3, [r3, #12]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007d04:	e04b      	b.n	8007d9e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d016      	beq.n	8007d3e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	699a      	ldr	r2, [r3, #24]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d210      	bcs.n	8007d3e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	7858      	ldrb	r0, [r3, #1]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d26:	2301      	movs	r3, #1
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	f7fd ff0f 	bl	8005b4c <disk_read>
 8007d2e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	755a      	strb	r2, [r3, #21]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e05a      	b.n	8007df4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	899b      	ldrh	r3, [r3, #12]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	8992      	ldrh	r2, [r2, #12]
 8007d52:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d56:	fb02 f201 	mul.w	r2, r2, r1
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	1ac3      	subs	r3, r0, r3
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d901      	bls.n	8007d6c <f_write+0x298>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	8992      	ldrh	r2, [r2, #12]
 8007d7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d7e:	fb02 f200 	mul.w	r2, r2, r0
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	440b      	add	r3, r1
 8007d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d88:	69f9      	ldr	r1, [r7, #28]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fd ffbe 	bl	8005d0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	7d1b      	ldrb	r3, [r3, #20]
 8007d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	4413      	add	r3, r2
 8007da4:	61fb      	str	r3, [r7, #28]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	441a      	add	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	619a      	str	r2, [r3, #24]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	bf38      	it	cc
 8007dbe:	461a      	movcc	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	60da      	str	r2, [r3, #12]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	441a      	add	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f47f aeb5 	bne.w	8007b4a <f_write+0x76>
 8007de0:	e000      	b.n	8007de4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007de2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	7d1b      	ldrb	r3, [r3, #20]
 8007de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3730      	adds	r7, #48	; 0x30
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f107 0208 	add.w	r2, r7, #8
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff fc19 	bl	8007644 <validate>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d168      	bne.n	8007eee <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7d1b      	ldrb	r3, [r3, #20]
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d062      	beq.n	8007eee <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7d1b      	ldrb	r3, [r3, #20]
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da15      	bge.n	8007e5e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	7858      	ldrb	r0, [r3, #1]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	2301      	movs	r3, #1
 8007e42:	f7fd fea3 	bl	8005b8c <disk_write>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <f_sync+0x54>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e04f      	b.n	8007ef0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	7d1b      	ldrb	r3, [r3, #20]
 8007e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e5e:	f7fd fc17 	bl	8005690 <get_fattime>
 8007e62:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f7fe f97b 	bl	8006168 <move_window>
 8007e72:	4603      	mov	r3, r0
 8007e74:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d138      	bne.n	8007eee <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	330b      	adds	r3, #11
 8007e86:	781a      	ldrb	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	330b      	adds	r3, #11
 8007e8c:	f042 0220 	orr.w	r2, r2, #32
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	f7fe ff00 	bl	8006ca4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f103 021c 	add.w	r2, r3, #28
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7fd feff 	bl	8005cb4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3316      	adds	r3, #22
 8007eba:	6939      	ldr	r1, [r7, #16]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fd fef9 	bl	8005cb4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3312      	adds	r3, #18
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fd fed8 	bl	8005c7e <st_word>
					fs->wflag = 1;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe f974 	bl	80061c4 <sync_fs>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7d1b      	ldrb	r3, [r3, #20]
 8007ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff ff7b 	bl	8007dfc <f_sync>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d118      	bne.n	8007f42 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f107 0208 	add.w	r2, r7, #8
 8007f16:	4611      	mov	r1, r2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff fb93 	bl	8007644 <validate>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10c      	bne.n	8007f42 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe f877 	bl	8006020 <dec_lock>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d102      	bne.n	8007f42 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007f62:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f64:	7a5b      	ldrb	r3, [r3, #9]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d131      	bne.n	8007fd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007f6c:	4b1c      	ldr	r3, [pc, #112]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f6e:	7a5b      	ldrb	r3, [r3, #9]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f76:	2100      	movs	r1, #0
 8007f78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007f7a:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f7c:	7a5b      	ldrb	r3, [r3, #9]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f8c:	7a5b      	ldrb	r3, [r3, #9]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f94:	4413      	add	r3, r2
 8007f96:	79fa      	ldrb	r2, [r7, #7]
 8007f98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f9a:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f9c:	7a5b      	ldrb	r3, [r3, #9]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	b2d1      	uxtb	r1, r2
 8007fa4:	4a0e      	ldr	r2, [pc, #56]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007fa6:	7251      	strb	r1, [r2, #9]
 8007fa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007faa:	7dbb      	ldrb	r3, [r7, #22]
 8007fac:	3330      	adds	r3, #48	; 0x30
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	223a      	movs	r2, #58	; 0x3a
 8007fba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3302      	adds	r3, #2
 8007fc0:	222f      	movs	r2, #47	; 0x2f
 8007fc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3303      	adds	r3, #3
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	2000022c 	.word	0x2000022c

08007fe4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007fee:	2200      	movs	r2, #0
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff ffaa 	bl	8007f4c <FATFS_LinkDriverEx>
 8007ff8:	4603      	mov	r3, r0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8008018:	4b15      	ldr	r3, [pc, #84]	; (8008070 <FATFS_UnLinkDriverEx+0x6c>)
 800801a:	7a5b      	ldrb	r3, [r3, #9]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01e      	beq.n	8008060 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	3b30      	subs	r3, #48	; 0x30
 8008028:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	4a10      	ldr	r2, [pc, #64]	; (8008070 <FATFS_UnLinkDriverEx+0x6c>)
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d013      	beq.n	8008060 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	4a0d      	ldr	r2, [pc, #52]	; (8008070 <FATFS_UnLinkDriverEx+0x6c>)
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	2200      	movs	r2, #0
 8008042:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	4a0a      	ldr	r2, [pc, #40]	; (8008070 <FATFS_UnLinkDriverEx+0x6c>)
 8008048:	4413      	add	r3, r2
 800804a:	2200      	movs	r2, #0
 800804c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <FATFS_UnLinkDriverEx+0x6c>)
 8008050:	7a5b      	ldrb	r3, [r3, #9]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <FATFS_UnLinkDriverEx+0x6c>)
 800805a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2000022c 	.word	0x2000022c

08008074 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800807c:	2100      	movs	r1, #0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff ffc0 	bl	8008004 <FATFS_UnLinkDriverEx>
 8008084:	4603      	mov	r3, r0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	; (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	2000000c 	.word	0x2000000c

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4e0d      	ldr	r6, [pc, #52]	; (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	; (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1ba4      	subs	r4, r4, r6
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2500      	movs	r5, #0
 80080a8:	42a5      	cmp	r5, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4e0b      	ldr	r6, [pc, #44]	; (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	; (80080e0 <__libc_init_array+0x44>)
 80080b0:	f003 fd58 	bl	800bb64 <_init>
 80080b4:	1ba4      	subs	r4, r4, r6
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2500      	movs	r5, #0
 80080ba:	42a5      	cmp	r5, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080c4:	4798      	blx	r3
 80080c6:	3501      	adds	r5, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080ce:	4798      	blx	r3
 80080d0:	3501      	adds	r5, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	0800bf48 	.word	0x0800bf48
 80080d8:	0800bf48 	.word	0x0800bf48
 80080dc:	0800bf48 	.word	0x0800bf48
 80080e0:	0800bf4c 	.word	0x0800bf4c

080080e4 <memset>:
 80080e4:	4402      	add	r2, r0
 80080e6:	4603      	mov	r3, r0
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d100      	bne.n	80080ee <memset+0xa>
 80080ec:	4770      	bx	lr
 80080ee:	f803 1b01 	strb.w	r1, [r3], #1
 80080f2:	e7f9      	b.n	80080e8 <memset+0x4>

080080f4 <__cvt>:
 80080f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080f8:	ec55 4b10 	vmov	r4, r5, d0
 80080fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80080fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008102:	2d00      	cmp	r5, #0
 8008104:	460e      	mov	r6, r1
 8008106:	4691      	mov	r9, r2
 8008108:	4619      	mov	r1, r3
 800810a:	bfb8      	it	lt
 800810c:	4622      	movlt	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	f027 0720 	bic.w	r7, r7, #32
 8008114:	bfbb      	ittet	lt
 8008116:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800811a:	461d      	movlt	r5, r3
 800811c:	2300      	movge	r3, #0
 800811e:	232d      	movlt	r3, #45	; 0x2d
 8008120:	bfb8      	it	lt
 8008122:	4614      	movlt	r4, r2
 8008124:	2f46      	cmp	r7, #70	; 0x46
 8008126:	700b      	strb	r3, [r1, #0]
 8008128:	d004      	beq.n	8008134 <__cvt+0x40>
 800812a:	2f45      	cmp	r7, #69	; 0x45
 800812c:	d100      	bne.n	8008130 <__cvt+0x3c>
 800812e:	3601      	adds	r6, #1
 8008130:	2102      	movs	r1, #2
 8008132:	e000      	b.n	8008136 <__cvt+0x42>
 8008134:	2103      	movs	r1, #3
 8008136:	ab03      	add	r3, sp, #12
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	ab02      	add	r3, sp, #8
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	4632      	mov	r2, r6
 8008140:	4653      	mov	r3, sl
 8008142:	ec45 4b10 	vmov	d0, r4, r5
 8008146:	f001 fd77 	bl	8009c38 <_dtoa_r>
 800814a:	2f47      	cmp	r7, #71	; 0x47
 800814c:	4680      	mov	r8, r0
 800814e:	d102      	bne.n	8008156 <__cvt+0x62>
 8008150:	f019 0f01 	tst.w	r9, #1
 8008154:	d026      	beq.n	80081a4 <__cvt+0xb0>
 8008156:	2f46      	cmp	r7, #70	; 0x46
 8008158:	eb08 0906 	add.w	r9, r8, r6
 800815c:	d111      	bne.n	8008182 <__cvt+0x8e>
 800815e:	f898 3000 	ldrb.w	r3, [r8]
 8008162:	2b30      	cmp	r3, #48	; 0x30
 8008164:	d10a      	bne.n	800817c <__cvt+0x88>
 8008166:	2200      	movs	r2, #0
 8008168:	2300      	movs	r3, #0
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f8 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8008172:	b918      	cbnz	r0, 800817c <__cvt+0x88>
 8008174:	f1c6 0601 	rsb	r6, r6, #1
 8008178:	f8ca 6000 	str.w	r6, [sl]
 800817c:	f8da 3000 	ldr.w	r3, [sl]
 8008180:	4499      	add	r9, r3
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800818e:	b938      	cbnz	r0, 80081a0 <__cvt+0xac>
 8008190:	2230      	movs	r2, #48	; 0x30
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	454b      	cmp	r3, r9
 8008196:	d205      	bcs.n	80081a4 <__cvt+0xb0>
 8008198:	1c59      	adds	r1, r3, #1
 800819a:	9103      	str	r1, [sp, #12]
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	e7f8      	b.n	8008192 <__cvt+0x9e>
 80081a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081a8:	eba3 0308 	sub.w	r3, r3, r8
 80081ac:	4640      	mov	r0, r8
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	b004      	add	sp, #16
 80081b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080081b6 <__exponent>:
 80081b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081b8:	2900      	cmp	r1, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	bfba      	itte	lt
 80081be:	4249      	neglt	r1, r1
 80081c0:	232d      	movlt	r3, #45	; 0x2d
 80081c2:	232b      	movge	r3, #43	; 0x2b
 80081c4:	2909      	cmp	r1, #9
 80081c6:	f804 2b02 	strb.w	r2, [r4], #2
 80081ca:	7043      	strb	r3, [r0, #1]
 80081cc:	dd20      	ble.n	8008210 <__exponent+0x5a>
 80081ce:	f10d 0307 	add.w	r3, sp, #7
 80081d2:	461f      	mov	r7, r3
 80081d4:	260a      	movs	r6, #10
 80081d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80081da:	fb06 1115 	mls	r1, r6, r5, r1
 80081de:	3130      	adds	r1, #48	; 0x30
 80081e0:	2d09      	cmp	r5, #9
 80081e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80081e6:	f103 32ff 	add.w	r2, r3, #4294967295
 80081ea:	4629      	mov	r1, r5
 80081ec:	dc09      	bgt.n	8008202 <__exponent+0x4c>
 80081ee:	3130      	adds	r1, #48	; 0x30
 80081f0:	3b02      	subs	r3, #2
 80081f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80081f6:	42bb      	cmp	r3, r7
 80081f8:	4622      	mov	r2, r4
 80081fa:	d304      	bcc.n	8008206 <__exponent+0x50>
 80081fc:	1a10      	subs	r0, r2, r0
 80081fe:	b003      	add	sp, #12
 8008200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008202:	4613      	mov	r3, r2
 8008204:	e7e7      	b.n	80081d6 <__exponent+0x20>
 8008206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800820a:	f804 2b01 	strb.w	r2, [r4], #1
 800820e:	e7f2      	b.n	80081f6 <__exponent+0x40>
 8008210:	2330      	movs	r3, #48	; 0x30
 8008212:	4419      	add	r1, r3
 8008214:	7083      	strb	r3, [r0, #2]
 8008216:	1d02      	adds	r2, r0, #4
 8008218:	70c1      	strb	r1, [r0, #3]
 800821a:	e7ef      	b.n	80081fc <__exponent+0x46>

0800821c <_printf_float>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	b08d      	sub	sp, #52	; 0x34
 8008222:	460c      	mov	r4, r1
 8008224:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008228:	4616      	mov	r6, r2
 800822a:	461f      	mov	r7, r3
 800822c:	4605      	mov	r5, r0
 800822e:	f002 fde7 	bl	800ae00 <_localeconv_r>
 8008232:	6803      	ldr	r3, [r0, #0]
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	4618      	mov	r0, r3
 8008238:	f7f7 ffca 	bl	80001d0 <strlen>
 800823c:	2300      	movs	r3, #0
 800823e:	930a      	str	r3, [sp, #40]	; 0x28
 8008240:	f8d8 3000 	ldr.w	r3, [r8]
 8008244:	9005      	str	r0, [sp, #20]
 8008246:	3307      	adds	r3, #7
 8008248:	f023 0307 	bic.w	r3, r3, #7
 800824c:	f103 0208 	add.w	r2, r3, #8
 8008250:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008254:	f8d4 b000 	ldr.w	fp, [r4]
 8008258:	f8c8 2000 	str.w	r2, [r8]
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008264:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008268:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008272:	f04f 32ff 	mov.w	r2, #4294967295
 8008276:	4ba7      	ldr	r3, [pc, #668]	; (8008514 <_printf_float+0x2f8>)
 8008278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800827c:	f7f8 fc56 	bl	8000b2c <__aeabi_dcmpun>
 8008280:	bb70      	cbnz	r0, 80082e0 <_printf_float+0xc4>
 8008282:	f04f 32ff 	mov.w	r2, #4294967295
 8008286:	4ba3      	ldr	r3, [pc, #652]	; (8008514 <_printf_float+0x2f8>)
 8008288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800828c:	f7f8 fc30 	bl	8000af0 <__aeabi_dcmple>
 8008290:	bb30      	cbnz	r0, 80082e0 <_printf_float+0xc4>
 8008292:	2200      	movs	r2, #0
 8008294:	2300      	movs	r3, #0
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	f7f8 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800829e:	b110      	cbz	r0, 80082a6 <_printf_float+0x8a>
 80082a0:	232d      	movs	r3, #45	; 0x2d
 80082a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a6:	4a9c      	ldr	r2, [pc, #624]	; (8008518 <_printf_float+0x2fc>)
 80082a8:	4b9c      	ldr	r3, [pc, #624]	; (800851c <_printf_float+0x300>)
 80082aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80082ae:	bf8c      	ite	hi
 80082b0:	4690      	movhi	r8, r2
 80082b2:	4698      	movls	r8, r3
 80082b4:	2303      	movs	r3, #3
 80082b6:	f02b 0204 	bic.w	r2, fp, #4
 80082ba:	6123      	str	r3, [r4, #16]
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	f04f 0900 	mov.w	r9, #0
 80082c2:	9700      	str	r7, [sp, #0]
 80082c4:	4633      	mov	r3, r6
 80082c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082c8:	4621      	mov	r1, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 f9e6 	bl	800869c <_printf_common>
 80082d0:	3001      	adds	r0, #1
 80082d2:	f040 808d 	bne.w	80083f0 <_printf_float+0x1d4>
 80082d6:	f04f 30ff 	mov.w	r0, #4294967295
 80082da:	b00d      	add	sp, #52	; 0x34
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	4642      	mov	r2, r8
 80082e2:	464b      	mov	r3, r9
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	f7f8 fc20 	bl	8000b2c <__aeabi_dcmpun>
 80082ec:	b110      	cbz	r0, 80082f4 <_printf_float+0xd8>
 80082ee:	4a8c      	ldr	r2, [pc, #560]	; (8008520 <_printf_float+0x304>)
 80082f0:	4b8c      	ldr	r3, [pc, #560]	; (8008524 <_printf_float+0x308>)
 80082f2:	e7da      	b.n	80082aa <_printf_float+0x8e>
 80082f4:	6861      	ldr	r1, [r4, #4]
 80082f6:	1c4b      	adds	r3, r1, #1
 80082f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80082fc:	a80a      	add	r0, sp, #40	; 0x28
 80082fe:	d13e      	bne.n	800837e <_printf_float+0x162>
 8008300:	2306      	movs	r3, #6
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	2300      	movs	r3, #0
 8008306:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800830a:	ab09      	add	r3, sp, #36	; 0x24
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	ec49 8b10 	vmov	d0, r8, r9
 8008312:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008316:	6022      	str	r2, [r4, #0]
 8008318:	f8cd a004 	str.w	sl, [sp, #4]
 800831c:	6861      	ldr	r1, [r4, #4]
 800831e:	4628      	mov	r0, r5
 8008320:	f7ff fee8 	bl	80080f4 <__cvt>
 8008324:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008328:	2b47      	cmp	r3, #71	; 0x47
 800832a:	4680      	mov	r8, r0
 800832c:	d109      	bne.n	8008342 <_printf_float+0x126>
 800832e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008330:	1cd8      	adds	r0, r3, #3
 8008332:	db02      	blt.n	800833a <_printf_float+0x11e>
 8008334:	6862      	ldr	r2, [r4, #4]
 8008336:	4293      	cmp	r3, r2
 8008338:	dd47      	ble.n	80083ca <_printf_float+0x1ae>
 800833a:	f1aa 0a02 	sub.w	sl, sl, #2
 800833e:	fa5f fa8a 	uxtb.w	sl, sl
 8008342:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008348:	d824      	bhi.n	8008394 <_printf_float+0x178>
 800834a:	3901      	subs	r1, #1
 800834c:	4652      	mov	r2, sl
 800834e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008352:	9109      	str	r1, [sp, #36]	; 0x24
 8008354:	f7ff ff2f 	bl	80081b6 <__exponent>
 8008358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800835a:	1813      	adds	r3, r2, r0
 800835c:	2a01      	cmp	r2, #1
 800835e:	4681      	mov	r9, r0
 8008360:	6123      	str	r3, [r4, #16]
 8008362:	dc02      	bgt.n	800836a <_printf_float+0x14e>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	07d1      	lsls	r1, r2, #31
 8008368:	d501      	bpl.n	800836e <_printf_float+0x152>
 800836a:	3301      	adds	r3, #1
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0a5      	beq.n	80082c2 <_printf_float+0xa6>
 8008376:	232d      	movs	r3, #45	; 0x2d
 8008378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837c:	e7a1      	b.n	80082c2 <_printf_float+0xa6>
 800837e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008382:	f000 8177 	beq.w	8008674 <_printf_float+0x458>
 8008386:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800838a:	d1bb      	bne.n	8008304 <_printf_float+0xe8>
 800838c:	2900      	cmp	r1, #0
 800838e:	d1b9      	bne.n	8008304 <_printf_float+0xe8>
 8008390:	2301      	movs	r3, #1
 8008392:	e7b6      	b.n	8008302 <_printf_float+0xe6>
 8008394:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008398:	d119      	bne.n	80083ce <_printf_float+0x1b2>
 800839a:	2900      	cmp	r1, #0
 800839c:	6863      	ldr	r3, [r4, #4]
 800839e:	dd0c      	ble.n	80083ba <_printf_float+0x19e>
 80083a0:	6121      	str	r1, [r4, #16]
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x18e>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d2      	lsls	r2, r2, #31
 80083a8:	d502      	bpl.n	80083b0 <_printf_float+0x194>
 80083aa:	3301      	adds	r3, #1
 80083ac:	440b      	add	r3, r1
 80083ae:	6123      	str	r3, [r4, #16]
 80083b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80083b4:	f04f 0900 	mov.w	r9, #0
 80083b8:	e7d9      	b.n	800836e <_printf_float+0x152>
 80083ba:	b913      	cbnz	r3, 80083c2 <_printf_float+0x1a6>
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	07d0      	lsls	r0, r2, #31
 80083c0:	d501      	bpl.n	80083c6 <_printf_float+0x1aa>
 80083c2:	3302      	adds	r3, #2
 80083c4:	e7f3      	b.n	80083ae <_printf_float+0x192>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e7f1      	b.n	80083ae <_printf_float+0x192>
 80083ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80083ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80083d2:	4293      	cmp	r3, r2
 80083d4:	db05      	blt.n	80083e2 <_printf_float+0x1c6>
 80083d6:	6822      	ldr	r2, [r4, #0]
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	07d1      	lsls	r1, r2, #31
 80083dc:	d5e8      	bpl.n	80083b0 <_printf_float+0x194>
 80083de:	3301      	adds	r3, #1
 80083e0:	e7e5      	b.n	80083ae <_printf_float+0x192>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bfd4      	ite	le
 80083e6:	f1c3 0302 	rsble	r3, r3, #2
 80083ea:	2301      	movgt	r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	e7de      	b.n	80083ae <_printf_float+0x192>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	055a      	lsls	r2, r3, #21
 80083f4:	d407      	bmi.n	8008406 <_printf_float+0x1ea>
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	4642      	mov	r2, r8
 80083fa:	4631      	mov	r1, r6
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b8      	blx	r7
 8008400:	3001      	adds	r0, #1
 8008402:	d12b      	bne.n	800845c <_printf_float+0x240>
 8008404:	e767      	b.n	80082d6 <_printf_float+0xba>
 8008406:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800840a:	f240 80dc 	bls.w	80085c6 <_printf_float+0x3aa>
 800840e:	2200      	movs	r2, #0
 8008410:	2300      	movs	r3, #0
 8008412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008416:	f7f8 fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800841a:	2800      	cmp	r0, #0
 800841c:	d033      	beq.n	8008486 <_printf_float+0x26a>
 800841e:	2301      	movs	r3, #1
 8008420:	4a41      	ldr	r2, [pc, #260]	; (8008528 <_printf_float+0x30c>)
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	f43f af54 	beq.w	80082d6 <_printf_float+0xba>
 800842e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008432:	429a      	cmp	r2, r3
 8008434:	db02      	blt.n	800843c <_printf_float+0x220>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	07d8      	lsls	r0, r3, #31
 800843a:	d50f      	bpl.n	800845c <_printf_float+0x240>
 800843c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f af45 	beq.w	80082d6 <_printf_float+0xba>
 800844c:	f04f 0800 	mov.w	r8, #0
 8008450:	f104 091a 	add.w	r9, r4, #26
 8008454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008456:	3b01      	subs	r3, #1
 8008458:	4543      	cmp	r3, r8
 800845a:	dc09      	bgt.n	8008470 <_printf_float+0x254>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	079b      	lsls	r3, r3, #30
 8008460:	f100 8103 	bmi.w	800866a <_printf_float+0x44e>
 8008464:	68e0      	ldr	r0, [r4, #12]
 8008466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008468:	4298      	cmp	r0, r3
 800846a:	bfb8      	it	lt
 800846c:	4618      	movlt	r0, r3
 800846e:	e734      	b.n	80082da <_printf_float+0xbe>
 8008470:	2301      	movs	r3, #1
 8008472:	464a      	mov	r2, r9
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	f43f af2b 	beq.w	80082d6 <_printf_float+0xba>
 8008480:	f108 0801 	add.w	r8, r8, #1
 8008484:	e7e6      	b.n	8008454 <_printf_float+0x238>
 8008486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	dc2b      	bgt.n	80084e4 <_printf_float+0x2c8>
 800848c:	2301      	movs	r3, #1
 800848e:	4a26      	ldr	r2, [pc, #152]	; (8008528 <_printf_float+0x30c>)
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f af1d 	beq.w	80082d6 <_printf_float+0xba>
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	b923      	cbnz	r3, 80084aa <_printf_float+0x28e>
 80084a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a2:	b913      	cbnz	r3, 80084aa <_printf_float+0x28e>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	07d9      	lsls	r1, r3, #31
 80084a8:	d5d8      	bpl.n	800845c <_printf_float+0x240>
 80084aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b8      	blx	r7
 80084b4:	3001      	adds	r0, #1
 80084b6:	f43f af0e 	beq.w	80082d6 <_printf_float+0xba>
 80084ba:	f04f 0900 	mov.w	r9, #0
 80084be:	f104 0a1a 	add.w	sl, r4, #26
 80084c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c4:	425b      	negs	r3, r3
 80084c6:	454b      	cmp	r3, r9
 80084c8:	dc01      	bgt.n	80084ce <_printf_float+0x2b2>
 80084ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084cc:	e794      	b.n	80083f8 <_printf_float+0x1dc>
 80084ce:	2301      	movs	r3, #1
 80084d0:	4652      	mov	r2, sl
 80084d2:	4631      	mov	r1, r6
 80084d4:	4628      	mov	r0, r5
 80084d6:	47b8      	blx	r7
 80084d8:	3001      	adds	r0, #1
 80084da:	f43f aefc 	beq.w	80082d6 <_printf_float+0xba>
 80084de:	f109 0901 	add.w	r9, r9, #1
 80084e2:	e7ee      	b.n	80084c2 <_printf_float+0x2a6>
 80084e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084e8:	429a      	cmp	r2, r3
 80084ea:	bfa8      	it	ge
 80084ec:	461a      	movge	r2, r3
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	4691      	mov	r9, r2
 80084f2:	dd07      	ble.n	8008504 <_printf_float+0x2e8>
 80084f4:	4613      	mov	r3, r2
 80084f6:	4631      	mov	r1, r6
 80084f8:	4642      	mov	r2, r8
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f aee9 	beq.w	80082d6 <_printf_float+0xba>
 8008504:	f104 031a 	add.w	r3, r4, #26
 8008508:	f04f 0b00 	mov.w	fp, #0
 800850c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008510:	9306      	str	r3, [sp, #24]
 8008512:	e015      	b.n	8008540 <_printf_float+0x324>
 8008514:	7fefffff 	.word	0x7fefffff
 8008518:	0800bc8c 	.word	0x0800bc8c
 800851c:	0800bc88 	.word	0x0800bc88
 8008520:	0800bc94 	.word	0x0800bc94
 8008524:	0800bc90 	.word	0x0800bc90
 8008528:	0800bc98 	.word	0x0800bc98
 800852c:	2301      	movs	r3, #1
 800852e:	9a06      	ldr	r2, [sp, #24]
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f aecd 	beq.w	80082d6 <_printf_float+0xba>
 800853c:	f10b 0b01 	add.w	fp, fp, #1
 8008540:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008544:	ebaa 0309 	sub.w	r3, sl, r9
 8008548:	455b      	cmp	r3, fp
 800854a:	dcef      	bgt.n	800852c <_printf_float+0x310>
 800854c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008550:	429a      	cmp	r2, r3
 8008552:	44d0      	add	r8, sl
 8008554:	db15      	blt.n	8008582 <_printf_float+0x366>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	07da      	lsls	r2, r3, #31
 800855a:	d412      	bmi.n	8008582 <_printf_float+0x366>
 800855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008560:	eba3 020a 	sub.w	r2, r3, sl
 8008564:	eba3 0a01 	sub.w	sl, r3, r1
 8008568:	4592      	cmp	sl, r2
 800856a:	bfa8      	it	ge
 800856c:	4692      	movge	sl, r2
 800856e:	f1ba 0f00 	cmp.w	sl, #0
 8008572:	dc0e      	bgt.n	8008592 <_printf_float+0x376>
 8008574:	f04f 0800 	mov.w	r8, #0
 8008578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800857c:	f104 091a 	add.w	r9, r4, #26
 8008580:	e019      	b.n	80085b6 <_printf_float+0x39a>
 8008582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	d1e5      	bne.n	800855c <_printf_float+0x340>
 8008590:	e6a1      	b.n	80082d6 <_printf_float+0xba>
 8008592:	4653      	mov	r3, sl
 8008594:	4642      	mov	r2, r8
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d1e9      	bne.n	8008574 <_printf_float+0x358>
 80085a0:	e699      	b.n	80082d6 <_printf_float+0xba>
 80085a2:	2301      	movs	r3, #1
 80085a4:	464a      	mov	r2, r9
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	f43f ae92 	beq.w	80082d6 <_printf_float+0xba>
 80085b2:	f108 0801 	add.w	r8, r8, #1
 80085b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	eba3 030a 	sub.w	r3, r3, sl
 80085c0:	4543      	cmp	r3, r8
 80085c2:	dcee      	bgt.n	80085a2 <_printf_float+0x386>
 80085c4:	e74a      	b.n	800845c <_printf_float+0x240>
 80085c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c8:	2a01      	cmp	r2, #1
 80085ca:	dc01      	bgt.n	80085d0 <_printf_float+0x3b4>
 80085cc:	07db      	lsls	r3, r3, #31
 80085ce:	d53a      	bpl.n	8008646 <_printf_float+0x42a>
 80085d0:	2301      	movs	r3, #1
 80085d2:	4642      	mov	r2, r8
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f ae7b 	beq.w	80082d6 <_printf_float+0xba>
 80085e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e4:	4631      	mov	r1, r6
 80085e6:	4628      	mov	r0, r5
 80085e8:	47b8      	blx	r7
 80085ea:	3001      	adds	r0, #1
 80085ec:	f108 0801 	add.w	r8, r8, #1
 80085f0:	f43f ae71 	beq.w	80082d6 <_printf_float+0xba>
 80085f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f6:	2200      	movs	r2, #0
 80085f8:	f103 3aff 	add.w	sl, r3, #4294967295
 80085fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008600:	2300      	movs	r3, #0
 8008602:	f7f8 fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8008606:	b9c8      	cbnz	r0, 800863c <_printf_float+0x420>
 8008608:	4653      	mov	r3, sl
 800860a:	4642      	mov	r2, r8
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	d10e      	bne.n	8008634 <_printf_float+0x418>
 8008616:	e65e      	b.n	80082d6 <_printf_float+0xba>
 8008618:	2301      	movs	r3, #1
 800861a:	4652      	mov	r2, sl
 800861c:	4631      	mov	r1, r6
 800861e:	4628      	mov	r0, r5
 8008620:	47b8      	blx	r7
 8008622:	3001      	adds	r0, #1
 8008624:	f43f ae57 	beq.w	80082d6 <_printf_float+0xba>
 8008628:	f108 0801 	add.w	r8, r8, #1
 800862c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862e:	3b01      	subs	r3, #1
 8008630:	4543      	cmp	r3, r8
 8008632:	dcf1      	bgt.n	8008618 <_printf_float+0x3fc>
 8008634:	464b      	mov	r3, r9
 8008636:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800863a:	e6de      	b.n	80083fa <_printf_float+0x1de>
 800863c:	f04f 0800 	mov.w	r8, #0
 8008640:	f104 0a1a 	add.w	sl, r4, #26
 8008644:	e7f2      	b.n	800862c <_printf_float+0x410>
 8008646:	2301      	movs	r3, #1
 8008648:	e7df      	b.n	800860a <_printf_float+0x3ee>
 800864a:	2301      	movs	r3, #1
 800864c:	464a      	mov	r2, r9
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	f43f ae3e 	beq.w	80082d6 <_printf_float+0xba>
 800865a:	f108 0801 	add.w	r8, r8, #1
 800865e:	68e3      	ldr	r3, [r4, #12]
 8008660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	4543      	cmp	r3, r8
 8008666:	dcf0      	bgt.n	800864a <_printf_float+0x42e>
 8008668:	e6fc      	b.n	8008464 <_printf_float+0x248>
 800866a:	f04f 0800 	mov.w	r8, #0
 800866e:	f104 0919 	add.w	r9, r4, #25
 8008672:	e7f4      	b.n	800865e <_printf_float+0x442>
 8008674:	2900      	cmp	r1, #0
 8008676:	f43f ae8b 	beq.w	8008390 <_printf_float+0x174>
 800867a:	2300      	movs	r3, #0
 800867c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008680:	ab09      	add	r3, sp, #36	; 0x24
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	ec49 8b10 	vmov	d0, r8, r9
 8008688:	6022      	str	r2, [r4, #0]
 800868a:	f8cd a004 	str.w	sl, [sp, #4]
 800868e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008692:	4628      	mov	r0, r5
 8008694:	f7ff fd2e 	bl	80080f4 <__cvt>
 8008698:	4680      	mov	r8, r0
 800869a:	e648      	b.n	800832e <_printf_float+0x112>

0800869c <_printf_common>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	4691      	mov	r9, r2
 80086a2:	461f      	mov	r7, r3
 80086a4:	688a      	ldr	r2, [r1, #8]
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	bfb8      	it	lt
 80086b0:	4613      	movlt	r3, r2
 80086b2:	f8c9 3000 	str.w	r3, [r9]
 80086b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086ba:	4606      	mov	r6, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	b112      	cbz	r2, 80086c6 <_printf_common+0x2a>
 80086c0:	3301      	adds	r3, #1
 80086c2:	f8c9 3000 	str.w	r3, [r9]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	0699      	lsls	r1, r3, #26
 80086ca:	bf42      	ittt	mi
 80086cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80086d0:	3302      	addmi	r3, #2
 80086d2:	f8c9 3000 	strmi.w	r3, [r9]
 80086d6:	6825      	ldr	r5, [r4, #0]
 80086d8:	f015 0506 	ands.w	r5, r5, #6
 80086dc:	d107      	bne.n	80086ee <_printf_common+0x52>
 80086de:	f104 0a19 	add.w	sl, r4, #25
 80086e2:	68e3      	ldr	r3, [r4, #12]
 80086e4:	f8d9 2000 	ldr.w	r2, [r9]
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	42ab      	cmp	r3, r5
 80086ec:	dc28      	bgt.n	8008740 <_printf_common+0xa4>
 80086ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	3300      	adds	r3, #0
 80086f6:	bf18      	it	ne
 80086f8:	2301      	movne	r3, #1
 80086fa:	0692      	lsls	r2, r2, #26
 80086fc:	d42d      	bmi.n	800875a <_printf_common+0xbe>
 80086fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008702:	4639      	mov	r1, r7
 8008704:	4630      	mov	r0, r6
 8008706:	47c0      	blx	r8
 8008708:	3001      	adds	r0, #1
 800870a:	d020      	beq.n	800874e <_printf_common+0xb2>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	68e5      	ldr	r5, [r4, #12]
 8008710:	f8d9 2000 	ldr.w	r2, [r9]
 8008714:	f003 0306 	and.w	r3, r3, #6
 8008718:	2b04      	cmp	r3, #4
 800871a:	bf08      	it	eq
 800871c:	1aad      	subeq	r5, r5, r2
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	6922      	ldr	r2, [r4, #16]
 8008722:	bf0c      	ite	eq
 8008724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008728:	2500      	movne	r5, #0
 800872a:	4293      	cmp	r3, r2
 800872c:	bfc4      	itt	gt
 800872e:	1a9b      	subgt	r3, r3, r2
 8008730:	18ed      	addgt	r5, r5, r3
 8008732:	f04f 0900 	mov.w	r9, #0
 8008736:	341a      	adds	r4, #26
 8008738:	454d      	cmp	r5, r9
 800873a:	d11a      	bne.n	8008772 <_printf_common+0xd6>
 800873c:	2000      	movs	r0, #0
 800873e:	e008      	b.n	8008752 <_printf_common+0xb6>
 8008740:	2301      	movs	r3, #1
 8008742:	4652      	mov	r2, sl
 8008744:	4639      	mov	r1, r7
 8008746:	4630      	mov	r0, r6
 8008748:	47c0      	blx	r8
 800874a:	3001      	adds	r0, #1
 800874c:	d103      	bne.n	8008756 <_printf_common+0xba>
 800874e:	f04f 30ff 	mov.w	r0, #4294967295
 8008752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008756:	3501      	adds	r5, #1
 8008758:	e7c3      	b.n	80086e2 <_printf_common+0x46>
 800875a:	18e1      	adds	r1, r4, r3
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	2030      	movs	r0, #48	; 0x30
 8008760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008764:	4422      	add	r2, r4
 8008766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800876a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800876e:	3302      	adds	r3, #2
 8008770:	e7c5      	b.n	80086fe <_printf_common+0x62>
 8008772:	2301      	movs	r3, #1
 8008774:	4622      	mov	r2, r4
 8008776:	4639      	mov	r1, r7
 8008778:	4630      	mov	r0, r6
 800877a:	47c0      	blx	r8
 800877c:	3001      	adds	r0, #1
 800877e:	d0e6      	beq.n	800874e <_printf_common+0xb2>
 8008780:	f109 0901 	add.w	r9, r9, #1
 8008784:	e7d8      	b.n	8008738 <_printf_common+0x9c>
	...

08008788 <_printf_i>:
 8008788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800878c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008790:	460c      	mov	r4, r1
 8008792:	7e09      	ldrb	r1, [r1, #24]
 8008794:	b085      	sub	sp, #20
 8008796:	296e      	cmp	r1, #110	; 0x6e
 8008798:	4617      	mov	r7, r2
 800879a:	4606      	mov	r6, r0
 800879c:	4698      	mov	r8, r3
 800879e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087a0:	f000 80b3 	beq.w	800890a <_printf_i+0x182>
 80087a4:	d822      	bhi.n	80087ec <_printf_i+0x64>
 80087a6:	2963      	cmp	r1, #99	; 0x63
 80087a8:	d036      	beq.n	8008818 <_printf_i+0x90>
 80087aa:	d80a      	bhi.n	80087c2 <_printf_i+0x3a>
 80087ac:	2900      	cmp	r1, #0
 80087ae:	f000 80b9 	beq.w	8008924 <_printf_i+0x19c>
 80087b2:	2958      	cmp	r1, #88	; 0x58
 80087b4:	f000 8083 	beq.w	80088be <_printf_i+0x136>
 80087b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80087c0:	e032      	b.n	8008828 <_printf_i+0xa0>
 80087c2:	2964      	cmp	r1, #100	; 0x64
 80087c4:	d001      	beq.n	80087ca <_printf_i+0x42>
 80087c6:	2969      	cmp	r1, #105	; 0x69
 80087c8:	d1f6      	bne.n	80087b8 <_printf_i+0x30>
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	6813      	ldr	r3, [r2, #0]
 80087ce:	0605      	lsls	r5, r0, #24
 80087d0:	f103 0104 	add.w	r1, r3, #4
 80087d4:	d52a      	bpl.n	800882c <_printf_i+0xa4>
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6011      	str	r1, [r2, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	da03      	bge.n	80087e6 <_printf_i+0x5e>
 80087de:	222d      	movs	r2, #45	; 0x2d
 80087e0:	425b      	negs	r3, r3
 80087e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80087e6:	486f      	ldr	r0, [pc, #444]	; (80089a4 <_printf_i+0x21c>)
 80087e8:	220a      	movs	r2, #10
 80087ea:	e039      	b.n	8008860 <_printf_i+0xd8>
 80087ec:	2973      	cmp	r1, #115	; 0x73
 80087ee:	f000 809d 	beq.w	800892c <_printf_i+0x1a4>
 80087f2:	d808      	bhi.n	8008806 <_printf_i+0x7e>
 80087f4:	296f      	cmp	r1, #111	; 0x6f
 80087f6:	d020      	beq.n	800883a <_printf_i+0xb2>
 80087f8:	2970      	cmp	r1, #112	; 0x70
 80087fa:	d1dd      	bne.n	80087b8 <_printf_i+0x30>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	f043 0320 	orr.w	r3, r3, #32
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	e003      	b.n	800880e <_printf_i+0x86>
 8008806:	2975      	cmp	r1, #117	; 0x75
 8008808:	d017      	beq.n	800883a <_printf_i+0xb2>
 800880a:	2978      	cmp	r1, #120	; 0x78
 800880c:	d1d4      	bne.n	80087b8 <_printf_i+0x30>
 800880e:	2378      	movs	r3, #120	; 0x78
 8008810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008814:	4864      	ldr	r0, [pc, #400]	; (80089a8 <_printf_i+0x220>)
 8008816:	e055      	b.n	80088c4 <_printf_i+0x13c>
 8008818:	6813      	ldr	r3, [r2, #0]
 800881a:	1d19      	adds	r1, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6011      	str	r1, [r2, #0]
 8008820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008828:	2301      	movs	r3, #1
 800882a:	e08c      	b.n	8008946 <_printf_i+0x1be>
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6011      	str	r1, [r2, #0]
 8008830:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008834:	bf18      	it	ne
 8008836:	b21b      	sxthne	r3, r3
 8008838:	e7cf      	b.n	80087da <_printf_i+0x52>
 800883a:	6813      	ldr	r3, [r2, #0]
 800883c:	6825      	ldr	r5, [r4, #0]
 800883e:	1d18      	adds	r0, r3, #4
 8008840:	6010      	str	r0, [r2, #0]
 8008842:	0628      	lsls	r0, r5, #24
 8008844:	d501      	bpl.n	800884a <_printf_i+0xc2>
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	e002      	b.n	8008850 <_printf_i+0xc8>
 800884a:	0668      	lsls	r0, r5, #25
 800884c:	d5fb      	bpl.n	8008846 <_printf_i+0xbe>
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	4854      	ldr	r0, [pc, #336]	; (80089a4 <_printf_i+0x21c>)
 8008852:	296f      	cmp	r1, #111	; 0x6f
 8008854:	bf14      	ite	ne
 8008856:	220a      	movne	r2, #10
 8008858:	2208      	moveq	r2, #8
 800885a:	2100      	movs	r1, #0
 800885c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008860:	6865      	ldr	r5, [r4, #4]
 8008862:	60a5      	str	r5, [r4, #8]
 8008864:	2d00      	cmp	r5, #0
 8008866:	f2c0 8095 	blt.w	8008994 <_printf_i+0x20c>
 800886a:	6821      	ldr	r1, [r4, #0]
 800886c:	f021 0104 	bic.w	r1, r1, #4
 8008870:	6021      	str	r1, [r4, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d13d      	bne.n	80088f2 <_printf_i+0x16a>
 8008876:	2d00      	cmp	r5, #0
 8008878:	f040 808e 	bne.w	8008998 <_printf_i+0x210>
 800887c:	4665      	mov	r5, ip
 800887e:	2a08      	cmp	r2, #8
 8008880:	d10b      	bne.n	800889a <_printf_i+0x112>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	07db      	lsls	r3, r3, #31
 8008886:	d508      	bpl.n	800889a <_printf_i+0x112>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	6862      	ldr	r2, [r4, #4]
 800888c:	429a      	cmp	r2, r3
 800888e:	bfde      	ittt	le
 8008890:	2330      	movle	r3, #48	; 0x30
 8008892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800889a:	ebac 0305 	sub.w	r3, ip, r5
 800889e:	6123      	str	r3, [r4, #16]
 80088a0:	f8cd 8000 	str.w	r8, [sp]
 80088a4:	463b      	mov	r3, r7
 80088a6:	aa03      	add	r2, sp, #12
 80088a8:	4621      	mov	r1, r4
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff fef6 	bl	800869c <_printf_common>
 80088b0:	3001      	adds	r0, #1
 80088b2:	d14d      	bne.n	8008950 <_printf_i+0x1c8>
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	b005      	add	sp, #20
 80088ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088be:	4839      	ldr	r0, [pc, #228]	; (80089a4 <_printf_i+0x21c>)
 80088c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80088c4:	6813      	ldr	r3, [r2, #0]
 80088c6:	6821      	ldr	r1, [r4, #0]
 80088c8:	1d1d      	adds	r5, r3, #4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6015      	str	r5, [r2, #0]
 80088ce:	060a      	lsls	r2, r1, #24
 80088d0:	d50b      	bpl.n	80088ea <_printf_i+0x162>
 80088d2:	07ca      	lsls	r2, r1, #31
 80088d4:	bf44      	itt	mi
 80088d6:	f041 0120 	orrmi.w	r1, r1, #32
 80088da:	6021      	strmi	r1, [r4, #0]
 80088dc:	b91b      	cbnz	r3, 80088e6 <_printf_i+0x15e>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	f022 0220 	bic.w	r2, r2, #32
 80088e4:	6022      	str	r2, [r4, #0]
 80088e6:	2210      	movs	r2, #16
 80088e8:	e7b7      	b.n	800885a <_printf_i+0xd2>
 80088ea:	064d      	lsls	r5, r1, #25
 80088ec:	bf48      	it	mi
 80088ee:	b29b      	uxthmi	r3, r3
 80088f0:	e7ef      	b.n	80088d2 <_printf_i+0x14a>
 80088f2:	4665      	mov	r5, ip
 80088f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80088f8:	fb02 3311 	mls	r3, r2, r1, r3
 80088fc:	5cc3      	ldrb	r3, [r0, r3]
 80088fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008902:	460b      	mov	r3, r1
 8008904:	2900      	cmp	r1, #0
 8008906:	d1f5      	bne.n	80088f4 <_printf_i+0x16c>
 8008908:	e7b9      	b.n	800887e <_printf_i+0xf6>
 800890a:	6813      	ldr	r3, [r2, #0]
 800890c:	6825      	ldr	r5, [r4, #0]
 800890e:	6961      	ldr	r1, [r4, #20]
 8008910:	1d18      	adds	r0, r3, #4
 8008912:	6010      	str	r0, [r2, #0]
 8008914:	0628      	lsls	r0, r5, #24
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	d501      	bpl.n	800891e <_printf_i+0x196>
 800891a:	6019      	str	r1, [r3, #0]
 800891c:	e002      	b.n	8008924 <_printf_i+0x19c>
 800891e:	066a      	lsls	r2, r5, #25
 8008920:	d5fb      	bpl.n	800891a <_printf_i+0x192>
 8008922:	8019      	strh	r1, [r3, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	4665      	mov	r5, ip
 800892a:	e7b9      	b.n	80088a0 <_printf_i+0x118>
 800892c:	6813      	ldr	r3, [r2, #0]
 800892e:	1d19      	adds	r1, r3, #4
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	681d      	ldr	r5, [r3, #0]
 8008934:	6862      	ldr	r2, [r4, #4]
 8008936:	2100      	movs	r1, #0
 8008938:	4628      	mov	r0, r5
 800893a:	f7f7 fc51 	bl	80001e0 <memchr>
 800893e:	b108      	cbz	r0, 8008944 <_printf_i+0x1bc>
 8008940:	1b40      	subs	r0, r0, r5
 8008942:	6060      	str	r0, [r4, #4]
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	2300      	movs	r3, #0
 800894a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800894e:	e7a7      	b.n	80088a0 <_printf_i+0x118>
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	462a      	mov	r2, r5
 8008954:	4639      	mov	r1, r7
 8008956:	4630      	mov	r0, r6
 8008958:	47c0      	blx	r8
 800895a:	3001      	adds	r0, #1
 800895c:	d0aa      	beq.n	80088b4 <_printf_i+0x12c>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	079b      	lsls	r3, r3, #30
 8008962:	d413      	bmi.n	800898c <_printf_i+0x204>
 8008964:	68e0      	ldr	r0, [r4, #12]
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	4298      	cmp	r0, r3
 800896a:	bfb8      	it	lt
 800896c:	4618      	movlt	r0, r3
 800896e:	e7a3      	b.n	80088b8 <_printf_i+0x130>
 8008970:	2301      	movs	r3, #1
 8008972:	464a      	mov	r2, r9
 8008974:	4639      	mov	r1, r7
 8008976:	4630      	mov	r0, r6
 8008978:	47c0      	blx	r8
 800897a:	3001      	adds	r0, #1
 800897c:	d09a      	beq.n	80088b4 <_printf_i+0x12c>
 800897e:	3501      	adds	r5, #1
 8008980:	68e3      	ldr	r3, [r4, #12]
 8008982:	9a03      	ldr	r2, [sp, #12]
 8008984:	1a9b      	subs	r3, r3, r2
 8008986:	42ab      	cmp	r3, r5
 8008988:	dcf2      	bgt.n	8008970 <_printf_i+0x1e8>
 800898a:	e7eb      	b.n	8008964 <_printf_i+0x1dc>
 800898c:	2500      	movs	r5, #0
 800898e:	f104 0919 	add.w	r9, r4, #25
 8008992:	e7f5      	b.n	8008980 <_printf_i+0x1f8>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1ac      	bne.n	80088f2 <_printf_i+0x16a>
 8008998:	7803      	ldrb	r3, [r0, #0]
 800899a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800899e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089a2:	e76c      	b.n	800887e <_printf_i+0xf6>
 80089a4:	0800bc9a 	.word	0x0800bc9a
 80089a8:	0800bcab 	.word	0x0800bcab

080089ac <_scanf_float>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	469a      	mov	sl, r3
 80089b2:	688b      	ldr	r3, [r1, #8]
 80089b4:	4616      	mov	r6, r2
 80089b6:	1e5a      	subs	r2, r3, #1
 80089b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089bc:	b087      	sub	sp, #28
 80089be:	bf83      	ittte	hi
 80089c0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80089c4:	189b      	addhi	r3, r3, r2
 80089c6:	9301      	strhi	r3, [sp, #4]
 80089c8:	2300      	movls	r3, #0
 80089ca:	bf86      	itte	hi
 80089cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089d0:	608b      	strhi	r3, [r1, #8]
 80089d2:	9301      	strls	r3, [sp, #4]
 80089d4:	680b      	ldr	r3, [r1, #0]
 80089d6:	4688      	mov	r8, r1
 80089d8:	f04f 0b00 	mov.w	fp, #0
 80089dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089e0:	f848 3b1c 	str.w	r3, [r8], #28
 80089e4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80089e8:	4607      	mov	r7, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	4645      	mov	r5, r8
 80089ee:	465a      	mov	r2, fp
 80089f0:	46d9      	mov	r9, fp
 80089f2:	f8cd b008 	str.w	fp, [sp, #8]
 80089f6:	68a1      	ldr	r1, [r4, #8]
 80089f8:	b181      	cbz	r1, 8008a1c <_scanf_float+0x70>
 80089fa:	6833      	ldr	r3, [r6, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b49      	cmp	r3, #73	; 0x49
 8008a00:	d071      	beq.n	8008ae6 <_scanf_float+0x13a>
 8008a02:	d84d      	bhi.n	8008aa0 <_scanf_float+0xf4>
 8008a04:	2b39      	cmp	r3, #57	; 0x39
 8008a06:	d840      	bhi.n	8008a8a <_scanf_float+0xde>
 8008a08:	2b31      	cmp	r3, #49	; 0x31
 8008a0a:	f080 8088 	bcs.w	8008b1e <_scanf_float+0x172>
 8008a0e:	2b2d      	cmp	r3, #45	; 0x2d
 8008a10:	f000 8090 	beq.w	8008b34 <_scanf_float+0x188>
 8008a14:	d815      	bhi.n	8008a42 <_scanf_float+0x96>
 8008a16:	2b2b      	cmp	r3, #43	; 0x2b
 8008a18:	f000 808c 	beq.w	8008b34 <_scanf_float+0x188>
 8008a1c:	f1b9 0f00 	cmp.w	r9, #0
 8008a20:	d003      	beq.n	8008a2a <_scanf_float+0x7e>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	3a01      	subs	r2, #1
 8008a2c:	2a01      	cmp	r2, #1
 8008a2e:	f200 80ea 	bhi.w	8008c06 <_scanf_float+0x25a>
 8008a32:	4545      	cmp	r5, r8
 8008a34:	f200 80dc 	bhi.w	8008bf0 <_scanf_float+0x244>
 8008a38:	2601      	movs	r6, #1
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	b007      	add	sp, #28
 8008a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a42:	2b2e      	cmp	r3, #46	; 0x2e
 8008a44:	f000 809f 	beq.w	8008b86 <_scanf_float+0x1da>
 8008a48:	2b30      	cmp	r3, #48	; 0x30
 8008a4a:	d1e7      	bne.n	8008a1c <_scanf_float+0x70>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008a52:	d064      	beq.n	8008b1e <_scanf_float+0x172>
 8008a54:	9b01      	ldr	r3, [sp, #4]
 8008a56:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008a5a:	6020      	str	r0, [r4, #0]
 8008a5c:	f109 0901 	add.w	r9, r9, #1
 8008a60:	b11b      	cbz	r3, 8008a6a <_scanf_float+0xbe>
 8008a62:	3b01      	subs	r3, #1
 8008a64:	3101      	adds	r1, #1
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	60a1      	str	r1, [r4, #8]
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	60a3      	str	r3, [r4, #8]
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	3301      	adds	r3, #1
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	6873      	ldr	r3, [r6, #4]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	6073      	str	r3, [r6, #4]
 8008a7e:	f340 80ac 	ble.w	8008bda <_scanf_float+0x22e>
 8008a82:	6833      	ldr	r3, [r6, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	6033      	str	r3, [r6, #0]
 8008a88:	e7b5      	b.n	80089f6 <_scanf_float+0x4a>
 8008a8a:	2b45      	cmp	r3, #69	; 0x45
 8008a8c:	f000 8085 	beq.w	8008b9a <_scanf_float+0x1ee>
 8008a90:	2b46      	cmp	r3, #70	; 0x46
 8008a92:	d06a      	beq.n	8008b6a <_scanf_float+0x1be>
 8008a94:	2b41      	cmp	r3, #65	; 0x41
 8008a96:	d1c1      	bne.n	8008a1c <_scanf_float+0x70>
 8008a98:	2a01      	cmp	r2, #1
 8008a9a:	d1bf      	bne.n	8008a1c <_scanf_float+0x70>
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	e046      	b.n	8008b2e <_scanf_float+0x182>
 8008aa0:	2b65      	cmp	r3, #101	; 0x65
 8008aa2:	d07a      	beq.n	8008b9a <_scanf_float+0x1ee>
 8008aa4:	d818      	bhi.n	8008ad8 <_scanf_float+0x12c>
 8008aa6:	2b54      	cmp	r3, #84	; 0x54
 8008aa8:	d066      	beq.n	8008b78 <_scanf_float+0x1cc>
 8008aaa:	d811      	bhi.n	8008ad0 <_scanf_float+0x124>
 8008aac:	2b4e      	cmp	r3, #78	; 0x4e
 8008aae:	d1b5      	bne.n	8008a1c <_scanf_float+0x70>
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	d146      	bne.n	8008b42 <_scanf_float+0x196>
 8008ab4:	f1b9 0f00 	cmp.w	r9, #0
 8008ab8:	d145      	bne.n	8008b46 <_scanf_float+0x19a>
 8008aba:	6821      	ldr	r1, [r4, #0]
 8008abc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008ac0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008ac4:	d13f      	bne.n	8008b46 <_scanf_float+0x19a>
 8008ac6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008aca:	6021      	str	r1, [r4, #0]
 8008acc:	2201      	movs	r2, #1
 8008ace:	e02e      	b.n	8008b2e <_scanf_float+0x182>
 8008ad0:	2b59      	cmp	r3, #89	; 0x59
 8008ad2:	d01e      	beq.n	8008b12 <_scanf_float+0x166>
 8008ad4:	2b61      	cmp	r3, #97	; 0x61
 8008ad6:	e7de      	b.n	8008a96 <_scanf_float+0xea>
 8008ad8:	2b6e      	cmp	r3, #110	; 0x6e
 8008ada:	d0e9      	beq.n	8008ab0 <_scanf_float+0x104>
 8008adc:	d815      	bhi.n	8008b0a <_scanf_float+0x15e>
 8008ade:	2b66      	cmp	r3, #102	; 0x66
 8008ae0:	d043      	beq.n	8008b6a <_scanf_float+0x1be>
 8008ae2:	2b69      	cmp	r3, #105	; 0x69
 8008ae4:	d19a      	bne.n	8008a1c <_scanf_float+0x70>
 8008ae6:	f1bb 0f00 	cmp.w	fp, #0
 8008aea:	d138      	bne.n	8008b5e <_scanf_float+0x1b2>
 8008aec:	f1b9 0f00 	cmp.w	r9, #0
 8008af0:	d197      	bne.n	8008a22 <_scanf_float+0x76>
 8008af2:	6821      	ldr	r1, [r4, #0]
 8008af4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008af8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008afc:	d195      	bne.n	8008a2a <_scanf_float+0x7e>
 8008afe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008b02:	6021      	str	r1, [r4, #0]
 8008b04:	f04f 0b01 	mov.w	fp, #1
 8008b08:	e011      	b.n	8008b2e <_scanf_float+0x182>
 8008b0a:	2b74      	cmp	r3, #116	; 0x74
 8008b0c:	d034      	beq.n	8008b78 <_scanf_float+0x1cc>
 8008b0e:	2b79      	cmp	r3, #121	; 0x79
 8008b10:	d184      	bne.n	8008a1c <_scanf_float+0x70>
 8008b12:	f1bb 0f07 	cmp.w	fp, #7
 8008b16:	d181      	bne.n	8008a1c <_scanf_float+0x70>
 8008b18:	f04f 0b08 	mov.w	fp, #8
 8008b1c:	e007      	b.n	8008b2e <_scanf_float+0x182>
 8008b1e:	eb12 0f0b 	cmn.w	r2, fp
 8008b22:	f47f af7b 	bne.w	8008a1c <_scanf_float+0x70>
 8008b26:	6821      	ldr	r1, [r4, #0]
 8008b28:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008b2c:	6021      	str	r1, [r4, #0]
 8008b2e:	702b      	strb	r3, [r5, #0]
 8008b30:	3501      	adds	r5, #1
 8008b32:	e79a      	b.n	8008a6a <_scanf_float+0xbe>
 8008b34:	6821      	ldr	r1, [r4, #0]
 8008b36:	0608      	lsls	r0, r1, #24
 8008b38:	f57f af70 	bpl.w	8008a1c <_scanf_float+0x70>
 8008b3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008b40:	e7f4      	b.n	8008b2c <_scanf_float+0x180>
 8008b42:	2a02      	cmp	r2, #2
 8008b44:	d047      	beq.n	8008bd6 <_scanf_float+0x22a>
 8008b46:	f1bb 0f01 	cmp.w	fp, #1
 8008b4a:	d003      	beq.n	8008b54 <_scanf_float+0x1a8>
 8008b4c:	f1bb 0f04 	cmp.w	fp, #4
 8008b50:	f47f af64 	bne.w	8008a1c <_scanf_float+0x70>
 8008b54:	f10b 0b01 	add.w	fp, fp, #1
 8008b58:	fa5f fb8b 	uxtb.w	fp, fp
 8008b5c:	e7e7      	b.n	8008b2e <_scanf_float+0x182>
 8008b5e:	f1bb 0f03 	cmp.w	fp, #3
 8008b62:	d0f7      	beq.n	8008b54 <_scanf_float+0x1a8>
 8008b64:	f1bb 0f05 	cmp.w	fp, #5
 8008b68:	e7f2      	b.n	8008b50 <_scanf_float+0x1a4>
 8008b6a:	f1bb 0f02 	cmp.w	fp, #2
 8008b6e:	f47f af55 	bne.w	8008a1c <_scanf_float+0x70>
 8008b72:	f04f 0b03 	mov.w	fp, #3
 8008b76:	e7da      	b.n	8008b2e <_scanf_float+0x182>
 8008b78:	f1bb 0f06 	cmp.w	fp, #6
 8008b7c:	f47f af4e 	bne.w	8008a1c <_scanf_float+0x70>
 8008b80:	f04f 0b07 	mov.w	fp, #7
 8008b84:	e7d3      	b.n	8008b2e <_scanf_float+0x182>
 8008b86:	6821      	ldr	r1, [r4, #0]
 8008b88:	0588      	lsls	r0, r1, #22
 8008b8a:	f57f af47 	bpl.w	8008a1c <_scanf_float+0x70>
 8008b8e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008b92:	6021      	str	r1, [r4, #0]
 8008b94:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b98:	e7c9      	b.n	8008b2e <_scanf_float+0x182>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008ba0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008ba4:	d006      	beq.n	8008bb4 <_scanf_float+0x208>
 8008ba6:	0548      	lsls	r0, r1, #21
 8008ba8:	f57f af38 	bpl.w	8008a1c <_scanf_float+0x70>
 8008bac:	f1b9 0f00 	cmp.w	r9, #0
 8008bb0:	f43f af3b 	beq.w	8008a2a <_scanf_float+0x7e>
 8008bb4:	0588      	lsls	r0, r1, #22
 8008bb6:	bf58      	it	pl
 8008bb8:	9802      	ldrpl	r0, [sp, #8]
 8008bba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008bbe:	bf58      	it	pl
 8008bc0:	eba9 0000 	subpl.w	r0, r9, r0
 8008bc4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008bc8:	bf58      	it	pl
 8008bca:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008bce:	6021      	str	r1, [r4, #0]
 8008bd0:	f04f 0900 	mov.w	r9, #0
 8008bd4:	e7ab      	b.n	8008b2e <_scanf_float+0x182>
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	e7a9      	b.n	8008b2e <_scanf_float+0x182>
 8008bda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bde:	9205      	str	r2, [sp, #20]
 8008be0:	4631      	mov	r1, r6
 8008be2:	4638      	mov	r0, r7
 8008be4:	4798      	blx	r3
 8008be6:	9a05      	ldr	r2, [sp, #20]
 8008be8:	2800      	cmp	r0, #0
 8008bea:	f43f af04 	beq.w	80089f6 <_scanf_float+0x4a>
 8008bee:	e715      	b.n	8008a1c <_scanf_float+0x70>
 8008bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bf4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008bf8:	4632      	mov	r2, r6
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	4798      	blx	r3
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	e715      	b.n	8008a32 <_scanf_float+0x86>
 8008c06:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008c0a:	2b06      	cmp	r3, #6
 8008c0c:	d80a      	bhi.n	8008c24 <_scanf_float+0x278>
 8008c0e:	f1bb 0f02 	cmp.w	fp, #2
 8008c12:	d968      	bls.n	8008ce6 <_scanf_float+0x33a>
 8008c14:	f1ab 0b03 	sub.w	fp, fp, #3
 8008c18:	fa5f fb8b 	uxtb.w	fp, fp
 8008c1c:	eba5 0b0b 	sub.w	fp, r5, fp
 8008c20:	455d      	cmp	r5, fp
 8008c22:	d14b      	bne.n	8008cbc <_scanf_float+0x310>
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	05da      	lsls	r2, r3, #23
 8008c28:	d51f      	bpl.n	8008c6a <_scanf_float+0x2be>
 8008c2a:	055b      	lsls	r3, r3, #21
 8008c2c:	d468      	bmi.n	8008d00 <_scanf_float+0x354>
 8008c2e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	2965      	cmp	r1, #101	; 0x65
 8008c36:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c3a:	f105 3bff 	add.w	fp, r5, #4294967295
 8008c3e:	6123      	str	r3, [r4, #16]
 8008c40:	d00d      	beq.n	8008c5e <_scanf_float+0x2b2>
 8008c42:	2945      	cmp	r1, #69	; 0x45
 8008c44:	d00b      	beq.n	8008c5e <_scanf_float+0x2b2>
 8008c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c4a:	4632      	mov	r2, r6
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	4798      	blx	r3
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	f1a5 0b02 	sub.w	fp, r5, #2
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c62:	4632      	mov	r2, r6
 8008c64:	4638      	mov	r0, r7
 8008c66:	4798      	blx	r3
 8008c68:	465d      	mov	r5, fp
 8008c6a:	6826      	ldr	r6, [r4, #0]
 8008c6c:	f016 0610 	ands.w	r6, r6, #16
 8008c70:	d17a      	bne.n	8008d68 <_scanf_float+0x3bc>
 8008c72:	702e      	strb	r6, [r5, #0]
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c7e:	d142      	bne.n	8008d06 <_scanf_float+0x35a>
 8008c80:	9b02      	ldr	r3, [sp, #8]
 8008c82:	eba9 0303 	sub.w	r3, r9, r3
 8008c86:	425a      	negs	r2, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d149      	bne.n	8008d20 <_scanf_float+0x374>
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4641      	mov	r1, r8
 8008c90:	4638      	mov	r0, r7
 8008c92:	f000 fea5 	bl	80099e0 <_strtod_r>
 8008c96:	6825      	ldr	r5, [r4, #0]
 8008c98:	f8da 3000 	ldr.w	r3, [sl]
 8008c9c:	f015 0f02 	tst.w	r5, #2
 8008ca0:	f103 0204 	add.w	r2, r3, #4
 8008ca4:	ec59 8b10 	vmov	r8, r9, d0
 8008ca8:	f8ca 2000 	str.w	r2, [sl]
 8008cac:	d043      	beq.n	8008d36 <_scanf_float+0x38a>
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	e9c3 8900 	strd	r8, r9, [r3]
 8008cb4:	68e3      	ldr	r3, [r4, #12]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60e3      	str	r3, [r4, #12]
 8008cba:	e6be      	b.n	8008a3a <_scanf_float+0x8e>
 8008cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	4798      	blx	r3
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	e7a6      	b.n	8008c20 <_scanf_float+0x274>
 8008cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cd6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4638      	mov	r0, r7
 8008cde:	4798      	blx	r3
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	6123      	str	r3, [r4, #16]
 8008ce6:	4545      	cmp	r5, r8
 8008ce8:	d8f3      	bhi.n	8008cd2 <_scanf_float+0x326>
 8008cea:	e6a5      	b.n	8008a38 <_scanf_float+0x8c>
 8008cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008cf4:	4632      	mov	r2, r6
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	4798      	blx	r3
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	4545      	cmp	r5, r8
 8008d02:	d8f3      	bhi.n	8008cec <_scanf_float+0x340>
 8008d04:	e698      	b.n	8008a38 <_scanf_float+0x8c>
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0bf      	beq.n	8008c8c <_scanf_float+0x2e0>
 8008d0c:	9904      	ldr	r1, [sp, #16]
 8008d0e:	230a      	movs	r3, #10
 8008d10:	4632      	mov	r2, r6
 8008d12:	3101      	adds	r1, #1
 8008d14:	4638      	mov	r0, r7
 8008d16:	f000 feef 	bl	8009af8 <_strtol_r>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	9d04      	ldr	r5, [sp, #16]
 8008d1e:	1ac2      	subs	r2, r0, r3
 8008d20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d24:	429d      	cmp	r5, r3
 8008d26:	bf28      	it	cs
 8008d28:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008d2c:	490f      	ldr	r1, [pc, #60]	; (8008d6c <_scanf_float+0x3c0>)
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 f824 	bl	8008d7c <siprintf>
 8008d34:	e7aa      	b.n	8008c8c <_scanf_float+0x2e0>
 8008d36:	f015 0504 	ands.w	r5, r5, #4
 8008d3a:	d1b8      	bne.n	8008cae <_scanf_float+0x302>
 8008d3c:	681f      	ldr	r7, [r3, #0]
 8008d3e:	ee10 2a10 	vmov	r2, s0
 8008d42:	464b      	mov	r3, r9
 8008d44:	ee10 0a10 	vmov	r0, s0
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 feef 	bl	8000b2c <__aeabi_dcmpun>
 8008d4e:	b128      	cbz	r0, 8008d5c <_scanf_float+0x3b0>
 8008d50:	4628      	mov	r0, r5
 8008d52:	f000 f80d 	bl	8008d70 <nanf>
 8008d56:	ed87 0a00 	vstr	s0, [r7]
 8008d5a:	e7ab      	b.n	8008cb4 <_scanf_float+0x308>
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	4649      	mov	r1, r9
 8008d60:	f7f7 ff42 	bl	8000be8 <__aeabi_d2f>
 8008d64:	6038      	str	r0, [r7, #0]
 8008d66:	e7a5      	b.n	8008cb4 <_scanf_float+0x308>
 8008d68:	2600      	movs	r6, #0
 8008d6a:	e666      	b.n	8008a3a <_scanf_float+0x8e>
 8008d6c:	0800bcbc 	.word	0x0800bcbc

08008d70 <nanf>:
 8008d70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008d78 <nanf+0x8>
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	7fc00000 	.word	0x7fc00000

08008d7c <siprintf>:
 8008d7c:	b40e      	push	{r1, r2, r3}
 8008d7e:	b500      	push	{lr}
 8008d80:	b09c      	sub	sp, #112	; 0x70
 8008d82:	ab1d      	add	r3, sp, #116	; 0x74
 8008d84:	9002      	str	r0, [sp, #8]
 8008d86:	9006      	str	r0, [sp, #24]
 8008d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d8c:	4809      	ldr	r0, [pc, #36]	; (8008db4 <siprintf+0x38>)
 8008d8e:	9107      	str	r1, [sp, #28]
 8008d90:	9104      	str	r1, [sp, #16]
 8008d92:	4909      	ldr	r1, [pc, #36]	; (8008db8 <siprintf+0x3c>)
 8008d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d98:	9105      	str	r1, [sp, #20]
 8008d9a:	6800      	ldr	r0, [r0, #0]
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	a902      	add	r1, sp, #8
 8008da0:	f002 fd70 	bl	800b884 <_svfiprintf_r>
 8008da4:	9b02      	ldr	r3, [sp, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	b01c      	add	sp, #112	; 0x70
 8008dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db0:	b003      	add	sp, #12
 8008db2:	4770      	bx	lr
 8008db4:	2000000c 	.word	0x2000000c
 8008db8:	ffff0208 	.word	0xffff0208

08008dbc <sulp>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	ec45 4b10 	vmov	d0, r4, r5
 8008dc6:	4616      	mov	r6, r2
 8008dc8:	f002 fb18 	bl	800b3fc <__ulp>
 8008dcc:	ec51 0b10 	vmov	r0, r1, d0
 8008dd0:	b17e      	cbz	r6, 8008df2 <sulp+0x36>
 8008dd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008dd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dd09      	ble.n	8008df2 <sulp+0x36>
 8008dde:	051b      	lsls	r3, r3, #20
 8008de0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008de4:	2400      	movs	r4, #0
 8008de6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008dea:	4622      	mov	r2, r4
 8008dec:	462b      	mov	r3, r5
 8008dee:	f7f7 fc03 	bl	80005f8 <__aeabi_dmul>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	0000      	movs	r0, r0
	...

08008df8 <_strtod_l>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	461f      	mov	r7, r3
 8008dfe:	b0a1      	sub	sp, #132	; 0x84
 8008e00:	2300      	movs	r3, #0
 8008e02:	4681      	mov	r9, r0
 8008e04:	4638      	mov	r0, r7
 8008e06:	460e      	mov	r6, r1
 8008e08:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e0a:	931c      	str	r3, [sp, #112]	; 0x70
 8008e0c:	f001 fff5 	bl	800adfa <__localeconv_l>
 8008e10:	4680      	mov	r8, r0
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	f7f7 f9dc 	bl	80001d0 <strlen>
 8008e18:	f04f 0a00 	mov.w	sl, #0
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	f04f 0b00 	mov.w	fp, #0
 8008e22:	961b      	str	r6, [sp, #108]	; 0x6c
 8008e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	2a0d      	cmp	r2, #13
 8008e2a:	d832      	bhi.n	8008e92 <_strtod_l+0x9a>
 8008e2c:	2a09      	cmp	r2, #9
 8008e2e:	d236      	bcs.n	8008e9e <_strtod_l+0xa6>
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	d03e      	beq.n	8008eb2 <_strtod_l+0xba>
 8008e34:	2300      	movs	r3, #0
 8008e36:	930d      	str	r3, [sp, #52]	; 0x34
 8008e38:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008e3a:	782b      	ldrb	r3, [r5, #0]
 8008e3c:	2b30      	cmp	r3, #48	; 0x30
 8008e3e:	f040 80ac 	bne.w	8008f9a <_strtod_l+0x1a2>
 8008e42:	786b      	ldrb	r3, [r5, #1]
 8008e44:	2b58      	cmp	r3, #88	; 0x58
 8008e46:	d001      	beq.n	8008e4c <_strtod_l+0x54>
 8008e48:	2b78      	cmp	r3, #120	; 0x78
 8008e4a:	d167      	bne.n	8008f1c <_strtod_l+0x124>
 8008e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	ab1c      	add	r3, sp, #112	; 0x70
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	9702      	str	r7, [sp, #8]
 8008e56:	ab1d      	add	r3, sp, #116	; 0x74
 8008e58:	4a88      	ldr	r2, [pc, #544]	; (800907c <_strtod_l+0x284>)
 8008e5a:	a91b      	add	r1, sp, #108	; 0x6c
 8008e5c:	4648      	mov	r0, r9
 8008e5e:	f001 fcf2 	bl	800a846 <__gethex>
 8008e62:	f010 0407 	ands.w	r4, r0, #7
 8008e66:	4606      	mov	r6, r0
 8008e68:	d005      	beq.n	8008e76 <_strtod_l+0x7e>
 8008e6a:	2c06      	cmp	r4, #6
 8008e6c:	d12b      	bne.n	8008ec6 <_strtod_l+0xce>
 8008e6e:	3501      	adds	r5, #1
 8008e70:	2300      	movs	r3, #0
 8008e72:	951b      	str	r5, [sp, #108]	; 0x6c
 8008e74:	930d      	str	r3, [sp, #52]	; 0x34
 8008e76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f040 859a 	bne.w	80099b2 <_strtod_l+0xbba>
 8008e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e80:	b1e3      	cbz	r3, 8008ebc <_strtod_l+0xc4>
 8008e82:	4652      	mov	r2, sl
 8008e84:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e88:	ec43 2b10 	vmov	d0, r2, r3
 8008e8c:	b021      	add	sp, #132	; 0x84
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	2a2b      	cmp	r2, #43	; 0x2b
 8008e94:	d015      	beq.n	8008ec2 <_strtod_l+0xca>
 8008e96:	2a2d      	cmp	r2, #45	; 0x2d
 8008e98:	d004      	beq.n	8008ea4 <_strtod_l+0xac>
 8008e9a:	2a20      	cmp	r2, #32
 8008e9c:	d1ca      	bne.n	8008e34 <_strtod_l+0x3c>
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ea2:	e7bf      	b.n	8008e24 <_strtod_l+0x2c>
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	920d      	str	r2, [sp, #52]	; 0x34
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	921b      	str	r2, [sp, #108]	; 0x6c
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1c2      	bne.n	8008e38 <_strtod_l+0x40>
 8008eb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eb4:	961b      	str	r6, [sp, #108]	; 0x6c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f040 8579 	bne.w	80099ae <_strtod_l+0xbb6>
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	465b      	mov	r3, fp
 8008ec0:	e7e2      	b.n	8008e88 <_strtod_l+0x90>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	e7ef      	b.n	8008ea6 <_strtod_l+0xae>
 8008ec6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ec8:	b13a      	cbz	r2, 8008eda <_strtod_l+0xe2>
 8008eca:	2135      	movs	r1, #53	; 0x35
 8008ecc:	a81e      	add	r0, sp, #120	; 0x78
 8008ece:	f002 fb8d 	bl	800b5ec <__copybits>
 8008ed2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f001 fffa 	bl	800aece <_Bfree>
 8008eda:	3c01      	subs	r4, #1
 8008edc:	2c04      	cmp	r4, #4
 8008ede:	d806      	bhi.n	8008eee <_strtod_l+0xf6>
 8008ee0:	e8df f004 	tbb	[pc, r4]
 8008ee4:	1714030a 	.word	0x1714030a
 8008ee8:	0a          	.byte	0x0a
 8008ee9:	00          	.byte	0x00
 8008eea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008eee:	0730      	lsls	r0, r6, #28
 8008ef0:	d5c1      	bpl.n	8008e76 <_strtod_l+0x7e>
 8008ef2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008ef6:	e7be      	b.n	8008e76 <_strtod_l+0x7e>
 8008ef8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008efc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008efe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f02:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f0a:	e7f0      	b.n	8008eee <_strtod_l+0xf6>
 8008f0c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009080 <_strtod_l+0x288>
 8008f10:	e7ed      	b.n	8008eee <_strtod_l+0xf6>
 8008f12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008f16:	f04f 3aff 	mov.w	sl, #4294967295
 8008f1a:	e7e8      	b.n	8008eee <_strtod_l+0xf6>
 8008f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	2b30      	cmp	r3, #48	; 0x30
 8008f26:	d0f9      	beq.n	8008f1c <_strtod_l+0x124>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0a4      	beq.n	8008e76 <_strtod_l+0x7e>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	2500      	movs	r5, #0
 8008f30:	9306      	str	r3, [sp, #24]
 8008f32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	9507      	str	r5, [sp, #28]
 8008f38:	9505      	str	r5, [sp, #20]
 8008f3a:	220a      	movs	r2, #10
 8008f3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008f3e:	7807      	ldrb	r7, [r0, #0]
 8008f40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008f44:	b2d9      	uxtb	r1, r3
 8008f46:	2909      	cmp	r1, #9
 8008f48:	d929      	bls.n	8008f9e <_strtod_l+0x1a6>
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	f8d8 1000 	ldr.w	r1, [r8]
 8008f50:	f002 fda0 	bl	800ba94 <strncmp>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d031      	beq.n	8008fbc <_strtod_l+0x1c4>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	9c05      	ldr	r4, [sp, #20]
 8008f5c:	9004      	str	r0, [sp, #16]
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4602      	mov	r2, r0
 8008f62:	2b65      	cmp	r3, #101	; 0x65
 8008f64:	d001      	beq.n	8008f6a <_strtod_l+0x172>
 8008f66:	2b45      	cmp	r3, #69	; 0x45
 8008f68:	d114      	bne.n	8008f94 <_strtod_l+0x19c>
 8008f6a:	b924      	cbnz	r4, 8008f76 <_strtod_l+0x17e>
 8008f6c:	b910      	cbnz	r0, 8008f74 <_strtod_l+0x17c>
 8008f6e:	9b06      	ldr	r3, [sp, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d09e      	beq.n	8008eb2 <_strtod_l+0xba>
 8008f74:	2400      	movs	r4, #0
 8008f76:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008f78:	1c73      	adds	r3, r6, #1
 8008f7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f7c:	7873      	ldrb	r3, [r6, #1]
 8008f7e:	2b2b      	cmp	r3, #43	; 0x2b
 8008f80:	d078      	beq.n	8009074 <_strtod_l+0x27c>
 8008f82:	2b2d      	cmp	r3, #45	; 0x2d
 8008f84:	d070      	beq.n	8009068 <_strtod_l+0x270>
 8008f86:	f04f 0c00 	mov.w	ip, #0
 8008f8a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008f8e:	2f09      	cmp	r7, #9
 8008f90:	d97c      	bls.n	800908c <_strtod_l+0x294>
 8008f92:	961b      	str	r6, [sp, #108]	; 0x6c
 8008f94:	f04f 0e00 	mov.w	lr, #0
 8008f98:	e09a      	b.n	80090d0 <_strtod_l+0x2d8>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e7c7      	b.n	8008f2e <_strtod_l+0x136>
 8008f9e:	9905      	ldr	r1, [sp, #20]
 8008fa0:	2908      	cmp	r1, #8
 8008fa2:	bfdd      	ittte	le
 8008fa4:	9907      	ldrle	r1, [sp, #28]
 8008fa6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008faa:	9307      	strle	r3, [sp, #28]
 8008fac:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008fb0:	9b05      	ldr	r3, [sp, #20]
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	901b      	str	r0, [sp, #108]	; 0x6c
 8008fba:	e7bf      	b.n	8008f3c <_strtod_l+0x144>
 8008fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fbe:	191a      	adds	r2, r3, r4
 8008fc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008fc2:	9a05      	ldr	r2, [sp, #20]
 8008fc4:	5d1b      	ldrb	r3, [r3, r4]
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d037      	beq.n	800903a <_strtod_l+0x242>
 8008fca:	9c05      	ldr	r4, [sp, #20]
 8008fcc:	4602      	mov	r2, r0
 8008fce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008fd2:	2909      	cmp	r1, #9
 8008fd4:	d913      	bls.n	8008ffe <_strtod_l+0x206>
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	9104      	str	r1, [sp, #16]
 8008fda:	e7c2      	b.n	8008f62 <_strtod_l+0x16a>
 8008fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	2b30      	cmp	r3, #48	; 0x30
 8008fe8:	d0f8      	beq.n	8008fdc <_strtod_l+0x1e4>
 8008fea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008fee:	2a08      	cmp	r2, #8
 8008ff0:	f200 84e4 	bhi.w	80099bc <_strtod_l+0xbc4>
 8008ff4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ff6:	9208      	str	r2, [sp, #32]
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009002:	f100 0101 	add.w	r1, r0, #1
 8009006:	d012      	beq.n	800902e <_strtod_l+0x236>
 8009008:	440a      	add	r2, r1
 800900a:	eb00 0c04 	add.w	ip, r0, r4
 800900e:	4621      	mov	r1, r4
 8009010:	270a      	movs	r7, #10
 8009012:	458c      	cmp	ip, r1
 8009014:	d113      	bne.n	800903e <_strtod_l+0x246>
 8009016:	1821      	adds	r1, r4, r0
 8009018:	2908      	cmp	r1, #8
 800901a:	f104 0401 	add.w	r4, r4, #1
 800901e:	4404      	add	r4, r0
 8009020:	dc19      	bgt.n	8009056 <_strtod_l+0x25e>
 8009022:	9b07      	ldr	r3, [sp, #28]
 8009024:	210a      	movs	r1, #10
 8009026:	fb01 e303 	mla	r3, r1, r3, lr
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	2100      	movs	r1, #0
 800902e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009030:	1c58      	adds	r0, r3, #1
 8009032:	901b      	str	r0, [sp, #108]	; 0x6c
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	4608      	mov	r0, r1
 8009038:	e7c9      	b.n	8008fce <_strtod_l+0x1d6>
 800903a:	9805      	ldr	r0, [sp, #20]
 800903c:	e7d3      	b.n	8008fe6 <_strtod_l+0x1ee>
 800903e:	2908      	cmp	r1, #8
 8009040:	f101 0101 	add.w	r1, r1, #1
 8009044:	dc03      	bgt.n	800904e <_strtod_l+0x256>
 8009046:	9b07      	ldr	r3, [sp, #28]
 8009048:	437b      	muls	r3, r7
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	e7e1      	b.n	8009012 <_strtod_l+0x21a>
 800904e:	2910      	cmp	r1, #16
 8009050:	bfd8      	it	le
 8009052:	437d      	mulle	r5, r7
 8009054:	e7dd      	b.n	8009012 <_strtod_l+0x21a>
 8009056:	2c10      	cmp	r4, #16
 8009058:	bfdc      	itt	le
 800905a:	210a      	movle	r1, #10
 800905c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009060:	e7e4      	b.n	800902c <_strtod_l+0x234>
 8009062:	2301      	movs	r3, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	e781      	b.n	8008f6c <_strtod_l+0x174>
 8009068:	f04f 0c01 	mov.w	ip, #1
 800906c:	1cb3      	adds	r3, r6, #2
 800906e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009070:	78b3      	ldrb	r3, [r6, #2]
 8009072:	e78a      	b.n	8008f8a <_strtod_l+0x192>
 8009074:	f04f 0c00 	mov.w	ip, #0
 8009078:	e7f8      	b.n	800906c <_strtod_l+0x274>
 800907a:	bf00      	nop
 800907c:	0800bcc4 	.word	0x0800bcc4
 8009080:	7ff00000 	.word	0x7ff00000
 8009084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009086:	1c5f      	adds	r7, r3, #1
 8009088:	971b      	str	r7, [sp, #108]	; 0x6c
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b30      	cmp	r3, #48	; 0x30
 800908e:	d0f9      	beq.n	8009084 <_strtod_l+0x28c>
 8009090:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009094:	2f08      	cmp	r7, #8
 8009096:	f63f af7d 	bhi.w	8008f94 <_strtod_l+0x19c>
 800909a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800909e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090a0:	930a      	str	r3, [sp, #40]	; 0x28
 80090a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090a4:	1c5f      	adds	r7, r3, #1
 80090a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80090ae:	f1b8 0f09 	cmp.w	r8, #9
 80090b2:	d937      	bls.n	8009124 <_strtod_l+0x32c>
 80090b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090b6:	1a7f      	subs	r7, r7, r1
 80090b8:	2f08      	cmp	r7, #8
 80090ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80090be:	dc37      	bgt.n	8009130 <_strtod_l+0x338>
 80090c0:	45be      	cmp	lr, r7
 80090c2:	bfa8      	it	ge
 80090c4:	46be      	movge	lr, r7
 80090c6:	f1bc 0f00 	cmp.w	ip, #0
 80090ca:	d001      	beq.n	80090d0 <_strtod_l+0x2d8>
 80090cc:	f1ce 0e00 	rsb	lr, lr, #0
 80090d0:	2c00      	cmp	r4, #0
 80090d2:	d151      	bne.n	8009178 <_strtod_l+0x380>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f47f aece 	bne.w	8008e76 <_strtod_l+0x7e>
 80090da:	9a06      	ldr	r2, [sp, #24]
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f47f aeca 	bne.w	8008e76 <_strtod_l+0x7e>
 80090e2:	9a04      	ldr	r2, [sp, #16]
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	f47f aee4 	bne.w	8008eb2 <_strtod_l+0xba>
 80090ea:	2b4e      	cmp	r3, #78	; 0x4e
 80090ec:	d027      	beq.n	800913e <_strtod_l+0x346>
 80090ee:	dc21      	bgt.n	8009134 <_strtod_l+0x33c>
 80090f0:	2b49      	cmp	r3, #73	; 0x49
 80090f2:	f47f aede 	bne.w	8008eb2 <_strtod_l+0xba>
 80090f6:	49a0      	ldr	r1, [pc, #640]	; (8009378 <_strtod_l+0x580>)
 80090f8:	a81b      	add	r0, sp, #108	; 0x6c
 80090fa:	f001 fdd7 	bl	800acac <__match>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f aed7 	beq.w	8008eb2 <_strtod_l+0xba>
 8009104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009106:	499d      	ldr	r1, [pc, #628]	; (800937c <_strtod_l+0x584>)
 8009108:	3b01      	subs	r3, #1
 800910a:	a81b      	add	r0, sp, #108	; 0x6c
 800910c:	931b      	str	r3, [sp, #108]	; 0x6c
 800910e:	f001 fdcd 	bl	800acac <__match>
 8009112:	b910      	cbnz	r0, 800911a <_strtod_l+0x322>
 8009114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009116:	3301      	adds	r3, #1
 8009118:	931b      	str	r3, [sp, #108]	; 0x6c
 800911a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009390 <_strtod_l+0x598>
 800911e:	f04f 0a00 	mov.w	sl, #0
 8009122:	e6a8      	b.n	8008e76 <_strtod_l+0x7e>
 8009124:	210a      	movs	r1, #10
 8009126:	fb01 3e0e 	mla	lr, r1, lr, r3
 800912a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800912e:	e7b8      	b.n	80090a2 <_strtod_l+0x2aa>
 8009130:	46be      	mov	lr, r7
 8009132:	e7c8      	b.n	80090c6 <_strtod_l+0x2ce>
 8009134:	2b69      	cmp	r3, #105	; 0x69
 8009136:	d0de      	beq.n	80090f6 <_strtod_l+0x2fe>
 8009138:	2b6e      	cmp	r3, #110	; 0x6e
 800913a:	f47f aeba 	bne.w	8008eb2 <_strtod_l+0xba>
 800913e:	4990      	ldr	r1, [pc, #576]	; (8009380 <_strtod_l+0x588>)
 8009140:	a81b      	add	r0, sp, #108	; 0x6c
 8009142:	f001 fdb3 	bl	800acac <__match>
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f aeb3 	beq.w	8008eb2 <_strtod_l+0xba>
 800914c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b28      	cmp	r3, #40	; 0x28
 8009152:	d10e      	bne.n	8009172 <_strtod_l+0x37a>
 8009154:	aa1e      	add	r2, sp, #120	; 0x78
 8009156:	498b      	ldr	r1, [pc, #556]	; (8009384 <_strtod_l+0x58c>)
 8009158:	a81b      	add	r0, sp, #108	; 0x6c
 800915a:	f001 fdbb 	bl	800acd4 <__hexnan>
 800915e:	2805      	cmp	r0, #5
 8009160:	d107      	bne.n	8009172 <_strtod_l+0x37a>
 8009162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009164:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009168:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800916c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009170:	e681      	b.n	8008e76 <_strtod_l+0x7e>
 8009172:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009398 <_strtod_l+0x5a0>
 8009176:	e7d2      	b.n	800911e <_strtod_l+0x326>
 8009178:	ebae 0302 	sub.w	r3, lr, r2
 800917c:	9306      	str	r3, [sp, #24]
 800917e:	9b05      	ldr	r3, [sp, #20]
 8009180:	9807      	ldr	r0, [sp, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	bf08      	it	eq
 8009186:	4623      	moveq	r3, r4
 8009188:	2c10      	cmp	r4, #16
 800918a:	9305      	str	r3, [sp, #20]
 800918c:	46a0      	mov	r8, r4
 800918e:	bfa8      	it	ge
 8009190:	f04f 0810 	movge.w	r8, #16
 8009194:	f7f7 f9b6 	bl	8000504 <__aeabi_ui2d>
 8009198:	2c09      	cmp	r4, #9
 800919a:	4682      	mov	sl, r0
 800919c:	468b      	mov	fp, r1
 800919e:	dc13      	bgt.n	80091c8 <_strtod_l+0x3d0>
 80091a0:	9b06      	ldr	r3, [sp, #24]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f43f ae67 	beq.w	8008e76 <_strtod_l+0x7e>
 80091a8:	9b06      	ldr	r3, [sp, #24]
 80091aa:	dd7a      	ble.n	80092a2 <_strtod_l+0x4aa>
 80091ac:	2b16      	cmp	r3, #22
 80091ae:	dc61      	bgt.n	8009274 <_strtod_l+0x47c>
 80091b0:	4a75      	ldr	r2, [pc, #468]	; (8009388 <_strtod_l+0x590>)
 80091b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80091b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80091ba:	4652      	mov	r2, sl
 80091bc:	465b      	mov	r3, fp
 80091be:	f7f7 fa1b 	bl	80005f8 <__aeabi_dmul>
 80091c2:	4682      	mov	sl, r0
 80091c4:	468b      	mov	fp, r1
 80091c6:	e656      	b.n	8008e76 <_strtod_l+0x7e>
 80091c8:	4b6f      	ldr	r3, [pc, #444]	; (8009388 <_strtod_l+0x590>)
 80091ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80091d2:	f7f7 fa11 	bl	80005f8 <__aeabi_dmul>
 80091d6:	4606      	mov	r6, r0
 80091d8:	4628      	mov	r0, r5
 80091da:	460f      	mov	r7, r1
 80091dc:	f7f7 f992 	bl	8000504 <__aeabi_ui2d>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 f850 	bl	800028c <__adddf3>
 80091ec:	2c0f      	cmp	r4, #15
 80091ee:	4682      	mov	sl, r0
 80091f0:	468b      	mov	fp, r1
 80091f2:	ddd5      	ble.n	80091a0 <_strtod_l+0x3a8>
 80091f4:	9b06      	ldr	r3, [sp, #24]
 80091f6:	eba4 0808 	sub.w	r8, r4, r8
 80091fa:	4498      	add	r8, r3
 80091fc:	f1b8 0f00 	cmp.w	r8, #0
 8009200:	f340 8096 	ble.w	8009330 <_strtod_l+0x538>
 8009204:	f018 030f 	ands.w	r3, r8, #15
 8009208:	d00a      	beq.n	8009220 <_strtod_l+0x428>
 800920a:	495f      	ldr	r1, [pc, #380]	; (8009388 <_strtod_l+0x590>)
 800920c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009210:	4652      	mov	r2, sl
 8009212:	465b      	mov	r3, fp
 8009214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	4682      	mov	sl, r0
 800921e:	468b      	mov	fp, r1
 8009220:	f038 080f 	bics.w	r8, r8, #15
 8009224:	d073      	beq.n	800930e <_strtod_l+0x516>
 8009226:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800922a:	dd47      	ble.n	80092bc <_strtod_l+0x4c4>
 800922c:	2400      	movs	r4, #0
 800922e:	46a0      	mov	r8, r4
 8009230:	9407      	str	r4, [sp, #28]
 8009232:	9405      	str	r4, [sp, #20]
 8009234:	2322      	movs	r3, #34	; 0x22
 8009236:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009390 <_strtod_l+0x598>
 800923a:	f8c9 3000 	str.w	r3, [r9]
 800923e:	f04f 0a00 	mov.w	sl, #0
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f43f ae16 	beq.w	8008e76 <_strtod_l+0x7e>
 800924a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800924c:	4648      	mov	r0, r9
 800924e:	f001 fe3e 	bl	800aece <_Bfree>
 8009252:	9905      	ldr	r1, [sp, #20]
 8009254:	4648      	mov	r0, r9
 8009256:	f001 fe3a 	bl	800aece <_Bfree>
 800925a:	4641      	mov	r1, r8
 800925c:	4648      	mov	r0, r9
 800925e:	f001 fe36 	bl	800aece <_Bfree>
 8009262:	9907      	ldr	r1, [sp, #28]
 8009264:	4648      	mov	r0, r9
 8009266:	f001 fe32 	bl	800aece <_Bfree>
 800926a:	4621      	mov	r1, r4
 800926c:	4648      	mov	r0, r9
 800926e:	f001 fe2e 	bl	800aece <_Bfree>
 8009272:	e600      	b.n	8008e76 <_strtod_l+0x7e>
 8009274:	9a06      	ldr	r2, [sp, #24]
 8009276:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800927a:	4293      	cmp	r3, r2
 800927c:	dbba      	blt.n	80091f4 <_strtod_l+0x3fc>
 800927e:	4d42      	ldr	r5, [pc, #264]	; (8009388 <_strtod_l+0x590>)
 8009280:	f1c4 040f 	rsb	r4, r4, #15
 8009284:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009288:	4652      	mov	r2, sl
 800928a:	465b      	mov	r3, fp
 800928c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009290:	f7f7 f9b2 	bl	80005f8 <__aeabi_dmul>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	1b1c      	subs	r4, r3, r4
 8009298:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800929c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092a0:	e78d      	b.n	80091be <_strtod_l+0x3c6>
 80092a2:	f113 0f16 	cmn.w	r3, #22
 80092a6:	dba5      	blt.n	80091f4 <_strtod_l+0x3fc>
 80092a8:	4a37      	ldr	r2, [pc, #220]	; (8009388 <_strtod_l+0x590>)
 80092aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80092ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80092b2:	4650      	mov	r0, sl
 80092b4:	4659      	mov	r1, fp
 80092b6:	f7f7 fac9 	bl	800084c <__aeabi_ddiv>
 80092ba:	e782      	b.n	80091c2 <_strtod_l+0x3ca>
 80092bc:	2300      	movs	r3, #0
 80092be:	4e33      	ldr	r6, [pc, #204]	; (800938c <_strtod_l+0x594>)
 80092c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80092c4:	4650      	mov	r0, sl
 80092c6:	4659      	mov	r1, fp
 80092c8:	461d      	mov	r5, r3
 80092ca:	f1b8 0f01 	cmp.w	r8, #1
 80092ce:	dc21      	bgt.n	8009314 <_strtod_l+0x51c>
 80092d0:	b10b      	cbz	r3, 80092d6 <_strtod_l+0x4de>
 80092d2:	4682      	mov	sl, r0
 80092d4:	468b      	mov	fp, r1
 80092d6:	4b2d      	ldr	r3, [pc, #180]	; (800938c <_strtod_l+0x594>)
 80092d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80092dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80092e0:	4652      	mov	r2, sl
 80092e2:	465b      	mov	r3, fp
 80092e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80092e8:	f7f7 f986 	bl	80005f8 <__aeabi_dmul>
 80092ec:	4b28      	ldr	r3, [pc, #160]	; (8009390 <_strtod_l+0x598>)
 80092ee:	460a      	mov	r2, r1
 80092f0:	400b      	ands	r3, r1
 80092f2:	4928      	ldr	r1, [pc, #160]	; (8009394 <_strtod_l+0x59c>)
 80092f4:	428b      	cmp	r3, r1
 80092f6:	4682      	mov	sl, r0
 80092f8:	d898      	bhi.n	800922c <_strtod_l+0x434>
 80092fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092fe:	428b      	cmp	r3, r1
 8009300:	bf86      	itte	hi
 8009302:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800939c <_strtod_l+0x5a4>
 8009306:	f04f 3aff 	movhi.w	sl, #4294967295
 800930a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800930e:	2300      	movs	r3, #0
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	e077      	b.n	8009404 <_strtod_l+0x60c>
 8009314:	f018 0f01 	tst.w	r8, #1
 8009318:	d006      	beq.n	8009328 <_strtod_l+0x530>
 800931a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	2301      	movs	r3, #1
 8009328:	3501      	adds	r5, #1
 800932a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800932e:	e7cc      	b.n	80092ca <_strtod_l+0x4d2>
 8009330:	d0ed      	beq.n	800930e <_strtod_l+0x516>
 8009332:	f1c8 0800 	rsb	r8, r8, #0
 8009336:	f018 020f 	ands.w	r2, r8, #15
 800933a:	d00a      	beq.n	8009352 <_strtod_l+0x55a>
 800933c:	4b12      	ldr	r3, [pc, #72]	; (8009388 <_strtod_l+0x590>)
 800933e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009342:	4650      	mov	r0, sl
 8009344:	4659      	mov	r1, fp
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f7 fa7f 	bl	800084c <__aeabi_ddiv>
 800934e:	4682      	mov	sl, r0
 8009350:	468b      	mov	fp, r1
 8009352:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009356:	d0da      	beq.n	800930e <_strtod_l+0x516>
 8009358:	f1b8 0f1f 	cmp.w	r8, #31
 800935c:	dd20      	ble.n	80093a0 <_strtod_l+0x5a8>
 800935e:	2400      	movs	r4, #0
 8009360:	46a0      	mov	r8, r4
 8009362:	9407      	str	r4, [sp, #28]
 8009364:	9405      	str	r4, [sp, #20]
 8009366:	2322      	movs	r3, #34	; 0x22
 8009368:	f04f 0a00 	mov.w	sl, #0
 800936c:	f04f 0b00 	mov.w	fp, #0
 8009370:	f8c9 3000 	str.w	r3, [r9]
 8009374:	e765      	b.n	8009242 <_strtod_l+0x44a>
 8009376:	bf00      	nop
 8009378:	0800bc8d 	.word	0x0800bc8d
 800937c:	0800bd1b 	.word	0x0800bd1b
 8009380:	0800bc95 	.word	0x0800bc95
 8009384:	0800bcd8 	.word	0x0800bcd8
 8009388:	0800bd58 	.word	0x0800bd58
 800938c:	0800bd30 	.word	0x0800bd30
 8009390:	7ff00000 	.word	0x7ff00000
 8009394:	7ca00000 	.word	0x7ca00000
 8009398:	fff80000 	.word	0xfff80000
 800939c:	7fefffff 	.word	0x7fefffff
 80093a0:	f018 0310 	ands.w	r3, r8, #16
 80093a4:	bf18      	it	ne
 80093a6:	236a      	movne	r3, #106	; 0x6a
 80093a8:	4da0      	ldr	r5, [pc, #640]	; (800962c <_strtod_l+0x834>)
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	2300      	movs	r3, #0
 80093b2:	f1b8 0f00 	cmp.w	r8, #0
 80093b6:	f300 810a 	bgt.w	80095ce <_strtod_l+0x7d6>
 80093ba:	b10b      	cbz	r3, 80093c0 <_strtod_l+0x5c8>
 80093bc:	4682      	mov	sl, r0
 80093be:	468b      	mov	fp, r1
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	b1bb      	cbz	r3, 80093f4 <_strtod_l+0x5fc>
 80093c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80093c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	4659      	mov	r1, fp
 80093d0:	dd10      	ble.n	80093f4 <_strtod_l+0x5fc>
 80093d2:	2b1f      	cmp	r3, #31
 80093d4:	f340 8107 	ble.w	80095e6 <_strtod_l+0x7ee>
 80093d8:	2b34      	cmp	r3, #52	; 0x34
 80093da:	bfde      	ittt	le
 80093dc:	3b20      	suble	r3, #32
 80093de:	f04f 32ff 	movle.w	r2, #4294967295
 80093e2:	fa02 f303 	lslle.w	r3, r2, r3
 80093e6:	f04f 0a00 	mov.w	sl, #0
 80093ea:	bfcc      	ite	gt
 80093ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80093f0:	ea03 0b01 	andle.w	fp, r3, r1
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	4650      	mov	r0, sl
 80093fa:	4659      	mov	r1, fp
 80093fc:	f7f7 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8009400:	2800      	cmp	r0, #0
 8009402:	d1ac      	bne.n	800935e <_strtod_l+0x566>
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	9a05      	ldr	r2, [sp, #20]
 800940a:	9908      	ldr	r1, [sp, #32]
 800940c:	4623      	mov	r3, r4
 800940e:	4648      	mov	r0, r9
 8009410:	f001 fdaf 	bl	800af72 <__s2b>
 8009414:	9007      	str	r0, [sp, #28]
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f af08 	beq.w	800922c <_strtod_l+0x434>
 800941c:	9a06      	ldr	r2, [sp, #24]
 800941e:	9b06      	ldr	r3, [sp, #24]
 8009420:	2a00      	cmp	r2, #0
 8009422:	f1c3 0300 	rsb	r3, r3, #0
 8009426:	bfa8      	it	ge
 8009428:	2300      	movge	r3, #0
 800942a:	930e      	str	r3, [sp, #56]	; 0x38
 800942c:	2400      	movs	r4, #0
 800942e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009432:	9316      	str	r3, [sp, #88]	; 0x58
 8009434:	46a0      	mov	r8, r4
 8009436:	9b07      	ldr	r3, [sp, #28]
 8009438:	4648      	mov	r0, r9
 800943a:	6859      	ldr	r1, [r3, #4]
 800943c:	f001 fd13 	bl	800ae66 <_Balloc>
 8009440:	9005      	str	r0, [sp, #20]
 8009442:	2800      	cmp	r0, #0
 8009444:	f43f aef6 	beq.w	8009234 <_strtod_l+0x43c>
 8009448:	9b07      	ldr	r3, [sp, #28]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	3202      	adds	r2, #2
 800944e:	f103 010c 	add.w	r1, r3, #12
 8009452:	0092      	lsls	r2, r2, #2
 8009454:	300c      	adds	r0, #12
 8009456:	f001 fcfb 	bl	800ae50 <memcpy>
 800945a:	aa1e      	add	r2, sp, #120	; 0x78
 800945c:	a91d      	add	r1, sp, #116	; 0x74
 800945e:	ec4b ab10 	vmov	d0, sl, fp
 8009462:	4648      	mov	r0, r9
 8009464:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009468:	f002 f83e 	bl	800b4e8 <__d2b>
 800946c:	901c      	str	r0, [sp, #112]	; 0x70
 800946e:	2800      	cmp	r0, #0
 8009470:	f43f aee0 	beq.w	8009234 <_strtod_l+0x43c>
 8009474:	2101      	movs	r1, #1
 8009476:	4648      	mov	r0, r9
 8009478:	f001 fe07 	bl	800b08a <__i2b>
 800947c:	4680      	mov	r8, r0
 800947e:	2800      	cmp	r0, #0
 8009480:	f43f aed8 	beq.w	8009234 <_strtod_l+0x43c>
 8009484:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009486:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009488:	2e00      	cmp	r6, #0
 800948a:	bfab      	itete	ge
 800948c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800948e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009490:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009492:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009494:	bfac      	ite	ge
 8009496:	18f7      	addge	r7, r6, r3
 8009498:	1b9d      	sublt	r5, r3, r6
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	1af6      	subs	r6, r6, r3
 800949e:	4416      	add	r6, r2
 80094a0:	4b63      	ldr	r3, [pc, #396]	; (8009630 <_strtod_l+0x838>)
 80094a2:	3e01      	subs	r6, #1
 80094a4:	429e      	cmp	r6, r3
 80094a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80094aa:	f280 80af 	bge.w	800960c <_strtod_l+0x814>
 80094ae:	1b9b      	subs	r3, r3, r6
 80094b0:	2b1f      	cmp	r3, #31
 80094b2:	eba2 0203 	sub.w	r2, r2, r3
 80094b6:	f04f 0101 	mov.w	r1, #1
 80094ba:	f300 809b 	bgt.w	80095f4 <_strtod_l+0x7fc>
 80094be:	fa01 f303 	lsl.w	r3, r1, r3
 80094c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c4:	2300      	movs	r3, #0
 80094c6:	930a      	str	r3, [sp, #40]	; 0x28
 80094c8:	18be      	adds	r6, r7, r2
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	42b7      	cmp	r7, r6
 80094ce:	4415      	add	r5, r2
 80094d0:	441d      	add	r5, r3
 80094d2:	463b      	mov	r3, r7
 80094d4:	bfa8      	it	ge
 80094d6:	4633      	movge	r3, r6
 80094d8:	42ab      	cmp	r3, r5
 80094da:	bfa8      	it	ge
 80094dc:	462b      	movge	r3, r5
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bfc2      	ittt	gt
 80094e2:	1af6      	subgt	r6, r6, r3
 80094e4:	1aed      	subgt	r5, r5, r3
 80094e6:	1aff      	subgt	r7, r7, r3
 80094e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ea:	b1bb      	cbz	r3, 800951c <_strtod_l+0x724>
 80094ec:	4641      	mov	r1, r8
 80094ee:	461a      	mov	r2, r3
 80094f0:	4648      	mov	r0, r9
 80094f2:	f001 fe69 	bl	800b1c8 <__pow5mult>
 80094f6:	4680      	mov	r8, r0
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f43f ae9b 	beq.w	8009234 <_strtod_l+0x43c>
 80094fe:	4601      	mov	r1, r0
 8009500:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009502:	4648      	mov	r0, r9
 8009504:	f001 fdca 	bl	800b09c <__multiply>
 8009508:	900c      	str	r0, [sp, #48]	; 0x30
 800950a:	2800      	cmp	r0, #0
 800950c:	f43f ae92 	beq.w	8009234 <_strtod_l+0x43c>
 8009510:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009512:	4648      	mov	r0, r9
 8009514:	f001 fcdb 	bl	800aece <_Bfree>
 8009518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800951a:	931c      	str	r3, [sp, #112]	; 0x70
 800951c:	2e00      	cmp	r6, #0
 800951e:	dc7a      	bgt.n	8009616 <_strtod_l+0x81e>
 8009520:	9b06      	ldr	r3, [sp, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dd08      	ble.n	8009538 <_strtod_l+0x740>
 8009526:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009528:	9905      	ldr	r1, [sp, #20]
 800952a:	4648      	mov	r0, r9
 800952c:	f001 fe4c 	bl	800b1c8 <__pow5mult>
 8009530:	9005      	str	r0, [sp, #20]
 8009532:	2800      	cmp	r0, #0
 8009534:	f43f ae7e 	beq.w	8009234 <_strtod_l+0x43c>
 8009538:	2d00      	cmp	r5, #0
 800953a:	dd08      	ble.n	800954e <_strtod_l+0x756>
 800953c:	462a      	mov	r2, r5
 800953e:	9905      	ldr	r1, [sp, #20]
 8009540:	4648      	mov	r0, r9
 8009542:	f001 fe8f 	bl	800b264 <__lshift>
 8009546:	9005      	str	r0, [sp, #20]
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f ae73 	beq.w	8009234 <_strtod_l+0x43c>
 800954e:	2f00      	cmp	r7, #0
 8009550:	dd08      	ble.n	8009564 <_strtod_l+0x76c>
 8009552:	4641      	mov	r1, r8
 8009554:	463a      	mov	r2, r7
 8009556:	4648      	mov	r0, r9
 8009558:	f001 fe84 	bl	800b264 <__lshift>
 800955c:	4680      	mov	r8, r0
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f ae68 	beq.w	8009234 <_strtod_l+0x43c>
 8009564:	9a05      	ldr	r2, [sp, #20]
 8009566:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009568:	4648      	mov	r0, r9
 800956a:	f001 fee9 	bl	800b340 <__mdiff>
 800956e:	4604      	mov	r4, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	f43f ae5f 	beq.w	8009234 <_strtod_l+0x43c>
 8009576:	68c3      	ldr	r3, [r0, #12]
 8009578:	930c      	str	r3, [sp, #48]	; 0x30
 800957a:	2300      	movs	r3, #0
 800957c:	60c3      	str	r3, [r0, #12]
 800957e:	4641      	mov	r1, r8
 8009580:	f001 fec4 	bl	800b30c <__mcmp>
 8009584:	2800      	cmp	r0, #0
 8009586:	da55      	bge.n	8009634 <_strtod_l+0x83c>
 8009588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800958a:	b9e3      	cbnz	r3, 80095c6 <_strtod_l+0x7ce>
 800958c:	f1ba 0f00 	cmp.w	sl, #0
 8009590:	d119      	bne.n	80095c6 <_strtod_l+0x7ce>
 8009592:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009596:	b9b3      	cbnz	r3, 80095c6 <_strtod_l+0x7ce>
 8009598:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800959c:	0d1b      	lsrs	r3, r3, #20
 800959e:	051b      	lsls	r3, r3, #20
 80095a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80095a4:	d90f      	bls.n	80095c6 <_strtod_l+0x7ce>
 80095a6:	6963      	ldr	r3, [r4, #20]
 80095a8:	b913      	cbnz	r3, 80095b0 <_strtod_l+0x7b8>
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	dd0a      	ble.n	80095c6 <_strtod_l+0x7ce>
 80095b0:	4621      	mov	r1, r4
 80095b2:	2201      	movs	r2, #1
 80095b4:	4648      	mov	r0, r9
 80095b6:	f001 fe55 	bl	800b264 <__lshift>
 80095ba:	4641      	mov	r1, r8
 80095bc:	4604      	mov	r4, r0
 80095be:	f001 fea5 	bl	800b30c <__mcmp>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	dc67      	bgt.n	8009696 <_strtod_l+0x89e>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d171      	bne.n	80096b0 <_strtod_l+0x8b8>
 80095cc:	e63d      	b.n	800924a <_strtod_l+0x452>
 80095ce:	f018 0f01 	tst.w	r8, #1
 80095d2:	d004      	beq.n	80095de <_strtod_l+0x7e6>
 80095d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095d8:	f7f7 f80e 	bl	80005f8 <__aeabi_dmul>
 80095dc:	2301      	movs	r3, #1
 80095de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80095e2:	3508      	adds	r5, #8
 80095e4:	e6e5      	b.n	80093b2 <_strtod_l+0x5ba>
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	ea03 0a0a 	and.w	sl, r3, sl
 80095f2:	e6ff      	b.n	80093f4 <_strtod_l+0x5fc>
 80095f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80095f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80095fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009600:	36e2      	adds	r6, #226	; 0xe2
 8009602:	fa01 f306 	lsl.w	r3, r1, r6
 8009606:	930a      	str	r3, [sp, #40]	; 0x28
 8009608:	910f      	str	r1, [sp, #60]	; 0x3c
 800960a:	e75d      	b.n	80094c8 <_strtod_l+0x6d0>
 800960c:	2300      	movs	r3, #0
 800960e:	930a      	str	r3, [sp, #40]	; 0x28
 8009610:	2301      	movs	r3, #1
 8009612:	930f      	str	r3, [sp, #60]	; 0x3c
 8009614:	e758      	b.n	80094c8 <_strtod_l+0x6d0>
 8009616:	4632      	mov	r2, r6
 8009618:	991c      	ldr	r1, [sp, #112]	; 0x70
 800961a:	4648      	mov	r0, r9
 800961c:	f001 fe22 	bl	800b264 <__lshift>
 8009620:	901c      	str	r0, [sp, #112]	; 0x70
 8009622:	2800      	cmp	r0, #0
 8009624:	f47f af7c 	bne.w	8009520 <_strtod_l+0x728>
 8009628:	e604      	b.n	8009234 <_strtod_l+0x43c>
 800962a:	bf00      	nop
 800962c:	0800bcf0 	.word	0x0800bcf0
 8009630:	fffffc02 	.word	0xfffffc02
 8009634:	465d      	mov	r5, fp
 8009636:	f040 8086 	bne.w	8009746 <_strtod_l+0x94e>
 800963a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800963c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009640:	b32a      	cbz	r2, 800968e <_strtod_l+0x896>
 8009642:	4aaf      	ldr	r2, [pc, #700]	; (8009900 <_strtod_l+0xb08>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d153      	bne.n	80096f0 <_strtod_l+0x8f8>
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	4650      	mov	r0, sl
 800964c:	b1d3      	cbz	r3, 8009684 <_strtod_l+0x88c>
 800964e:	4aad      	ldr	r2, [pc, #692]	; (8009904 <_strtod_l+0xb0c>)
 8009650:	402a      	ands	r2, r5
 8009652:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009656:	f04f 31ff 	mov.w	r1, #4294967295
 800965a:	d816      	bhi.n	800968a <_strtod_l+0x892>
 800965c:	0d12      	lsrs	r2, r2, #20
 800965e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009662:	fa01 f303 	lsl.w	r3, r1, r3
 8009666:	4298      	cmp	r0, r3
 8009668:	d142      	bne.n	80096f0 <_strtod_l+0x8f8>
 800966a:	4ba7      	ldr	r3, [pc, #668]	; (8009908 <_strtod_l+0xb10>)
 800966c:	429d      	cmp	r5, r3
 800966e:	d102      	bne.n	8009676 <_strtod_l+0x87e>
 8009670:	3001      	adds	r0, #1
 8009672:	f43f addf 	beq.w	8009234 <_strtod_l+0x43c>
 8009676:	4ba3      	ldr	r3, [pc, #652]	; (8009904 <_strtod_l+0xb0c>)
 8009678:	402b      	ands	r3, r5
 800967a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800967e:	f04f 0a00 	mov.w	sl, #0
 8009682:	e7a0      	b.n	80095c6 <_strtod_l+0x7ce>
 8009684:	f04f 33ff 	mov.w	r3, #4294967295
 8009688:	e7ed      	b.n	8009666 <_strtod_l+0x86e>
 800968a:	460b      	mov	r3, r1
 800968c:	e7eb      	b.n	8009666 <_strtod_l+0x86e>
 800968e:	bb7b      	cbnz	r3, 80096f0 <_strtod_l+0x8f8>
 8009690:	f1ba 0f00 	cmp.w	sl, #0
 8009694:	d12c      	bne.n	80096f0 <_strtod_l+0x8f8>
 8009696:	9904      	ldr	r1, [sp, #16]
 8009698:	4a9a      	ldr	r2, [pc, #616]	; (8009904 <_strtod_l+0xb0c>)
 800969a:	465b      	mov	r3, fp
 800969c:	b1f1      	cbz	r1, 80096dc <_strtod_l+0x8e4>
 800969e:	ea02 010b 	and.w	r1, r2, fp
 80096a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80096a6:	dc19      	bgt.n	80096dc <_strtod_l+0x8e4>
 80096a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096ac:	f77f ae5b 	ble.w	8009366 <_strtod_l+0x56e>
 80096b0:	4a96      	ldr	r2, [pc, #600]	; (800990c <_strtod_l+0xb14>)
 80096b2:	2300      	movs	r3, #0
 80096b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80096b8:	4650      	mov	r0, sl
 80096ba:	4659      	mov	r1, fp
 80096bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80096c0:	f7f6 ff9a 	bl	80005f8 <__aeabi_dmul>
 80096c4:	4682      	mov	sl, r0
 80096c6:	468b      	mov	fp, r1
 80096c8:	2900      	cmp	r1, #0
 80096ca:	f47f adbe 	bne.w	800924a <_strtod_l+0x452>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f47f adbb 	bne.w	800924a <_strtod_l+0x452>
 80096d4:	2322      	movs	r3, #34	; 0x22
 80096d6:	f8c9 3000 	str.w	r3, [r9]
 80096da:	e5b6      	b.n	800924a <_strtod_l+0x452>
 80096dc:	4013      	ands	r3, r2
 80096de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80096e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80096ea:	f04f 3aff 	mov.w	sl, #4294967295
 80096ee:	e76a      	b.n	80095c6 <_strtod_l+0x7ce>
 80096f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f2:	b193      	cbz	r3, 800971a <_strtod_l+0x922>
 80096f4:	422b      	tst	r3, r5
 80096f6:	f43f af66 	beq.w	80095c6 <_strtod_l+0x7ce>
 80096fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096fc:	9a04      	ldr	r2, [sp, #16]
 80096fe:	4650      	mov	r0, sl
 8009700:	4659      	mov	r1, fp
 8009702:	b173      	cbz	r3, 8009722 <_strtod_l+0x92a>
 8009704:	f7ff fb5a 	bl	8008dbc <sulp>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009710:	f7f6 fdbc 	bl	800028c <__adddf3>
 8009714:	4682      	mov	sl, r0
 8009716:	468b      	mov	fp, r1
 8009718:	e755      	b.n	80095c6 <_strtod_l+0x7ce>
 800971a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800971c:	ea13 0f0a 	tst.w	r3, sl
 8009720:	e7e9      	b.n	80096f6 <_strtod_l+0x8fe>
 8009722:	f7ff fb4b 	bl	8008dbc <sulp>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800972e:	f7f6 fdab 	bl	8000288 <__aeabi_dsub>
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	4682      	mov	sl, r0
 8009738:	468b      	mov	fp, r1
 800973a:	f7f7 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800973e:	2800      	cmp	r0, #0
 8009740:	f47f ae11 	bne.w	8009366 <_strtod_l+0x56e>
 8009744:	e73f      	b.n	80095c6 <_strtod_l+0x7ce>
 8009746:	4641      	mov	r1, r8
 8009748:	4620      	mov	r0, r4
 800974a:	f001 ff1c 	bl	800b586 <__ratio>
 800974e:	ec57 6b10 	vmov	r6, r7, d0
 8009752:	2200      	movs	r2, #0
 8009754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009758:	ee10 0a10 	vmov	r0, s0
 800975c:	4639      	mov	r1, r7
 800975e:	f7f7 f9c7 	bl	8000af0 <__aeabi_dcmple>
 8009762:	2800      	cmp	r0, #0
 8009764:	d077      	beq.n	8009856 <_strtod_l+0xa5e>
 8009766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009768:	2b00      	cmp	r3, #0
 800976a:	d04a      	beq.n	8009802 <_strtod_l+0xa0a>
 800976c:	4b68      	ldr	r3, [pc, #416]	; (8009910 <_strtod_l+0xb18>)
 800976e:	2200      	movs	r2, #0
 8009770:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009774:	4f66      	ldr	r7, [pc, #408]	; (8009910 <_strtod_l+0xb18>)
 8009776:	2600      	movs	r6, #0
 8009778:	4b62      	ldr	r3, [pc, #392]	; (8009904 <_strtod_l+0xb0c>)
 800977a:	402b      	ands	r3, r5
 800977c:	930f      	str	r3, [sp, #60]	; 0x3c
 800977e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009780:	4b64      	ldr	r3, [pc, #400]	; (8009914 <_strtod_l+0xb1c>)
 8009782:	429a      	cmp	r2, r3
 8009784:	f040 80ce 	bne.w	8009924 <_strtod_l+0xb2c>
 8009788:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800978c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009790:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009794:	ec4b ab10 	vmov	d0, sl, fp
 8009798:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800979c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80097a0:	f001 fe2c 	bl	800b3fc <__ulp>
 80097a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097a8:	ec53 2b10 	vmov	r2, r3, d0
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	4652      	mov	r2, sl
 80097b2:	465b      	mov	r3, fp
 80097b4:	f7f6 fd6a 	bl	800028c <__adddf3>
 80097b8:	460b      	mov	r3, r1
 80097ba:	4952      	ldr	r1, [pc, #328]	; (8009904 <_strtod_l+0xb0c>)
 80097bc:	4a56      	ldr	r2, [pc, #344]	; (8009918 <_strtod_l+0xb20>)
 80097be:	4019      	ands	r1, r3
 80097c0:	4291      	cmp	r1, r2
 80097c2:	4682      	mov	sl, r0
 80097c4:	d95b      	bls.n	800987e <_strtod_l+0xa86>
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d103      	bne.n	80097d8 <_strtod_l+0x9e0>
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	3301      	adds	r3, #1
 80097d4:	f43f ad2e 	beq.w	8009234 <_strtod_l+0x43c>
 80097d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009908 <_strtod_l+0xb10>
 80097dc:	f04f 3aff 	mov.w	sl, #4294967295
 80097e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097e2:	4648      	mov	r0, r9
 80097e4:	f001 fb73 	bl	800aece <_Bfree>
 80097e8:	9905      	ldr	r1, [sp, #20]
 80097ea:	4648      	mov	r0, r9
 80097ec:	f001 fb6f 	bl	800aece <_Bfree>
 80097f0:	4641      	mov	r1, r8
 80097f2:	4648      	mov	r0, r9
 80097f4:	f001 fb6b 	bl	800aece <_Bfree>
 80097f8:	4621      	mov	r1, r4
 80097fa:	4648      	mov	r0, r9
 80097fc:	f001 fb67 	bl	800aece <_Bfree>
 8009800:	e619      	b.n	8009436 <_strtod_l+0x63e>
 8009802:	f1ba 0f00 	cmp.w	sl, #0
 8009806:	d11a      	bne.n	800983e <_strtod_l+0xa46>
 8009808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800980c:	b9eb      	cbnz	r3, 800984a <_strtod_l+0xa52>
 800980e:	2200      	movs	r2, #0
 8009810:	4b3f      	ldr	r3, [pc, #252]	; (8009910 <_strtod_l+0xb18>)
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f7 f961 	bl	8000adc <__aeabi_dcmplt>
 800981a:	b9c8      	cbnz	r0, 8009850 <_strtod_l+0xa58>
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	2200      	movs	r2, #0
 8009822:	4b3e      	ldr	r3, [pc, #248]	; (800991c <_strtod_l+0xb24>)
 8009824:	f7f6 fee8 	bl	80005f8 <__aeabi_dmul>
 8009828:	4606      	mov	r6, r0
 800982a:	460f      	mov	r7, r1
 800982c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009830:	9618      	str	r6, [sp, #96]	; 0x60
 8009832:	9319      	str	r3, [sp, #100]	; 0x64
 8009834:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009838:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800983c:	e79c      	b.n	8009778 <_strtod_l+0x980>
 800983e:	f1ba 0f01 	cmp.w	sl, #1
 8009842:	d102      	bne.n	800984a <_strtod_l+0xa52>
 8009844:	2d00      	cmp	r5, #0
 8009846:	f43f ad8e 	beq.w	8009366 <_strtod_l+0x56e>
 800984a:	2200      	movs	r2, #0
 800984c:	4b34      	ldr	r3, [pc, #208]	; (8009920 <_strtod_l+0xb28>)
 800984e:	e78f      	b.n	8009770 <_strtod_l+0x978>
 8009850:	2600      	movs	r6, #0
 8009852:	4f32      	ldr	r7, [pc, #200]	; (800991c <_strtod_l+0xb24>)
 8009854:	e7ea      	b.n	800982c <_strtod_l+0xa34>
 8009856:	4b31      	ldr	r3, [pc, #196]	; (800991c <_strtod_l+0xb24>)
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	2200      	movs	r2, #0
 800985e:	f7f6 fecb 	bl	80005f8 <__aeabi_dmul>
 8009862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009864:	4606      	mov	r6, r0
 8009866:	460f      	mov	r7, r1
 8009868:	b933      	cbnz	r3, 8009878 <_strtod_l+0xa80>
 800986a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800986e:	9010      	str	r0, [sp, #64]	; 0x40
 8009870:	9311      	str	r3, [sp, #68]	; 0x44
 8009872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009876:	e7df      	b.n	8009838 <_strtod_l+0xa40>
 8009878:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800987c:	e7f9      	b.n	8009872 <_strtod_l+0xa7a>
 800987e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1ab      	bne.n	80097e0 <_strtod_l+0x9e8>
 8009888:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800988c:	0d1b      	lsrs	r3, r3, #20
 800988e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009890:	051b      	lsls	r3, r3, #20
 8009892:	429a      	cmp	r2, r3
 8009894:	465d      	mov	r5, fp
 8009896:	d1a3      	bne.n	80097e0 <_strtod_l+0x9e8>
 8009898:	4639      	mov	r1, r7
 800989a:	4630      	mov	r0, r6
 800989c:	f7f7 f95c 	bl	8000b58 <__aeabi_d2iz>
 80098a0:	f7f6 fe40 	bl	8000524 <__aeabi_i2d>
 80098a4:	460b      	mov	r3, r1
 80098a6:	4602      	mov	r2, r0
 80098a8:	4639      	mov	r1, r7
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7f6 fcec 	bl	8000288 <__aeabi_dsub>
 80098b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	b933      	cbnz	r3, 80098c6 <_strtod_l+0xace>
 80098b8:	f1ba 0f00 	cmp.w	sl, #0
 80098bc:	d103      	bne.n	80098c6 <_strtod_l+0xace>
 80098be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	d06d      	beq.n	80099a2 <_strtod_l+0xbaa>
 80098c6:	a30a      	add	r3, pc, #40	; (adr r3, 80098f0 <_strtod_l+0xaf8>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	4630      	mov	r0, r6
 80098ce:	4639      	mov	r1, r7
 80098d0:	f7f7 f904 	bl	8000adc <__aeabi_dcmplt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f47f acb8 	bne.w	800924a <_strtod_l+0x452>
 80098da:	a307      	add	r3, pc, #28	; (adr r3, 80098f8 <_strtod_l+0xb00>)
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f7 f918 	bl	8000b18 <__aeabi_dcmpgt>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f43f af79 	beq.w	80097e0 <_strtod_l+0x9e8>
 80098ee:	e4ac      	b.n	800924a <_strtod_l+0x452>
 80098f0:	94a03595 	.word	0x94a03595
 80098f4:	3fdfffff 	.word	0x3fdfffff
 80098f8:	35afe535 	.word	0x35afe535
 80098fc:	3fe00000 	.word	0x3fe00000
 8009900:	000fffff 	.word	0x000fffff
 8009904:	7ff00000 	.word	0x7ff00000
 8009908:	7fefffff 	.word	0x7fefffff
 800990c:	39500000 	.word	0x39500000
 8009910:	3ff00000 	.word	0x3ff00000
 8009914:	7fe00000 	.word	0x7fe00000
 8009918:	7c9fffff 	.word	0x7c9fffff
 800991c:	3fe00000 	.word	0x3fe00000
 8009920:	bff00000 	.word	0xbff00000
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	b333      	cbz	r3, 8009976 <_strtod_l+0xb7e>
 8009928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800992a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800992e:	d822      	bhi.n	8009976 <_strtod_l+0xb7e>
 8009930:	a327      	add	r3, pc, #156	; (adr r3, 80099d0 <_strtod_l+0xbd8>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f7 f8d9 	bl	8000af0 <__aeabi_dcmple>
 800993e:	b1a0      	cbz	r0, 800996a <_strtod_l+0xb72>
 8009940:	4639      	mov	r1, r7
 8009942:	4630      	mov	r0, r6
 8009944:	f7f7 f930 	bl	8000ba8 <__aeabi_d2uiz>
 8009948:	2800      	cmp	r0, #0
 800994a:	bf08      	it	eq
 800994c:	2001      	moveq	r0, #1
 800994e:	f7f6 fdd9 	bl	8000504 <__aeabi_ui2d>
 8009952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	bb03      	cbnz	r3, 800999c <_strtod_l+0xba4>
 800995a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800995e:	9012      	str	r0, [sp, #72]	; 0x48
 8009960:	9313      	str	r3, [sp, #76]	; 0x4c
 8009962:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009966:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800996a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800996c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800996e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	930b      	str	r3, [sp, #44]	; 0x2c
 8009976:	ed9d 0b08 	vldr	d0, [sp, #32]
 800997a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800997e:	f001 fd3d 	bl	800b3fc <__ulp>
 8009982:	4650      	mov	r0, sl
 8009984:	ec53 2b10 	vmov	r2, r3, d0
 8009988:	4659      	mov	r1, fp
 800998a:	f7f6 fe35 	bl	80005f8 <__aeabi_dmul>
 800998e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009992:	f7f6 fc7b 	bl	800028c <__adddf3>
 8009996:	4682      	mov	sl, r0
 8009998:	468b      	mov	fp, r1
 800999a:	e772      	b.n	8009882 <_strtod_l+0xa8a>
 800999c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80099a0:	e7df      	b.n	8009962 <_strtod_l+0xb6a>
 80099a2:	a30d      	add	r3, pc, #52	; (adr r3, 80099d8 <_strtod_l+0xbe0>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f7f7 f898 	bl	8000adc <__aeabi_dcmplt>
 80099ac:	e79c      	b.n	80098e8 <_strtod_l+0xaf0>
 80099ae:	2300      	movs	r3, #0
 80099b0:	930d      	str	r3, [sp, #52]	; 0x34
 80099b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	f7ff ba61 	b.w	8008e7e <_strtod_l+0x86>
 80099bc:	2b65      	cmp	r3, #101	; 0x65
 80099be:	f04f 0200 	mov.w	r2, #0
 80099c2:	f43f ab4e 	beq.w	8009062 <_strtod_l+0x26a>
 80099c6:	2101      	movs	r1, #1
 80099c8:	4614      	mov	r4, r2
 80099ca:	9104      	str	r1, [sp, #16]
 80099cc:	f7ff bacb 	b.w	8008f66 <_strtod_l+0x16e>
 80099d0:	ffc00000 	.word	0xffc00000
 80099d4:	41dfffff 	.word	0x41dfffff
 80099d8:	94a03595 	.word	0x94a03595
 80099dc:	3fcfffff 	.word	0x3fcfffff

080099e0 <_strtod_r>:
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <_strtod_r+0x18>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	b410      	push	{r4}
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	4c04      	ldr	r4, [pc, #16]	; (80099fc <_strtod_r+0x1c>)
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bf08      	it	eq
 80099ee:	4623      	moveq	r3, r4
 80099f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f4:	f7ff ba00 	b.w	8008df8 <_strtod_l>
 80099f8:	2000000c 	.word	0x2000000c
 80099fc:	20000070 	.word	0x20000070

08009a00 <_strtol_l.isra.0>:
 8009a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a04:	4680      	mov	r8, r0
 8009a06:	4689      	mov	r9, r1
 8009a08:	4692      	mov	sl, r2
 8009a0a:	461e      	mov	r6, r3
 8009a0c:	460f      	mov	r7, r1
 8009a0e:	463d      	mov	r5, r7
 8009a10:	9808      	ldr	r0, [sp, #32]
 8009a12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a16:	f001 f9ed 	bl	800adf4 <__locale_ctype_ptr_l>
 8009a1a:	4420      	add	r0, r4
 8009a1c:	7843      	ldrb	r3, [r0, #1]
 8009a1e:	f013 0308 	ands.w	r3, r3, #8
 8009a22:	d132      	bne.n	8009a8a <_strtol_l.isra.0+0x8a>
 8009a24:	2c2d      	cmp	r4, #45	; 0x2d
 8009a26:	d132      	bne.n	8009a8e <_strtol_l.isra.0+0x8e>
 8009a28:	787c      	ldrb	r4, [r7, #1]
 8009a2a:	1cbd      	adds	r5, r7, #2
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	2e00      	cmp	r6, #0
 8009a30:	d05d      	beq.n	8009aee <_strtol_l.isra.0+0xee>
 8009a32:	2e10      	cmp	r6, #16
 8009a34:	d109      	bne.n	8009a4a <_strtol_l.isra.0+0x4a>
 8009a36:	2c30      	cmp	r4, #48	; 0x30
 8009a38:	d107      	bne.n	8009a4a <_strtol_l.isra.0+0x4a>
 8009a3a:	782b      	ldrb	r3, [r5, #0]
 8009a3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a40:	2b58      	cmp	r3, #88	; 0x58
 8009a42:	d14f      	bne.n	8009ae4 <_strtol_l.isra.0+0xe4>
 8009a44:	786c      	ldrb	r4, [r5, #1]
 8009a46:	2610      	movs	r6, #16
 8009a48:	3502      	adds	r5, #2
 8009a4a:	2a00      	cmp	r2, #0
 8009a4c:	bf14      	ite	ne
 8009a4e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009a52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009a56:	2700      	movs	r7, #0
 8009a58:	fbb1 fcf6 	udiv	ip, r1, r6
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009a62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009a66:	2b09      	cmp	r3, #9
 8009a68:	d817      	bhi.n	8009a9a <_strtol_l.isra.0+0x9a>
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	42a6      	cmp	r6, r4
 8009a6e:	dd23      	ble.n	8009ab8 <_strtol_l.isra.0+0xb8>
 8009a70:	1c7b      	adds	r3, r7, #1
 8009a72:	d007      	beq.n	8009a84 <_strtol_l.isra.0+0x84>
 8009a74:	4584      	cmp	ip, r0
 8009a76:	d31c      	bcc.n	8009ab2 <_strtol_l.isra.0+0xb2>
 8009a78:	d101      	bne.n	8009a7e <_strtol_l.isra.0+0x7e>
 8009a7a:	45a6      	cmp	lr, r4
 8009a7c:	db19      	blt.n	8009ab2 <_strtol_l.isra.0+0xb2>
 8009a7e:	fb00 4006 	mla	r0, r0, r6, r4
 8009a82:	2701      	movs	r7, #1
 8009a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a88:	e7eb      	b.n	8009a62 <_strtol_l.isra.0+0x62>
 8009a8a:	462f      	mov	r7, r5
 8009a8c:	e7bf      	b.n	8009a0e <_strtol_l.isra.0+0xe>
 8009a8e:	2c2b      	cmp	r4, #43	; 0x2b
 8009a90:	bf04      	itt	eq
 8009a92:	1cbd      	addeq	r5, r7, #2
 8009a94:	787c      	ldrbeq	r4, [r7, #1]
 8009a96:	461a      	mov	r2, r3
 8009a98:	e7c9      	b.n	8009a2e <_strtol_l.isra.0+0x2e>
 8009a9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009a9e:	2b19      	cmp	r3, #25
 8009aa0:	d801      	bhi.n	8009aa6 <_strtol_l.isra.0+0xa6>
 8009aa2:	3c37      	subs	r4, #55	; 0x37
 8009aa4:	e7e2      	b.n	8009a6c <_strtol_l.isra.0+0x6c>
 8009aa6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009aaa:	2b19      	cmp	r3, #25
 8009aac:	d804      	bhi.n	8009ab8 <_strtol_l.isra.0+0xb8>
 8009aae:	3c57      	subs	r4, #87	; 0x57
 8009ab0:	e7dc      	b.n	8009a6c <_strtol_l.isra.0+0x6c>
 8009ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8009ab6:	e7e5      	b.n	8009a84 <_strtol_l.isra.0+0x84>
 8009ab8:	1c7b      	adds	r3, r7, #1
 8009aba:	d108      	bne.n	8009ace <_strtol_l.isra.0+0xce>
 8009abc:	2322      	movs	r3, #34	; 0x22
 8009abe:	f8c8 3000 	str.w	r3, [r8]
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	f1ba 0f00 	cmp.w	sl, #0
 8009ac8:	d107      	bne.n	8009ada <_strtol_l.isra.0+0xda>
 8009aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ace:	b102      	cbz	r2, 8009ad2 <_strtol_l.isra.0+0xd2>
 8009ad0:	4240      	negs	r0, r0
 8009ad2:	f1ba 0f00 	cmp.w	sl, #0
 8009ad6:	d0f8      	beq.n	8009aca <_strtol_l.isra.0+0xca>
 8009ad8:	b10f      	cbz	r7, 8009ade <_strtol_l.isra.0+0xde>
 8009ada:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ade:	f8ca 9000 	str.w	r9, [sl]
 8009ae2:	e7f2      	b.n	8009aca <_strtol_l.isra.0+0xca>
 8009ae4:	2430      	movs	r4, #48	; 0x30
 8009ae6:	2e00      	cmp	r6, #0
 8009ae8:	d1af      	bne.n	8009a4a <_strtol_l.isra.0+0x4a>
 8009aea:	2608      	movs	r6, #8
 8009aec:	e7ad      	b.n	8009a4a <_strtol_l.isra.0+0x4a>
 8009aee:	2c30      	cmp	r4, #48	; 0x30
 8009af0:	d0a3      	beq.n	8009a3a <_strtol_l.isra.0+0x3a>
 8009af2:	260a      	movs	r6, #10
 8009af4:	e7a9      	b.n	8009a4a <_strtol_l.isra.0+0x4a>
	...

08009af8 <_strtol_r>:
 8009af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009afa:	4c06      	ldr	r4, [pc, #24]	; (8009b14 <_strtol_r+0x1c>)
 8009afc:	4d06      	ldr	r5, [pc, #24]	; (8009b18 <_strtol_r+0x20>)
 8009afe:	6824      	ldr	r4, [r4, #0]
 8009b00:	6a24      	ldr	r4, [r4, #32]
 8009b02:	2c00      	cmp	r4, #0
 8009b04:	bf08      	it	eq
 8009b06:	462c      	moveq	r4, r5
 8009b08:	9400      	str	r4, [sp, #0]
 8009b0a:	f7ff ff79 	bl	8009a00 <_strtol_l.isra.0>
 8009b0e:	b003      	add	sp, #12
 8009b10:	bd30      	pop	{r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	2000000c 	.word	0x2000000c
 8009b18:	20000070 	.word	0x20000070

08009b1c <quorem>:
 8009b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	6903      	ldr	r3, [r0, #16]
 8009b22:	690c      	ldr	r4, [r1, #16]
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	4680      	mov	r8, r0
 8009b28:	f2c0 8082 	blt.w	8009c30 <quorem+0x114>
 8009b2c:	3c01      	subs	r4, #1
 8009b2e:	f101 0714 	add.w	r7, r1, #20
 8009b32:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b36:	f100 0614 	add.w	r6, r0, #20
 8009b3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009b3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009b42:	eb06 030c 	add.w	r3, r6, ip
 8009b46:	3501      	adds	r5, #1
 8009b48:	eb07 090c 	add.w	r9, r7, ip
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009b52:	b395      	cbz	r5, 8009bba <quorem+0x9e>
 8009b54:	f04f 0a00 	mov.w	sl, #0
 8009b58:	4638      	mov	r0, r7
 8009b5a:	46b6      	mov	lr, r6
 8009b5c:	46d3      	mov	fp, sl
 8009b5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b62:	b293      	uxth	r3, r2
 8009b64:	fb05 a303 	mla	r3, r5, r3, sl
 8009b68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	ebab 0303 	sub.w	r3, fp, r3
 8009b72:	0c12      	lsrs	r2, r2, #16
 8009b74:	f8de b000 	ldr.w	fp, [lr]
 8009b78:	fb05 a202 	mla	r2, r5, r2, sl
 8009b7c:	fa13 f38b 	uxtah	r3, r3, fp
 8009b80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009b84:	fa1f fb82 	uxth.w	fp, r2
 8009b88:	f8de 2000 	ldr.w	r2, [lr]
 8009b8c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009b90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b9a:	4581      	cmp	r9, r0
 8009b9c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009ba0:	f84e 3b04 	str.w	r3, [lr], #4
 8009ba4:	d2db      	bcs.n	8009b5e <quorem+0x42>
 8009ba6:	f856 300c 	ldr.w	r3, [r6, ip]
 8009baa:	b933      	cbnz	r3, 8009bba <quorem+0x9e>
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	3b04      	subs	r3, #4
 8009bb0:	429e      	cmp	r6, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	d330      	bcc.n	8009c18 <quorem+0xfc>
 8009bb6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009bba:	4640      	mov	r0, r8
 8009bbc:	f001 fba6 	bl	800b30c <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	db25      	blt.n	8009c10 <quorem+0xf4>
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f04f 0c00 	mov.w	ip, #0
 8009bcc:	f857 2b04 	ldr.w	r2, [r7], #4
 8009bd0:	f8d0 e000 	ldr.w	lr, [r0]
 8009bd4:	b293      	uxth	r3, r2
 8009bd6:	ebac 0303 	sub.w	r3, ip, r3
 8009bda:	0c12      	lsrs	r2, r2, #16
 8009bdc:	fa13 f38e 	uxtah	r3, r3, lr
 8009be0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bee:	45b9      	cmp	r9, r7
 8009bf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bf4:	f840 3b04 	str.w	r3, [r0], #4
 8009bf8:	d2e8      	bcs.n	8009bcc <quorem+0xb0>
 8009bfa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009bfe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009c02:	b92a      	cbnz	r2, 8009c10 <quorem+0xf4>
 8009c04:	3b04      	subs	r3, #4
 8009c06:	429e      	cmp	r6, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	d30b      	bcc.n	8009c24 <quorem+0x108>
 8009c0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009c10:	4628      	mov	r0, r5
 8009c12:	b003      	add	sp, #12
 8009c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d1ca      	bne.n	8009bb6 <quorem+0x9a>
 8009c20:	3c01      	subs	r4, #1
 8009c22:	e7c5      	b.n	8009bb0 <quorem+0x94>
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	3b04      	subs	r3, #4
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	d1ef      	bne.n	8009c0c <quorem+0xf0>
 8009c2c:	3c01      	subs	r4, #1
 8009c2e:	e7ea      	b.n	8009c06 <quorem+0xea>
 8009c30:	2000      	movs	r0, #0
 8009c32:	e7ee      	b.n	8009c12 <quorem+0xf6>
 8009c34:	0000      	movs	r0, r0
	...

08009c38 <_dtoa_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	ec57 6b10 	vmov	r6, r7, d0
 8009c40:	b097      	sub	sp, #92	; 0x5c
 8009c42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c44:	9106      	str	r1, [sp, #24]
 8009c46:	4604      	mov	r4, r0
 8009c48:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c4a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c50:	e9cd 6700 	strd	r6, r7, [sp]
 8009c54:	b93d      	cbnz	r5, 8009c66 <_dtoa_r+0x2e>
 8009c56:	2010      	movs	r0, #16
 8009c58:	f001 f8e0 	bl	800ae1c <malloc>
 8009c5c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c62:	6005      	str	r5, [r0, #0]
 8009c64:	60c5      	str	r5, [r0, #12]
 8009c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c68:	6819      	ldr	r1, [r3, #0]
 8009c6a:	b151      	cbz	r1, 8009c82 <_dtoa_r+0x4a>
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	604a      	str	r2, [r1, #4]
 8009c70:	2301      	movs	r3, #1
 8009c72:	4093      	lsls	r3, r2
 8009c74:	608b      	str	r3, [r1, #8]
 8009c76:	4620      	mov	r0, r4
 8009c78:	f001 f929 	bl	800aece <_Bfree>
 8009c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	1e3b      	subs	r3, r7, #0
 8009c84:	bfbb      	ittet	lt
 8009c86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c8a:	9301      	strlt	r3, [sp, #4]
 8009c8c:	2300      	movge	r3, #0
 8009c8e:	2201      	movlt	r2, #1
 8009c90:	bfac      	ite	ge
 8009c92:	f8c8 3000 	strge.w	r3, [r8]
 8009c96:	f8c8 2000 	strlt.w	r2, [r8]
 8009c9a:	4baf      	ldr	r3, [pc, #700]	; (8009f58 <_dtoa_r+0x320>)
 8009c9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ca0:	ea33 0308 	bics.w	r3, r3, r8
 8009ca4:	d114      	bne.n	8009cd0 <_dtoa_r+0x98>
 8009ca6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ca8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	9b00      	ldr	r3, [sp, #0]
 8009cb0:	b923      	cbnz	r3, 8009cbc <_dtoa_r+0x84>
 8009cb2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f000 8542 	beq.w	800a740 <_dtoa_r+0xb08>
 8009cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009f6c <_dtoa_r+0x334>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 8544 	beq.w	800a750 <_dtoa_r+0xb18>
 8009cc8:	f10b 0303 	add.w	r3, fp, #3
 8009ccc:	f000 bd3e 	b.w	800a74c <_dtoa_r+0xb14>
 8009cd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ce0:	4681      	mov	r9, r0
 8009ce2:	b168      	cbz	r0, 8009d00 <_dtoa_r+0xc8>
 8009ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 8524 	beq.w	800a73a <_dtoa_r+0xb02>
 8009cf2:	4b9a      	ldr	r3, [pc, #616]	; (8009f5c <_dtoa_r+0x324>)
 8009cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cf6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	f000 bd28 	b.w	800a750 <_dtoa_r+0xb18>
 8009d00:	aa14      	add	r2, sp, #80	; 0x50
 8009d02:	a915      	add	r1, sp, #84	; 0x54
 8009d04:	ec47 6b10 	vmov	d0, r6, r7
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f001 fbed 	bl	800b4e8 <__d2b>
 8009d0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009d12:	9004      	str	r0, [sp, #16]
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	d07c      	beq.n	8009e12 <_dtoa_r+0x1da>
 8009d18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009d20:	46b2      	mov	sl, r6
 8009d22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009d26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4b8b      	ldr	r3, [pc, #556]	; (8009f60 <_dtoa_r+0x328>)
 8009d32:	4650      	mov	r0, sl
 8009d34:	4659      	mov	r1, fp
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	a381      	add	r3, pc, #516	; (adr r3, 8009f40 <_dtoa_r+0x308>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	a380      	add	r3, pc, #512	; (adr r3, 8009f48 <_dtoa_r+0x310>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f7f6 fa9f 	bl	800028c <__adddf3>
 8009d4e:	4606      	mov	r6, r0
 8009d50:	4628      	mov	r0, r5
 8009d52:	460f      	mov	r7, r1
 8009d54:	f7f6 fbe6 	bl	8000524 <__aeabi_i2d>
 8009d58:	a37d      	add	r3, pc, #500	; (adr r3, 8009f50 <_dtoa_r+0x318>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fc4b 	bl	80005f8 <__aeabi_dmul>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 fa8f 	bl	800028c <__adddf3>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	f7f6 fef1 	bl	8000b58 <__aeabi_d2iz>
 8009d76:	2200      	movs	r2, #0
 8009d78:	4682      	mov	sl, r0
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 feac 	bl	8000adc <__aeabi_dcmplt>
 8009d84:	b148      	cbz	r0, 8009d9a <_dtoa_r+0x162>
 8009d86:	4650      	mov	r0, sl
 8009d88:	f7f6 fbcc 	bl	8000524 <__aeabi_i2d>
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	f7f6 fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d94:	b908      	cbnz	r0, 8009d9a <_dtoa_r+0x162>
 8009d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d9a:	f1ba 0f16 	cmp.w	sl, #22
 8009d9e:	d859      	bhi.n	8009e54 <_dtoa_r+0x21c>
 8009da0:	4970      	ldr	r1, [pc, #448]	; (8009f64 <_dtoa_r+0x32c>)
 8009da2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dae:	f7f6 feb3 	bl	8000b18 <__aeabi_dcmpgt>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d050      	beq.n	8009e58 <_dtoa_r+0x220>
 8009db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dba:	2300      	movs	r3, #0
 8009dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dc0:	1b5d      	subs	r5, r3, r5
 8009dc2:	f1b5 0801 	subs.w	r8, r5, #1
 8009dc6:	bf49      	itett	mi
 8009dc8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009dcc:	2300      	movpl	r3, #0
 8009dce:	9305      	strmi	r3, [sp, #20]
 8009dd0:	f04f 0800 	movmi.w	r8, #0
 8009dd4:	bf58      	it	pl
 8009dd6:	9305      	strpl	r3, [sp, #20]
 8009dd8:	f1ba 0f00 	cmp.w	sl, #0
 8009ddc:	db3e      	blt.n	8009e5c <_dtoa_r+0x224>
 8009dde:	2300      	movs	r3, #0
 8009de0:	44d0      	add	r8, sl
 8009de2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009de6:	9307      	str	r3, [sp, #28]
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	2b09      	cmp	r3, #9
 8009dec:	f200 8090 	bhi.w	8009f10 <_dtoa_r+0x2d8>
 8009df0:	2b05      	cmp	r3, #5
 8009df2:	bfc4      	itt	gt
 8009df4:	3b04      	subgt	r3, #4
 8009df6:	9306      	strgt	r3, [sp, #24]
 8009df8:	9b06      	ldr	r3, [sp, #24]
 8009dfa:	f1a3 0302 	sub.w	r3, r3, #2
 8009dfe:	bfcc      	ite	gt
 8009e00:	2500      	movgt	r5, #0
 8009e02:	2501      	movle	r5, #1
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	f200 808f 	bhi.w	8009f28 <_dtoa_r+0x2f0>
 8009e0a:	e8df f003 	tbb	[pc, r3]
 8009e0e:	7f7d      	.short	0x7f7d
 8009e10:	7131      	.short	0x7131
 8009e12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009e16:	441d      	add	r5, r3
 8009e18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009e1c:	2820      	cmp	r0, #32
 8009e1e:	dd13      	ble.n	8009e48 <_dtoa_r+0x210>
 8009e20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009e24:	9b00      	ldr	r3, [sp, #0]
 8009e26:	fa08 f800 	lsl.w	r8, r8, r0
 8009e2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009e2e:	fa23 f000 	lsr.w	r0, r3, r0
 8009e32:	ea48 0000 	orr.w	r0, r8, r0
 8009e36:	f7f6 fb65 	bl	8000504 <__aeabi_ui2d>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009e42:	3d01      	subs	r5, #1
 8009e44:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e46:	e772      	b.n	8009d2e <_dtoa_r+0xf6>
 8009e48:	9b00      	ldr	r3, [sp, #0]
 8009e4a:	f1c0 0020 	rsb	r0, r0, #32
 8009e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e52:	e7f0      	b.n	8009e36 <_dtoa_r+0x1fe>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e7b1      	b.n	8009dbc <_dtoa_r+0x184>
 8009e58:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e5a:	e7b0      	b.n	8009dbe <_dtoa_r+0x186>
 8009e5c:	9b05      	ldr	r3, [sp, #20]
 8009e5e:	eba3 030a 	sub.w	r3, r3, sl
 8009e62:	9305      	str	r3, [sp, #20]
 8009e64:	f1ca 0300 	rsb	r3, sl, #0
 8009e68:	9307      	str	r3, [sp, #28]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e6e:	e7bb      	b.n	8009de8 <_dtoa_r+0x1b0>
 8009e70:	2301      	movs	r3, #1
 8009e72:	930a      	str	r3, [sp, #40]	; 0x28
 8009e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dd59      	ble.n	8009f2e <_dtoa_r+0x2f6>
 8009e7a:	9302      	str	r3, [sp, #8]
 8009e7c:	4699      	mov	r9, r3
 8009e7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e80:	2200      	movs	r2, #0
 8009e82:	6072      	str	r2, [r6, #4]
 8009e84:	2204      	movs	r2, #4
 8009e86:	f102 0014 	add.w	r0, r2, #20
 8009e8a:	4298      	cmp	r0, r3
 8009e8c:	6871      	ldr	r1, [r6, #4]
 8009e8e:	d953      	bls.n	8009f38 <_dtoa_r+0x300>
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 ffe8 	bl	800ae66 <_Balloc>
 8009e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e98:	6030      	str	r0, [r6, #0]
 8009e9a:	f1b9 0f0e 	cmp.w	r9, #14
 8009e9e:	f8d3 b000 	ldr.w	fp, [r3]
 8009ea2:	f200 80e6 	bhi.w	800a072 <_dtoa_r+0x43a>
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	f000 80e3 	beq.w	800a072 <_dtoa_r+0x43a>
 8009eac:	ed9d 7b00 	vldr	d7, [sp]
 8009eb0:	f1ba 0f00 	cmp.w	sl, #0
 8009eb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009eb8:	dd74      	ble.n	8009fa4 <_dtoa_r+0x36c>
 8009eba:	4a2a      	ldr	r2, [pc, #168]	; (8009f64 <_dtoa_r+0x32c>)
 8009ebc:	f00a 030f 	and.w	r3, sl, #15
 8009ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ec4:	ed93 7b00 	vldr	d7, [r3]
 8009ec8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009ecc:	06f0      	lsls	r0, r6, #27
 8009ece:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009ed2:	d565      	bpl.n	8009fa0 <_dtoa_r+0x368>
 8009ed4:	4b24      	ldr	r3, [pc, #144]	; (8009f68 <_dtoa_r+0x330>)
 8009ed6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ede:	f7f6 fcb5 	bl	800084c <__aeabi_ddiv>
 8009ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8009ee6:	f006 060f 	and.w	r6, r6, #15
 8009eea:	2503      	movs	r5, #3
 8009eec:	4f1e      	ldr	r7, [pc, #120]	; (8009f68 <_dtoa_r+0x330>)
 8009eee:	e04c      	b.n	8009f8a <_dtoa_r+0x352>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef6:	4453      	add	r3, sl
 8009ef8:	f103 0901 	add.w	r9, r3, #1
 8009efc:	9302      	str	r3, [sp, #8]
 8009efe:	464b      	mov	r3, r9
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	bfb8      	it	lt
 8009f04:	2301      	movlt	r3, #1
 8009f06:	e7ba      	b.n	8009e7e <_dtoa_r+0x246>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e7b2      	b.n	8009e72 <_dtoa_r+0x23a>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e7f0      	b.n	8009ef2 <_dtoa_r+0x2ba>
 8009f10:	2501      	movs	r5, #1
 8009f12:	2300      	movs	r3, #0
 8009f14:	9306      	str	r3, [sp, #24]
 8009f16:	950a      	str	r5, [sp, #40]	; 0x28
 8009f18:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1c:	9302      	str	r3, [sp, #8]
 8009f1e:	4699      	mov	r9, r3
 8009f20:	2200      	movs	r2, #0
 8009f22:	2312      	movs	r3, #18
 8009f24:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f26:	e7aa      	b.n	8009e7e <_dtoa_r+0x246>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f2c:	e7f4      	b.n	8009f18 <_dtoa_r+0x2e0>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	9302      	str	r3, [sp, #8]
 8009f32:	4699      	mov	r9, r3
 8009f34:	461a      	mov	r2, r3
 8009f36:	e7f5      	b.n	8009f24 <_dtoa_r+0x2ec>
 8009f38:	3101      	adds	r1, #1
 8009f3a:	6071      	str	r1, [r6, #4]
 8009f3c:	0052      	lsls	r2, r2, #1
 8009f3e:	e7a2      	b.n	8009e86 <_dtoa_r+0x24e>
 8009f40:	636f4361 	.word	0x636f4361
 8009f44:	3fd287a7 	.word	0x3fd287a7
 8009f48:	8b60c8b3 	.word	0x8b60c8b3
 8009f4c:	3fc68a28 	.word	0x3fc68a28
 8009f50:	509f79fb 	.word	0x509f79fb
 8009f54:	3fd34413 	.word	0x3fd34413
 8009f58:	7ff00000 	.word	0x7ff00000
 8009f5c:	0800bc99 	.word	0x0800bc99
 8009f60:	3ff80000 	.word	0x3ff80000
 8009f64:	0800bd58 	.word	0x0800bd58
 8009f68:	0800bd30 	.word	0x0800bd30
 8009f6c:	0800bd21 	.word	0x0800bd21
 8009f70:	07f1      	lsls	r1, r6, #31
 8009f72:	d508      	bpl.n	8009f86 <_dtoa_r+0x34e>
 8009f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f7c:	f7f6 fb3c 	bl	80005f8 <__aeabi_dmul>
 8009f80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f84:	3501      	adds	r5, #1
 8009f86:	1076      	asrs	r6, r6, #1
 8009f88:	3708      	adds	r7, #8
 8009f8a:	2e00      	cmp	r6, #0
 8009f8c:	d1f0      	bne.n	8009f70 <_dtoa_r+0x338>
 8009f8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f96:	f7f6 fc59 	bl	800084c <__aeabi_ddiv>
 8009f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f9e:	e01a      	b.n	8009fd6 <_dtoa_r+0x39e>
 8009fa0:	2502      	movs	r5, #2
 8009fa2:	e7a3      	b.n	8009eec <_dtoa_r+0x2b4>
 8009fa4:	f000 80a0 	beq.w	800a0e8 <_dtoa_r+0x4b0>
 8009fa8:	f1ca 0600 	rsb	r6, sl, #0
 8009fac:	4b9f      	ldr	r3, [pc, #636]	; (800a22c <_dtoa_r+0x5f4>)
 8009fae:	4fa0      	ldr	r7, [pc, #640]	; (800a230 <_dtoa_r+0x5f8>)
 8009fb0:	f006 020f 	and.w	r2, r6, #15
 8009fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fc0:	f7f6 fb1a 	bl	80005f8 <__aeabi_dmul>
 8009fc4:	e9cd 0100 	strd	r0, r1, [sp]
 8009fc8:	1136      	asrs	r6, r6, #4
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2502      	movs	r5, #2
 8009fce:	2e00      	cmp	r6, #0
 8009fd0:	d17f      	bne.n	800a0d2 <_dtoa_r+0x49a>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e1      	bne.n	8009f9a <_dtoa_r+0x362>
 8009fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8087 	beq.w	800a0ec <_dtoa_r+0x4b4>
 8009fde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4b93      	ldr	r3, [pc, #588]	; (800a234 <_dtoa_r+0x5fc>)
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 fd77 	bl	8000adc <__aeabi_dcmplt>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d07c      	beq.n	800a0ec <_dtoa_r+0x4b4>
 8009ff2:	f1b9 0f00 	cmp.w	r9, #0
 8009ff6:	d079      	beq.n	800a0ec <_dtoa_r+0x4b4>
 8009ff8:	9b02      	ldr	r3, [sp, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dd35      	ble.n	800a06a <_dtoa_r+0x432>
 8009ffe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a002:	9308      	str	r3, [sp, #32]
 800a004:	4639      	mov	r1, r7
 800a006:	2200      	movs	r2, #0
 800a008:	4b8b      	ldr	r3, [pc, #556]	; (800a238 <_dtoa_r+0x600>)
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7f6 faf4 	bl	80005f8 <__aeabi_dmul>
 800a010:	e9cd 0100 	strd	r0, r1, [sp]
 800a014:	9f02      	ldr	r7, [sp, #8]
 800a016:	3501      	adds	r5, #1
 800a018:	4628      	mov	r0, r5
 800a01a:	f7f6 fa83 	bl	8000524 <__aeabi_i2d>
 800a01e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a022:	f7f6 fae9 	bl	80005f8 <__aeabi_dmul>
 800a026:	2200      	movs	r2, #0
 800a028:	4b84      	ldr	r3, [pc, #528]	; (800a23c <_dtoa_r+0x604>)
 800a02a:	f7f6 f92f 	bl	800028c <__adddf3>
 800a02e:	4605      	mov	r5, r0
 800a030:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a034:	2f00      	cmp	r7, #0
 800a036:	d15d      	bne.n	800a0f4 <_dtoa_r+0x4bc>
 800a038:	2200      	movs	r2, #0
 800a03a:	4b81      	ldr	r3, [pc, #516]	; (800a240 <_dtoa_r+0x608>)
 800a03c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a040:	f7f6 f922 	bl	8000288 <__aeabi_dsub>
 800a044:	462a      	mov	r2, r5
 800a046:	4633      	mov	r3, r6
 800a048:	e9cd 0100 	strd	r0, r1, [sp]
 800a04c:	f7f6 fd64 	bl	8000b18 <__aeabi_dcmpgt>
 800a050:	2800      	cmp	r0, #0
 800a052:	f040 8288 	bne.w	800a566 <_dtoa_r+0x92e>
 800a056:	462a      	mov	r2, r5
 800a058:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a05c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a060:	f7f6 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800a064:	2800      	cmp	r0, #0
 800a066:	f040 827c 	bne.w	800a562 <_dtoa_r+0x92a>
 800a06a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a06e:	e9cd 2300 	strd	r2, r3, [sp]
 800a072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a074:	2b00      	cmp	r3, #0
 800a076:	f2c0 8150 	blt.w	800a31a <_dtoa_r+0x6e2>
 800a07a:	f1ba 0f0e 	cmp.w	sl, #14
 800a07e:	f300 814c 	bgt.w	800a31a <_dtoa_r+0x6e2>
 800a082:	4b6a      	ldr	r3, [pc, #424]	; (800a22c <_dtoa_r+0x5f4>)
 800a084:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a088:	ed93 7b00 	vldr	d7, [r3]
 800a08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a094:	f280 80d8 	bge.w	800a248 <_dtoa_r+0x610>
 800a098:	f1b9 0f00 	cmp.w	r9, #0
 800a09c:	f300 80d4 	bgt.w	800a248 <_dtoa_r+0x610>
 800a0a0:	f040 825e 	bne.w	800a560 <_dtoa_r+0x928>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	4b66      	ldr	r3, [pc, #408]	; (800a240 <_dtoa_r+0x608>)
 800a0a8:	ec51 0b17 	vmov	r0, r1, d7
 800a0ac:	f7f6 faa4 	bl	80005f8 <__aeabi_dmul>
 800a0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0b4:	f7f6 fd26 	bl	8000b04 <__aeabi_dcmpge>
 800a0b8:	464f      	mov	r7, r9
 800a0ba:	464e      	mov	r6, r9
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f040 8234 	bne.w	800a52a <_dtoa_r+0x8f2>
 800a0c2:	2331      	movs	r3, #49	; 0x31
 800a0c4:	f10b 0501 	add.w	r5, fp, #1
 800a0c8:	f88b 3000 	strb.w	r3, [fp]
 800a0cc:	f10a 0a01 	add.w	sl, sl, #1
 800a0d0:	e22f      	b.n	800a532 <_dtoa_r+0x8fa>
 800a0d2:	07f2      	lsls	r2, r6, #31
 800a0d4:	d505      	bpl.n	800a0e2 <_dtoa_r+0x4aa>
 800a0d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0da:	f7f6 fa8d 	bl	80005f8 <__aeabi_dmul>
 800a0de:	3501      	adds	r5, #1
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	1076      	asrs	r6, r6, #1
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	e772      	b.n	8009fce <_dtoa_r+0x396>
 800a0e8:	2502      	movs	r5, #2
 800a0ea:	e774      	b.n	8009fd6 <_dtoa_r+0x39e>
 800a0ec:	f8cd a020 	str.w	sl, [sp, #32]
 800a0f0:	464f      	mov	r7, r9
 800a0f2:	e791      	b.n	800a018 <_dtoa_r+0x3e0>
 800a0f4:	4b4d      	ldr	r3, [pc, #308]	; (800a22c <_dtoa_r+0x5f4>)
 800a0f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a100:	2b00      	cmp	r3, #0
 800a102:	d047      	beq.n	800a194 <_dtoa_r+0x55c>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	2000      	movs	r0, #0
 800a10a:	494e      	ldr	r1, [pc, #312]	; (800a244 <_dtoa_r+0x60c>)
 800a10c:	f7f6 fb9e 	bl	800084c <__aeabi_ddiv>
 800a110:	462a      	mov	r2, r5
 800a112:	4633      	mov	r3, r6
 800a114:	f7f6 f8b8 	bl	8000288 <__aeabi_dsub>
 800a118:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a11c:	465d      	mov	r5, fp
 800a11e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a122:	f7f6 fd19 	bl	8000b58 <__aeabi_d2iz>
 800a126:	4606      	mov	r6, r0
 800a128:	f7f6 f9fc 	bl	8000524 <__aeabi_i2d>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a134:	f7f6 f8a8 	bl	8000288 <__aeabi_dsub>
 800a138:	3630      	adds	r6, #48	; 0x30
 800a13a:	f805 6b01 	strb.w	r6, [r5], #1
 800a13e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a142:	e9cd 0100 	strd	r0, r1, [sp]
 800a146:	f7f6 fcc9 	bl	8000adc <__aeabi_dcmplt>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d163      	bne.n	800a216 <_dtoa_r+0x5de>
 800a14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a152:	2000      	movs	r0, #0
 800a154:	4937      	ldr	r1, [pc, #220]	; (800a234 <_dtoa_r+0x5fc>)
 800a156:	f7f6 f897 	bl	8000288 <__aeabi_dsub>
 800a15a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a15e:	f7f6 fcbd 	bl	8000adc <__aeabi_dcmplt>
 800a162:	2800      	cmp	r0, #0
 800a164:	f040 80b7 	bne.w	800a2d6 <_dtoa_r+0x69e>
 800a168:	eba5 030b 	sub.w	r3, r5, fp
 800a16c:	429f      	cmp	r7, r3
 800a16e:	f77f af7c 	ble.w	800a06a <_dtoa_r+0x432>
 800a172:	2200      	movs	r2, #0
 800a174:	4b30      	ldr	r3, [pc, #192]	; (800a238 <_dtoa_r+0x600>)
 800a176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a17a:	f7f6 fa3d 	bl	80005f8 <__aeabi_dmul>
 800a17e:	2200      	movs	r2, #0
 800a180:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a184:	4b2c      	ldr	r3, [pc, #176]	; (800a238 <_dtoa_r+0x600>)
 800a186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a18a:	f7f6 fa35 	bl	80005f8 <__aeabi_dmul>
 800a18e:	e9cd 0100 	strd	r0, r1, [sp]
 800a192:	e7c4      	b.n	800a11e <_dtoa_r+0x4e6>
 800a194:	462a      	mov	r2, r5
 800a196:	4633      	mov	r3, r6
 800a198:	f7f6 fa2e 	bl	80005f8 <__aeabi_dmul>
 800a19c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1a0:	eb0b 0507 	add.w	r5, fp, r7
 800a1a4:	465e      	mov	r6, fp
 800a1a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1aa:	f7f6 fcd5 	bl	8000b58 <__aeabi_d2iz>
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	f7f6 f9b8 	bl	8000524 <__aeabi_i2d>
 800a1b4:	3730      	adds	r7, #48	; 0x30
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1be:	f7f6 f863 	bl	8000288 <__aeabi_dsub>
 800a1c2:	f806 7b01 	strb.w	r7, [r6], #1
 800a1c6:	42ae      	cmp	r6, r5
 800a1c8:	e9cd 0100 	strd	r0, r1, [sp]
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	d126      	bne.n	800a220 <_dtoa_r+0x5e8>
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <_dtoa_r+0x60c>)
 800a1d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1d8:	f7f6 f858 	bl	800028c <__adddf3>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e4:	f7f6 fc98 	bl	8000b18 <__aeabi_dcmpgt>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d174      	bne.n	800a2d6 <_dtoa_r+0x69e>
 800a1ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	4914      	ldr	r1, [pc, #80]	; (800a244 <_dtoa_r+0x60c>)
 800a1f4:	f7f6 f848 	bl	8000288 <__aeabi_dsub>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a200:	f7f6 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800a204:	2800      	cmp	r0, #0
 800a206:	f43f af30 	beq.w	800a06a <_dtoa_r+0x432>
 800a20a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a20e:	2b30      	cmp	r3, #48	; 0x30
 800a210:	f105 32ff 	add.w	r2, r5, #4294967295
 800a214:	d002      	beq.n	800a21c <_dtoa_r+0x5e4>
 800a216:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a21a:	e04a      	b.n	800a2b2 <_dtoa_r+0x67a>
 800a21c:	4615      	mov	r5, r2
 800a21e:	e7f4      	b.n	800a20a <_dtoa_r+0x5d2>
 800a220:	4b05      	ldr	r3, [pc, #20]	; (800a238 <_dtoa_r+0x600>)
 800a222:	f7f6 f9e9 	bl	80005f8 <__aeabi_dmul>
 800a226:	e9cd 0100 	strd	r0, r1, [sp]
 800a22a:	e7bc      	b.n	800a1a6 <_dtoa_r+0x56e>
 800a22c:	0800bd58 	.word	0x0800bd58
 800a230:	0800bd30 	.word	0x0800bd30
 800a234:	3ff00000 	.word	0x3ff00000
 800a238:	40240000 	.word	0x40240000
 800a23c:	401c0000 	.word	0x401c0000
 800a240:	40140000 	.word	0x40140000
 800a244:	3fe00000 	.word	0x3fe00000
 800a248:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a24c:	465d      	mov	r5, fp
 800a24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a252:	4630      	mov	r0, r6
 800a254:	4639      	mov	r1, r7
 800a256:	f7f6 faf9 	bl	800084c <__aeabi_ddiv>
 800a25a:	f7f6 fc7d 	bl	8000b58 <__aeabi_d2iz>
 800a25e:	4680      	mov	r8, r0
 800a260:	f7f6 f960 	bl	8000524 <__aeabi_i2d>
 800a264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a268:	f7f6 f9c6 	bl	80005f8 <__aeabi_dmul>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4630      	mov	r0, r6
 800a272:	4639      	mov	r1, r7
 800a274:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a278:	f7f6 f806 	bl	8000288 <__aeabi_dsub>
 800a27c:	f805 6b01 	strb.w	r6, [r5], #1
 800a280:	eba5 060b 	sub.w	r6, r5, fp
 800a284:	45b1      	cmp	r9, r6
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	d139      	bne.n	800a300 <_dtoa_r+0x6c8>
 800a28c:	f7f5 fffe 	bl	800028c <__adddf3>
 800a290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a294:	4606      	mov	r6, r0
 800a296:	460f      	mov	r7, r1
 800a298:	f7f6 fc3e 	bl	8000b18 <__aeabi_dcmpgt>
 800a29c:	b9c8      	cbnz	r0, 800a2d2 <_dtoa_r+0x69a>
 800a29e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	f7f6 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2aa:	b110      	cbz	r0, 800a2b2 <_dtoa_r+0x67a>
 800a2ac:	f018 0f01 	tst.w	r8, #1
 800a2b0:	d10f      	bne.n	800a2d2 <_dtoa_r+0x69a>
 800a2b2:	9904      	ldr	r1, [sp, #16]
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f000 fe0a 	bl	800aece <_Bfree>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2be:	702b      	strb	r3, [r5, #0]
 800a2c0:	f10a 0301 	add.w	r3, sl, #1
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 8241 	beq.w	800a750 <_dtoa_r+0xb18>
 800a2ce:	601d      	str	r5, [r3, #0]
 800a2d0:	e23e      	b.n	800a750 <_dtoa_r+0xb18>
 800a2d2:	f8cd a020 	str.w	sl, [sp, #32]
 800a2d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2da:	2a39      	cmp	r2, #57	; 0x39
 800a2dc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a2e0:	d108      	bne.n	800a2f4 <_dtoa_r+0x6bc>
 800a2e2:	459b      	cmp	fp, r3
 800a2e4:	d10a      	bne.n	800a2fc <_dtoa_r+0x6c4>
 800a2e6:	9b08      	ldr	r3, [sp, #32]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	9308      	str	r3, [sp, #32]
 800a2ec:	2330      	movs	r3, #48	; 0x30
 800a2ee:	f88b 3000 	strb.w	r3, [fp]
 800a2f2:	465b      	mov	r3, fp
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	3201      	adds	r2, #1
 800a2f8:	701a      	strb	r2, [r3, #0]
 800a2fa:	e78c      	b.n	800a216 <_dtoa_r+0x5de>
 800a2fc:	461d      	mov	r5, r3
 800a2fe:	e7ea      	b.n	800a2d6 <_dtoa_r+0x69e>
 800a300:	2200      	movs	r2, #0
 800a302:	4b9b      	ldr	r3, [pc, #620]	; (800a570 <_dtoa_r+0x938>)
 800a304:	f7f6 f978 	bl	80005f8 <__aeabi_dmul>
 800a308:	2200      	movs	r2, #0
 800a30a:	2300      	movs	r3, #0
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	f7f6 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800a314:	2800      	cmp	r0, #0
 800a316:	d09a      	beq.n	800a24e <_dtoa_r+0x616>
 800a318:	e7cb      	b.n	800a2b2 <_dtoa_r+0x67a>
 800a31a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	f000 808b 	beq.w	800a438 <_dtoa_r+0x800>
 800a322:	9a06      	ldr	r2, [sp, #24]
 800a324:	2a01      	cmp	r2, #1
 800a326:	dc6e      	bgt.n	800a406 <_dtoa_r+0x7ce>
 800a328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	d067      	beq.n	800a3fe <_dtoa_r+0x7c6>
 800a32e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a332:	9f07      	ldr	r7, [sp, #28]
 800a334:	9d05      	ldr	r5, [sp, #20]
 800a336:	9a05      	ldr	r2, [sp, #20]
 800a338:	2101      	movs	r1, #1
 800a33a:	441a      	add	r2, r3
 800a33c:	4620      	mov	r0, r4
 800a33e:	9205      	str	r2, [sp, #20]
 800a340:	4498      	add	r8, r3
 800a342:	f000 fea2 	bl	800b08a <__i2b>
 800a346:	4606      	mov	r6, r0
 800a348:	2d00      	cmp	r5, #0
 800a34a:	dd0c      	ble.n	800a366 <_dtoa_r+0x72e>
 800a34c:	f1b8 0f00 	cmp.w	r8, #0
 800a350:	dd09      	ble.n	800a366 <_dtoa_r+0x72e>
 800a352:	4545      	cmp	r5, r8
 800a354:	9a05      	ldr	r2, [sp, #20]
 800a356:	462b      	mov	r3, r5
 800a358:	bfa8      	it	ge
 800a35a:	4643      	movge	r3, r8
 800a35c:	1ad2      	subs	r2, r2, r3
 800a35e:	9205      	str	r2, [sp, #20]
 800a360:	1aed      	subs	r5, r5, r3
 800a362:	eba8 0803 	sub.w	r8, r8, r3
 800a366:	9b07      	ldr	r3, [sp, #28]
 800a368:	b1eb      	cbz	r3, 800a3a6 <_dtoa_r+0x76e>
 800a36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d067      	beq.n	800a440 <_dtoa_r+0x808>
 800a370:	b18f      	cbz	r7, 800a396 <_dtoa_r+0x75e>
 800a372:	4631      	mov	r1, r6
 800a374:	463a      	mov	r2, r7
 800a376:	4620      	mov	r0, r4
 800a378:	f000 ff26 	bl	800b1c8 <__pow5mult>
 800a37c:	9a04      	ldr	r2, [sp, #16]
 800a37e:	4601      	mov	r1, r0
 800a380:	4606      	mov	r6, r0
 800a382:	4620      	mov	r0, r4
 800a384:	f000 fe8a 	bl	800b09c <__multiply>
 800a388:	9904      	ldr	r1, [sp, #16]
 800a38a:	9008      	str	r0, [sp, #32]
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 fd9e 	bl	800aece <_Bfree>
 800a392:	9b08      	ldr	r3, [sp, #32]
 800a394:	9304      	str	r3, [sp, #16]
 800a396:	9b07      	ldr	r3, [sp, #28]
 800a398:	1bda      	subs	r2, r3, r7
 800a39a:	d004      	beq.n	800a3a6 <_dtoa_r+0x76e>
 800a39c:	9904      	ldr	r1, [sp, #16]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 ff12 	bl	800b1c8 <__pow5mult>
 800a3a4:	9004      	str	r0, [sp, #16]
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fe6e 	bl	800b08a <__i2b>
 800a3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 81d0 	beq.w	800a758 <_dtoa_r+0xb20>
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 ff03 	bl	800b1c8 <__pow5mult>
 800a3c2:	9b06      	ldr	r3, [sp, #24]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	dc40      	bgt.n	800a44c <_dtoa_r+0x814>
 800a3ca:	9b00      	ldr	r3, [sp, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d139      	bne.n	800a444 <_dtoa_r+0x80c>
 800a3d0:	9b01      	ldr	r3, [sp, #4]
 800a3d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d136      	bne.n	800a448 <_dtoa_r+0x810>
 800a3da:	9b01      	ldr	r3, [sp, #4]
 800a3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3e0:	0d1b      	lsrs	r3, r3, #20
 800a3e2:	051b      	lsls	r3, r3, #20
 800a3e4:	b12b      	cbz	r3, 800a3f2 <_dtoa_r+0x7ba>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	9305      	str	r3, [sp, #20]
 800a3ec:	f108 0801 	add.w	r8, r8, #1
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d12a      	bne.n	800a450 <_dtoa_r+0x818>
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	e030      	b.n	800a460 <_dtoa_r+0x828>
 800a3fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a400:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a404:	e795      	b.n	800a332 <_dtoa_r+0x6fa>
 800a406:	9b07      	ldr	r3, [sp, #28]
 800a408:	f109 37ff 	add.w	r7, r9, #4294967295
 800a40c:	42bb      	cmp	r3, r7
 800a40e:	bfbf      	itttt	lt
 800a410:	9b07      	ldrlt	r3, [sp, #28]
 800a412:	9707      	strlt	r7, [sp, #28]
 800a414:	1afa      	sublt	r2, r7, r3
 800a416:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a418:	bfbb      	ittet	lt
 800a41a:	189b      	addlt	r3, r3, r2
 800a41c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a41e:	1bdf      	subge	r7, r3, r7
 800a420:	2700      	movlt	r7, #0
 800a422:	f1b9 0f00 	cmp.w	r9, #0
 800a426:	bfb5      	itete	lt
 800a428:	9b05      	ldrlt	r3, [sp, #20]
 800a42a:	9d05      	ldrge	r5, [sp, #20]
 800a42c:	eba3 0509 	sublt.w	r5, r3, r9
 800a430:	464b      	movge	r3, r9
 800a432:	bfb8      	it	lt
 800a434:	2300      	movlt	r3, #0
 800a436:	e77e      	b.n	800a336 <_dtoa_r+0x6fe>
 800a438:	9f07      	ldr	r7, [sp, #28]
 800a43a:	9d05      	ldr	r5, [sp, #20]
 800a43c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a43e:	e783      	b.n	800a348 <_dtoa_r+0x710>
 800a440:	9a07      	ldr	r2, [sp, #28]
 800a442:	e7ab      	b.n	800a39c <_dtoa_r+0x764>
 800a444:	2300      	movs	r3, #0
 800a446:	e7d4      	b.n	800a3f2 <_dtoa_r+0x7ba>
 800a448:	9b00      	ldr	r3, [sp, #0]
 800a44a:	e7d2      	b.n	800a3f2 <_dtoa_r+0x7ba>
 800a44c:	2300      	movs	r3, #0
 800a44e:	9307      	str	r3, [sp, #28]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a456:	6918      	ldr	r0, [r3, #16]
 800a458:	f000 fdc9 	bl	800afee <__hi0bits>
 800a45c:	f1c0 0020 	rsb	r0, r0, #32
 800a460:	4440      	add	r0, r8
 800a462:	f010 001f 	ands.w	r0, r0, #31
 800a466:	d047      	beq.n	800a4f8 <_dtoa_r+0x8c0>
 800a468:	f1c0 0320 	rsb	r3, r0, #32
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	dd3b      	ble.n	800a4e8 <_dtoa_r+0x8b0>
 800a470:	9b05      	ldr	r3, [sp, #20]
 800a472:	f1c0 001c 	rsb	r0, r0, #28
 800a476:	4403      	add	r3, r0
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	4405      	add	r5, r0
 800a47c:	4480      	add	r8, r0
 800a47e:	9b05      	ldr	r3, [sp, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	dd05      	ble.n	800a490 <_dtoa_r+0x858>
 800a484:	461a      	mov	r2, r3
 800a486:	9904      	ldr	r1, [sp, #16]
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 feeb 	bl	800b264 <__lshift>
 800a48e:	9004      	str	r0, [sp, #16]
 800a490:	f1b8 0f00 	cmp.w	r8, #0
 800a494:	dd05      	ble.n	800a4a2 <_dtoa_r+0x86a>
 800a496:	4639      	mov	r1, r7
 800a498:	4642      	mov	r2, r8
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 fee2 	bl	800b264 <__lshift>
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4a4:	b353      	cbz	r3, 800a4fc <_dtoa_r+0x8c4>
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	9804      	ldr	r0, [sp, #16]
 800a4aa:	f000 ff2f 	bl	800b30c <__mcmp>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	da24      	bge.n	800a4fc <_dtoa_r+0x8c4>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	220a      	movs	r2, #10
 800a4b6:	9904      	ldr	r1, [sp, #16]
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 fd1f 	bl	800aefc <__multadd>
 800a4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c0:	9004      	str	r0, [sp, #16]
 800a4c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 814d 	beq.w	800a766 <_dtoa_r+0xb2e>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	220a      	movs	r2, #10
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 fd12 	bl	800aefc <__multadd>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	4606      	mov	r6, r0
 800a4de:	dc4f      	bgt.n	800a580 <_dtoa_r+0x948>
 800a4e0:	9b06      	ldr	r3, [sp, #24]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	dd4c      	ble.n	800a580 <_dtoa_r+0x948>
 800a4e6:	e011      	b.n	800a50c <_dtoa_r+0x8d4>
 800a4e8:	d0c9      	beq.n	800a47e <_dtoa_r+0x846>
 800a4ea:	9a05      	ldr	r2, [sp, #20]
 800a4ec:	331c      	adds	r3, #28
 800a4ee:	441a      	add	r2, r3
 800a4f0:	9205      	str	r2, [sp, #20]
 800a4f2:	441d      	add	r5, r3
 800a4f4:	4498      	add	r8, r3
 800a4f6:	e7c2      	b.n	800a47e <_dtoa_r+0x846>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	e7f6      	b.n	800a4ea <_dtoa_r+0x8b2>
 800a4fc:	f1b9 0f00 	cmp.w	r9, #0
 800a500:	dc38      	bgt.n	800a574 <_dtoa_r+0x93c>
 800a502:	9b06      	ldr	r3, [sp, #24]
 800a504:	2b02      	cmp	r3, #2
 800a506:	dd35      	ble.n	800a574 <_dtoa_r+0x93c>
 800a508:	f8cd 9008 	str.w	r9, [sp, #8]
 800a50c:	9b02      	ldr	r3, [sp, #8]
 800a50e:	b963      	cbnz	r3, 800a52a <_dtoa_r+0x8f2>
 800a510:	4639      	mov	r1, r7
 800a512:	2205      	movs	r2, #5
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fcf1 	bl	800aefc <__multadd>
 800a51a:	4601      	mov	r1, r0
 800a51c:	4607      	mov	r7, r0
 800a51e:	9804      	ldr	r0, [sp, #16]
 800a520:	f000 fef4 	bl	800b30c <__mcmp>
 800a524:	2800      	cmp	r0, #0
 800a526:	f73f adcc 	bgt.w	800a0c2 <_dtoa_r+0x48a>
 800a52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a52c:	465d      	mov	r5, fp
 800a52e:	ea6f 0a03 	mvn.w	sl, r3
 800a532:	f04f 0900 	mov.w	r9, #0
 800a536:	4639      	mov	r1, r7
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fcc8 	bl	800aece <_Bfree>
 800a53e:	2e00      	cmp	r6, #0
 800a540:	f43f aeb7 	beq.w	800a2b2 <_dtoa_r+0x67a>
 800a544:	f1b9 0f00 	cmp.w	r9, #0
 800a548:	d005      	beq.n	800a556 <_dtoa_r+0x91e>
 800a54a:	45b1      	cmp	r9, r6
 800a54c:	d003      	beq.n	800a556 <_dtoa_r+0x91e>
 800a54e:	4649      	mov	r1, r9
 800a550:	4620      	mov	r0, r4
 800a552:	f000 fcbc 	bl	800aece <_Bfree>
 800a556:	4631      	mov	r1, r6
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 fcb8 	bl	800aece <_Bfree>
 800a55e:	e6a8      	b.n	800a2b2 <_dtoa_r+0x67a>
 800a560:	2700      	movs	r7, #0
 800a562:	463e      	mov	r6, r7
 800a564:	e7e1      	b.n	800a52a <_dtoa_r+0x8f2>
 800a566:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a56a:	463e      	mov	r6, r7
 800a56c:	e5a9      	b.n	800a0c2 <_dtoa_r+0x48a>
 800a56e:	bf00      	nop
 800a570:	40240000 	.word	0x40240000
 800a574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a576:	f8cd 9008 	str.w	r9, [sp, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 80fa 	beq.w	800a774 <_dtoa_r+0xb3c>
 800a580:	2d00      	cmp	r5, #0
 800a582:	dd05      	ble.n	800a590 <_dtoa_r+0x958>
 800a584:	4631      	mov	r1, r6
 800a586:	462a      	mov	r2, r5
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fe6b 	bl	800b264 <__lshift>
 800a58e:	4606      	mov	r6, r0
 800a590:	9b07      	ldr	r3, [sp, #28]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d04c      	beq.n	800a630 <_dtoa_r+0x9f8>
 800a596:	6871      	ldr	r1, [r6, #4]
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 fc64 	bl	800ae66 <_Balloc>
 800a59e:	6932      	ldr	r2, [r6, #16]
 800a5a0:	3202      	adds	r2, #2
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	0092      	lsls	r2, r2, #2
 800a5a6:	f106 010c 	add.w	r1, r6, #12
 800a5aa:	300c      	adds	r0, #12
 800a5ac:	f000 fc50 	bl	800ae50 <memcpy>
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 fe55 	bl	800b264 <__lshift>
 800a5ba:	9b00      	ldr	r3, [sp, #0]
 800a5bc:	f8cd b014 	str.w	fp, [sp, #20]
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	46b1      	mov	r9, r6
 800a5c6:	9307      	str	r3, [sp, #28]
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	9804      	ldr	r0, [sp, #16]
 800a5ce:	f7ff faa5 	bl	8009b1c <quorem>
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a5da:	9804      	ldr	r0, [sp, #16]
 800a5dc:	f000 fe96 	bl	800b30c <__mcmp>
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	9000      	str	r0, [sp, #0]
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 feaa 	bl	800b340 <__mdiff>
 800a5ec:	68c3      	ldr	r3, [r0, #12]
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	bb03      	cbnz	r3, 800a634 <_dtoa_r+0x9fc>
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	9008      	str	r0, [sp, #32]
 800a5f6:	9804      	ldr	r0, [sp, #16]
 800a5f8:	f000 fe88 	bl	800b30c <__mcmp>
 800a5fc:	9a08      	ldr	r2, [sp, #32]
 800a5fe:	4603      	mov	r3, r0
 800a600:	4611      	mov	r1, r2
 800a602:	4620      	mov	r0, r4
 800a604:	9308      	str	r3, [sp, #32]
 800a606:	f000 fc62 	bl	800aece <_Bfree>
 800a60a:	9b08      	ldr	r3, [sp, #32]
 800a60c:	b9a3      	cbnz	r3, 800a638 <_dtoa_r+0xa00>
 800a60e:	9a06      	ldr	r2, [sp, #24]
 800a610:	b992      	cbnz	r2, 800a638 <_dtoa_r+0xa00>
 800a612:	9a07      	ldr	r2, [sp, #28]
 800a614:	b982      	cbnz	r2, 800a638 <_dtoa_r+0xa00>
 800a616:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a61a:	d029      	beq.n	800a670 <_dtoa_r+0xa38>
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd01      	ble.n	800a626 <_dtoa_r+0x9ee>
 800a622:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a626:	9b05      	ldr	r3, [sp, #20]
 800a628:	1c5d      	adds	r5, r3, #1
 800a62a:	f883 8000 	strb.w	r8, [r3]
 800a62e:	e782      	b.n	800a536 <_dtoa_r+0x8fe>
 800a630:	4630      	mov	r0, r6
 800a632:	e7c2      	b.n	800a5ba <_dtoa_r+0x982>
 800a634:	2301      	movs	r3, #1
 800a636:	e7e3      	b.n	800a600 <_dtoa_r+0x9c8>
 800a638:	9a00      	ldr	r2, [sp, #0]
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	db04      	blt.n	800a648 <_dtoa_r+0xa10>
 800a63e:	d125      	bne.n	800a68c <_dtoa_r+0xa54>
 800a640:	9a06      	ldr	r2, [sp, #24]
 800a642:	bb1a      	cbnz	r2, 800a68c <_dtoa_r+0xa54>
 800a644:	9a07      	ldr	r2, [sp, #28]
 800a646:	bb0a      	cbnz	r2, 800a68c <_dtoa_r+0xa54>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	ddec      	ble.n	800a626 <_dtoa_r+0x9ee>
 800a64c:	2201      	movs	r2, #1
 800a64e:	9904      	ldr	r1, [sp, #16]
 800a650:	4620      	mov	r0, r4
 800a652:	f000 fe07 	bl	800b264 <__lshift>
 800a656:	4639      	mov	r1, r7
 800a658:	9004      	str	r0, [sp, #16]
 800a65a:	f000 fe57 	bl	800b30c <__mcmp>
 800a65e:	2800      	cmp	r0, #0
 800a660:	dc03      	bgt.n	800a66a <_dtoa_r+0xa32>
 800a662:	d1e0      	bne.n	800a626 <_dtoa_r+0x9ee>
 800a664:	f018 0f01 	tst.w	r8, #1
 800a668:	d0dd      	beq.n	800a626 <_dtoa_r+0x9ee>
 800a66a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a66e:	d1d8      	bne.n	800a622 <_dtoa_r+0x9ea>
 800a670:	9b05      	ldr	r3, [sp, #20]
 800a672:	9a05      	ldr	r2, [sp, #20]
 800a674:	1c5d      	adds	r5, r3, #1
 800a676:	2339      	movs	r3, #57	; 0x39
 800a678:	7013      	strb	r3, [r2, #0]
 800a67a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a67e:	2b39      	cmp	r3, #57	; 0x39
 800a680:	f105 32ff 	add.w	r2, r5, #4294967295
 800a684:	d04f      	beq.n	800a726 <_dtoa_r+0xaee>
 800a686:	3301      	adds	r3, #1
 800a688:	7013      	strb	r3, [r2, #0]
 800a68a:	e754      	b.n	800a536 <_dtoa_r+0x8fe>
 800a68c:	9a05      	ldr	r2, [sp, #20]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f102 0501 	add.w	r5, r2, #1
 800a694:	dd06      	ble.n	800a6a4 <_dtoa_r+0xa6c>
 800a696:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a69a:	d0e9      	beq.n	800a670 <_dtoa_r+0xa38>
 800a69c:	f108 0801 	add.w	r8, r8, #1
 800a6a0:	9b05      	ldr	r3, [sp, #20]
 800a6a2:	e7c2      	b.n	800a62a <_dtoa_r+0x9f2>
 800a6a4:	9a02      	ldr	r2, [sp, #8]
 800a6a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a6aa:	eba5 030b 	sub.w	r3, r5, fp
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d021      	beq.n	800a6f6 <_dtoa_r+0xabe>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	220a      	movs	r2, #10
 800a6b6:	9904      	ldr	r1, [sp, #16]
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 fc1f 	bl	800aefc <__multadd>
 800a6be:	45b1      	cmp	r9, r6
 800a6c0:	9004      	str	r0, [sp, #16]
 800a6c2:	f04f 0300 	mov.w	r3, #0
 800a6c6:	f04f 020a 	mov.w	r2, #10
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	d105      	bne.n	800a6dc <_dtoa_r+0xaa4>
 800a6d0:	f000 fc14 	bl	800aefc <__multadd>
 800a6d4:	4681      	mov	r9, r0
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	9505      	str	r5, [sp, #20]
 800a6da:	e776      	b.n	800a5ca <_dtoa_r+0x992>
 800a6dc:	f000 fc0e 	bl	800aefc <__multadd>
 800a6e0:	4631      	mov	r1, r6
 800a6e2:	4681      	mov	r9, r0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 fc07 	bl	800aefc <__multadd>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	e7f2      	b.n	800a6d8 <_dtoa_r+0xaa0>
 800a6f2:	f04f 0900 	mov.w	r9, #0
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	9904      	ldr	r1, [sp, #16]
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fdb2 	bl	800b264 <__lshift>
 800a700:	4639      	mov	r1, r7
 800a702:	9004      	str	r0, [sp, #16]
 800a704:	f000 fe02 	bl	800b30c <__mcmp>
 800a708:	2800      	cmp	r0, #0
 800a70a:	dcb6      	bgt.n	800a67a <_dtoa_r+0xa42>
 800a70c:	d102      	bne.n	800a714 <_dtoa_r+0xadc>
 800a70e:	f018 0f01 	tst.w	r8, #1
 800a712:	d1b2      	bne.n	800a67a <_dtoa_r+0xa42>
 800a714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a718:	2b30      	cmp	r3, #48	; 0x30
 800a71a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a71e:	f47f af0a 	bne.w	800a536 <_dtoa_r+0x8fe>
 800a722:	4615      	mov	r5, r2
 800a724:	e7f6      	b.n	800a714 <_dtoa_r+0xadc>
 800a726:	4593      	cmp	fp, r2
 800a728:	d105      	bne.n	800a736 <_dtoa_r+0xafe>
 800a72a:	2331      	movs	r3, #49	; 0x31
 800a72c:	f10a 0a01 	add.w	sl, sl, #1
 800a730:	f88b 3000 	strb.w	r3, [fp]
 800a734:	e6ff      	b.n	800a536 <_dtoa_r+0x8fe>
 800a736:	4615      	mov	r5, r2
 800a738:	e79f      	b.n	800a67a <_dtoa_r+0xa42>
 800a73a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a7a0 <_dtoa_r+0xb68>
 800a73e:	e007      	b.n	800a750 <_dtoa_r+0xb18>
 800a740:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a742:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a7a4 <_dtoa_r+0xb6c>
 800a746:	b11b      	cbz	r3, 800a750 <_dtoa_r+0xb18>
 800a748:	f10b 0308 	add.w	r3, fp, #8
 800a74c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	4658      	mov	r0, fp
 800a752:	b017      	add	sp, #92	; 0x5c
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	9b06      	ldr	r3, [sp, #24]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	f77f ae35 	ble.w	800a3ca <_dtoa_r+0x792>
 800a760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a762:	9307      	str	r3, [sp, #28]
 800a764:	e649      	b.n	800a3fa <_dtoa_r+0x7c2>
 800a766:	9b02      	ldr	r3, [sp, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	dc03      	bgt.n	800a774 <_dtoa_r+0xb3c>
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	f73f aecc 	bgt.w	800a50c <_dtoa_r+0x8d4>
 800a774:	465d      	mov	r5, fp
 800a776:	4639      	mov	r1, r7
 800a778:	9804      	ldr	r0, [sp, #16]
 800a77a:	f7ff f9cf 	bl	8009b1c <quorem>
 800a77e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a782:	f805 8b01 	strb.w	r8, [r5], #1
 800a786:	9a02      	ldr	r2, [sp, #8]
 800a788:	eba5 030b 	sub.w	r3, r5, fp
 800a78c:	429a      	cmp	r2, r3
 800a78e:	ddb0      	ble.n	800a6f2 <_dtoa_r+0xaba>
 800a790:	2300      	movs	r3, #0
 800a792:	220a      	movs	r2, #10
 800a794:	9904      	ldr	r1, [sp, #16]
 800a796:	4620      	mov	r0, r4
 800a798:	f000 fbb0 	bl	800aefc <__multadd>
 800a79c:	9004      	str	r0, [sp, #16]
 800a79e:	e7ea      	b.n	800a776 <_dtoa_r+0xb3e>
 800a7a0:	0800bc98 	.word	0x0800bc98
 800a7a4:	0800bd18 	.word	0x0800bd18

0800a7a8 <rshift>:
 800a7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7aa:	6906      	ldr	r6, [r0, #16]
 800a7ac:	114b      	asrs	r3, r1, #5
 800a7ae:	429e      	cmp	r6, r3
 800a7b0:	f100 0414 	add.w	r4, r0, #20
 800a7b4:	dd30      	ble.n	800a818 <rshift+0x70>
 800a7b6:	f011 011f 	ands.w	r1, r1, #31
 800a7ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a7be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a7c2:	d108      	bne.n	800a7d6 <rshift+0x2e>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	42b2      	cmp	r2, r6
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	d211      	bcs.n	800a7f0 <rshift+0x48>
 800a7cc:	f852 3b04 	ldr.w	r3, [r2], #4
 800a7d0:	f841 3b04 	str.w	r3, [r1], #4
 800a7d4:	e7f7      	b.n	800a7c6 <rshift+0x1e>
 800a7d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a7da:	f1c1 0c20 	rsb	ip, r1, #32
 800a7de:	40cd      	lsrs	r5, r1
 800a7e0:	3204      	adds	r2, #4
 800a7e2:	4623      	mov	r3, r4
 800a7e4:	42b2      	cmp	r2, r6
 800a7e6:	4617      	mov	r7, r2
 800a7e8:	d30c      	bcc.n	800a804 <rshift+0x5c>
 800a7ea:	601d      	str	r5, [r3, #0]
 800a7ec:	b105      	cbz	r5, 800a7f0 <rshift+0x48>
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	1b1a      	subs	r2, r3, r4
 800a7f2:	42a3      	cmp	r3, r4
 800a7f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7f8:	bf08      	it	eq
 800a7fa:	2300      	moveq	r3, #0
 800a7fc:	6102      	str	r2, [r0, #16]
 800a7fe:	bf08      	it	eq
 800a800:	6143      	streq	r3, [r0, #20]
 800a802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a804:	683f      	ldr	r7, [r7, #0]
 800a806:	fa07 f70c 	lsl.w	r7, r7, ip
 800a80a:	433d      	orrs	r5, r7
 800a80c:	f843 5b04 	str.w	r5, [r3], #4
 800a810:	f852 5b04 	ldr.w	r5, [r2], #4
 800a814:	40cd      	lsrs	r5, r1
 800a816:	e7e5      	b.n	800a7e4 <rshift+0x3c>
 800a818:	4623      	mov	r3, r4
 800a81a:	e7e9      	b.n	800a7f0 <rshift+0x48>

0800a81c <__hexdig_fun>:
 800a81c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a820:	2b09      	cmp	r3, #9
 800a822:	d802      	bhi.n	800a82a <__hexdig_fun+0xe>
 800a824:	3820      	subs	r0, #32
 800a826:	b2c0      	uxtb	r0, r0
 800a828:	4770      	bx	lr
 800a82a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a82e:	2b05      	cmp	r3, #5
 800a830:	d801      	bhi.n	800a836 <__hexdig_fun+0x1a>
 800a832:	3847      	subs	r0, #71	; 0x47
 800a834:	e7f7      	b.n	800a826 <__hexdig_fun+0xa>
 800a836:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	d801      	bhi.n	800a842 <__hexdig_fun+0x26>
 800a83e:	3827      	subs	r0, #39	; 0x27
 800a840:	e7f1      	b.n	800a826 <__hexdig_fun+0xa>
 800a842:	2000      	movs	r0, #0
 800a844:	4770      	bx	lr

0800a846 <__gethex>:
 800a846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84a:	b08b      	sub	sp, #44	; 0x2c
 800a84c:	468a      	mov	sl, r1
 800a84e:	9002      	str	r0, [sp, #8]
 800a850:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a852:	9306      	str	r3, [sp, #24]
 800a854:	4690      	mov	r8, r2
 800a856:	f000 fad0 	bl	800adfa <__localeconv_l>
 800a85a:	6803      	ldr	r3, [r0, #0]
 800a85c:	9303      	str	r3, [sp, #12]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f5 fcb6 	bl	80001d0 <strlen>
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	9001      	str	r0, [sp, #4]
 800a868:	4403      	add	r3, r0
 800a86a:	f04f 0b00 	mov.w	fp, #0
 800a86e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a872:	9307      	str	r3, [sp, #28]
 800a874:	f8da 3000 	ldr.w	r3, [sl]
 800a878:	3302      	adds	r3, #2
 800a87a:	461f      	mov	r7, r3
 800a87c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a880:	2830      	cmp	r0, #48	; 0x30
 800a882:	d06c      	beq.n	800a95e <__gethex+0x118>
 800a884:	f7ff ffca 	bl	800a81c <__hexdig_fun>
 800a888:	4604      	mov	r4, r0
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d16a      	bne.n	800a964 <__gethex+0x11e>
 800a88e:	9a01      	ldr	r2, [sp, #4]
 800a890:	9903      	ldr	r1, [sp, #12]
 800a892:	4638      	mov	r0, r7
 800a894:	f001 f8fe 	bl	800ba94 <strncmp>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d166      	bne.n	800a96a <__gethex+0x124>
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	5cf8      	ldrb	r0, [r7, r3]
 800a8a0:	18fe      	adds	r6, r7, r3
 800a8a2:	f7ff ffbb 	bl	800a81c <__hexdig_fun>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d062      	beq.n	800a970 <__gethex+0x12a>
 800a8aa:	4633      	mov	r3, r6
 800a8ac:	7818      	ldrb	r0, [r3, #0]
 800a8ae:	2830      	cmp	r0, #48	; 0x30
 800a8b0:	461f      	mov	r7, r3
 800a8b2:	f103 0301 	add.w	r3, r3, #1
 800a8b6:	d0f9      	beq.n	800a8ac <__gethex+0x66>
 800a8b8:	f7ff ffb0 	bl	800a81c <__hexdig_fun>
 800a8bc:	fab0 f580 	clz	r5, r0
 800a8c0:	096d      	lsrs	r5, r5, #5
 800a8c2:	4634      	mov	r4, r6
 800a8c4:	f04f 0b01 	mov.w	fp, #1
 800a8c8:	463a      	mov	r2, r7
 800a8ca:	4616      	mov	r6, r2
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	7830      	ldrb	r0, [r6, #0]
 800a8d0:	f7ff ffa4 	bl	800a81c <__hexdig_fun>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d1f8      	bne.n	800a8ca <__gethex+0x84>
 800a8d8:	9a01      	ldr	r2, [sp, #4]
 800a8da:	9903      	ldr	r1, [sp, #12]
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f001 f8d9 	bl	800ba94 <strncmp>
 800a8e2:	b950      	cbnz	r0, 800a8fa <__gethex+0xb4>
 800a8e4:	b954      	cbnz	r4, 800a8fc <__gethex+0xb6>
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	18f4      	adds	r4, r6, r3
 800a8ea:	4622      	mov	r2, r4
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	7830      	ldrb	r0, [r6, #0]
 800a8f2:	f7ff ff93 	bl	800a81c <__hexdig_fun>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d1f8      	bne.n	800a8ec <__gethex+0xa6>
 800a8fa:	b10c      	cbz	r4, 800a900 <__gethex+0xba>
 800a8fc:	1ba4      	subs	r4, r4, r6
 800a8fe:	00a4      	lsls	r4, r4, #2
 800a900:	7833      	ldrb	r3, [r6, #0]
 800a902:	2b50      	cmp	r3, #80	; 0x50
 800a904:	d001      	beq.n	800a90a <__gethex+0xc4>
 800a906:	2b70      	cmp	r3, #112	; 0x70
 800a908:	d140      	bne.n	800a98c <__gethex+0x146>
 800a90a:	7873      	ldrb	r3, [r6, #1]
 800a90c:	2b2b      	cmp	r3, #43	; 0x2b
 800a90e:	d031      	beq.n	800a974 <__gethex+0x12e>
 800a910:	2b2d      	cmp	r3, #45	; 0x2d
 800a912:	d033      	beq.n	800a97c <__gethex+0x136>
 800a914:	1c71      	adds	r1, r6, #1
 800a916:	f04f 0900 	mov.w	r9, #0
 800a91a:	7808      	ldrb	r0, [r1, #0]
 800a91c:	f7ff ff7e 	bl	800a81c <__hexdig_fun>
 800a920:	1e43      	subs	r3, r0, #1
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b18      	cmp	r3, #24
 800a926:	d831      	bhi.n	800a98c <__gethex+0x146>
 800a928:	f1a0 0210 	sub.w	r2, r0, #16
 800a92c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a930:	f7ff ff74 	bl	800a81c <__hexdig_fun>
 800a934:	1e43      	subs	r3, r0, #1
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b18      	cmp	r3, #24
 800a93a:	d922      	bls.n	800a982 <__gethex+0x13c>
 800a93c:	f1b9 0f00 	cmp.w	r9, #0
 800a940:	d000      	beq.n	800a944 <__gethex+0xfe>
 800a942:	4252      	negs	r2, r2
 800a944:	4414      	add	r4, r2
 800a946:	f8ca 1000 	str.w	r1, [sl]
 800a94a:	b30d      	cbz	r5, 800a990 <__gethex+0x14a>
 800a94c:	f1bb 0f00 	cmp.w	fp, #0
 800a950:	bf0c      	ite	eq
 800a952:	2706      	moveq	r7, #6
 800a954:	2700      	movne	r7, #0
 800a956:	4638      	mov	r0, r7
 800a958:	b00b      	add	sp, #44	; 0x2c
 800a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95e:	f10b 0b01 	add.w	fp, fp, #1
 800a962:	e78a      	b.n	800a87a <__gethex+0x34>
 800a964:	2500      	movs	r5, #0
 800a966:	462c      	mov	r4, r5
 800a968:	e7ae      	b.n	800a8c8 <__gethex+0x82>
 800a96a:	463e      	mov	r6, r7
 800a96c:	2501      	movs	r5, #1
 800a96e:	e7c7      	b.n	800a900 <__gethex+0xba>
 800a970:	4604      	mov	r4, r0
 800a972:	e7fb      	b.n	800a96c <__gethex+0x126>
 800a974:	f04f 0900 	mov.w	r9, #0
 800a978:	1cb1      	adds	r1, r6, #2
 800a97a:	e7ce      	b.n	800a91a <__gethex+0xd4>
 800a97c:	f04f 0901 	mov.w	r9, #1
 800a980:	e7fa      	b.n	800a978 <__gethex+0x132>
 800a982:	230a      	movs	r3, #10
 800a984:	fb03 0202 	mla	r2, r3, r2, r0
 800a988:	3a10      	subs	r2, #16
 800a98a:	e7cf      	b.n	800a92c <__gethex+0xe6>
 800a98c:	4631      	mov	r1, r6
 800a98e:	e7da      	b.n	800a946 <__gethex+0x100>
 800a990:	1bf3      	subs	r3, r6, r7
 800a992:	3b01      	subs	r3, #1
 800a994:	4629      	mov	r1, r5
 800a996:	2b07      	cmp	r3, #7
 800a998:	dc49      	bgt.n	800aa2e <__gethex+0x1e8>
 800a99a:	9802      	ldr	r0, [sp, #8]
 800a99c:	f000 fa63 	bl	800ae66 <_Balloc>
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	f100 0914 	add.w	r9, r0, #20
 800a9a6:	f04f 0b00 	mov.w	fp, #0
 800a9aa:	f1c3 0301 	rsb	r3, r3, #1
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	f8cd 9010 	str.w	r9, [sp, #16]
 800a9b4:	46da      	mov	sl, fp
 800a9b6:	9308      	str	r3, [sp, #32]
 800a9b8:	42b7      	cmp	r7, r6
 800a9ba:	d33b      	bcc.n	800aa34 <__gethex+0x1ee>
 800a9bc:	9804      	ldr	r0, [sp, #16]
 800a9be:	f840 ab04 	str.w	sl, [r0], #4
 800a9c2:	eba0 0009 	sub.w	r0, r0, r9
 800a9c6:	1080      	asrs	r0, r0, #2
 800a9c8:	6128      	str	r0, [r5, #16]
 800a9ca:	0147      	lsls	r7, r0, #5
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	f000 fb0e 	bl	800afee <__hi0bits>
 800a9d2:	f8d8 6000 	ldr.w	r6, [r8]
 800a9d6:	1a3f      	subs	r7, r7, r0
 800a9d8:	42b7      	cmp	r7, r6
 800a9da:	dd64      	ble.n	800aaa6 <__gethex+0x260>
 800a9dc:	1bbf      	subs	r7, r7, r6
 800a9de:	4639      	mov	r1, r7
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f000 fe1d 	bl	800b620 <__any_on>
 800a9e6:	4682      	mov	sl, r0
 800a9e8:	b178      	cbz	r0, 800aa0a <__gethex+0x1c4>
 800a9ea:	1e7b      	subs	r3, r7, #1
 800a9ec:	1159      	asrs	r1, r3, #5
 800a9ee:	f003 021f 	and.w	r2, r3, #31
 800a9f2:	f04f 0a01 	mov.w	sl, #1
 800a9f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a9fa:	fa0a f202 	lsl.w	r2, sl, r2
 800a9fe:	420a      	tst	r2, r1
 800aa00:	d003      	beq.n	800aa0a <__gethex+0x1c4>
 800aa02:	4553      	cmp	r3, sl
 800aa04:	dc46      	bgt.n	800aa94 <__gethex+0x24e>
 800aa06:	f04f 0a02 	mov.w	sl, #2
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f7ff fecb 	bl	800a7a8 <rshift>
 800aa12:	443c      	add	r4, r7
 800aa14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	da52      	bge.n	800aac2 <__gethex+0x27c>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	9802      	ldr	r0, [sp, #8]
 800aa20:	f000 fa55 	bl	800aece <_Bfree>
 800aa24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa26:	2300      	movs	r3, #0
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	27a3      	movs	r7, #163	; 0xa3
 800aa2c:	e793      	b.n	800a956 <__gethex+0x110>
 800aa2e:	3101      	adds	r1, #1
 800aa30:	105b      	asrs	r3, r3, #1
 800aa32:	e7b0      	b.n	800a996 <__gethex+0x150>
 800aa34:	1e73      	subs	r3, r6, #1
 800aa36:	9305      	str	r3, [sp, #20]
 800aa38:	9a07      	ldr	r2, [sp, #28]
 800aa3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d018      	beq.n	800aa74 <__gethex+0x22e>
 800aa42:	f1bb 0f20 	cmp.w	fp, #32
 800aa46:	d107      	bne.n	800aa58 <__gethex+0x212>
 800aa48:	9b04      	ldr	r3, [sp, #16]
 800aa4a:	f8c3 a000 	str.w	sl, [r3]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	f04f 0a00 	mov.w	sl, #0
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	46d3      	mov	fp, sl
 800aa58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa5c:	f7ff fede 	bl	800a81c <__hexdig_fun>
 800aa60:	f000 000f 	and.w	r0, r0, #15
 800aa64:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa68:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa6c:	f10b 0b04 	add.w	fp, fp, #4
 800aa70:	9b05      	ldr	r3, [sp, #20]
 800aa72:	e00d      	b.n	800aa90 <__gethex+0x24a>
 800aa74:	9b05      	ldr	r3, [sp, #20]
 800aa76:	9a08      	ldr	r2, [sp, #32]
 800aa78:	4413      	add	r3, r2
 800aa7a:	42bb      	cmp	r3, r7
 800aa7c:	d3e1      	bcc.n	800aa42 <__gethex+0x1fc>
 800aa7e:	4618      	mov	r0, r3
 800aa80:	9a01      	ldr	r2, [sp, #4]
 800aa82:	9903      	ldr	r1, [sp, #12]
 800aa84:	9309      	str	r3, [sp, #36]	; 0x24
 800aa86:	f001 f805 	bl	800ba94 <strncmp>
 800aa8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d1d8      	bne.n	800aa42 <__gethex+0x1fc>
 800aa90:	461e      	mov	r6, r3
 800aa92:	e791      	b.n	800a9b8 <__gethex+0x172>
 800aa94:	1eb9      	subs	r1, r7, #2
 800aa96:	4628      	mov	r0, r5
 800aa98:	f000 fdc2 	bl	800b620 <__any_on>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d0b2      	beq.n	800aa06 <__gethex+0x1c0>
 800aaa0:	f04f 0a03 	mov.w	sl, #3
 800aaa4:	e7b1      	b.n	800aa0a <__gethex+0x1c4>
 800aaa6:	da09      	bge.n	800aabc <__gethex+0x276>
 800aaa8:	1bf7      	subs	r7, r6, r7
 800aaaa:	4629      	mov	r1, r5
 800aaac:	463a      	mov	r2, r7
 800aaae:	9802      	ldr	r0, [sp, #8]
 800aab0:	f000 fbd8 	bl	800b264 <__lshift>
 800aab4:	1be4      	subs	r4, r4, r7
 800aab6:	4605      	mov	r5, r0
 800aab8:	f100 0914 	add.w	r9, r0, #20
 800aabc:	f04f 0a00 	mov.w	sl, #0
 800aac0:	e7a8      	b.n	800aa14 <__gethex+0x1ce>
 800aac2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aac6:	42a0      	cmp	r0, r4
 800aac8:	dd6a      	ble.n	800aba0 <__gethex+0x35a>
 800aaca:	1b04      	subs	r4, r0, r4
 800aacc:	42a6      	cmp	r6, r4
 800aace:	dc2e      	bgt.n	800ab2e <__gethex+0x2e8>
 800aad0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d022      	beq.n	800ab1e <__gethex+0x2d8>
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d024      	beq.n	800ab26 <__gethex+0x2e0>
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d115      	bne.n	800ab0c <__gethex+0x2c6>
 800aae0:	42a6      	cmp	r6, r4
 800aae2:	d113      	bne.n	800ab0c <__gethex+0x2c6>
 800aae4:	2e01      	cmp	r6, #1
 800aae6:	dc0b      	bgt.n	800ab00 <__gethex+0x2ba>
 800aae8:	9a06      	ldr	r2, [sp, #24]
 800aaea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	612b      	str	r3, [r5, #16]
 800aaf4:	f8c9 3000 	str.w	r3, [r9]
 800aaf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aafa:	2762      	movs	r7, #98	; 0x62
 800aafc:	601d      	str	r5, [r3, #0]
 800aafe:	e72a      	b.n	800a956 <__gethex+0x110>
 800ab00:	1e71      	subs	r1, r6, #1
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 fd8c 	bl	800b620 <__any_on>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d1ed      	bne.n	800aae8 <__gethex+0x2a2>
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	9802      	ldr	r0, [sp, #8]
 800ab10:	f000 f9dd 	bl	800aece <_Bfree>
 800ab14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab16:	2300      	movs	r3, #0
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	2750      	movs	r7, #80	; 0x50
 800ab1c:	e71b      	b.n	800a956 <__gethex+0x110>
 800ab1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0e1      	beq.n	800aae8 <__gethex+0x2a2>
 800ab24:	e7f2      	b.n	800ab0c <__gethex+0x2c6>
 800ab26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1dd      	bne.n	800aae8 <__gethex+0x2a2>
 800ab2c:	e7ee      	b.n	800ab0c <__gethex+0x2c6>
 800ab2e:	1e67      	subs	r7, r4, #1
 800ab30:	f1ba 0f00 	cmp.w	sl, #0
 800ab34:	d131      	bne.n	800ab9a <__gethex+0x354>
 800ab36:	b127      	cbz	r7, 800ab42 <__gethex+0x2fc>
 800ab38:	4639      	mov	r1, r7
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f000 fd70 	bl	800b620 <__any_on>
 800ab40:	4682      	mov	sl, r0
 800ab42:	117a      	asrs	r2, r7, #5
 800ab44:	2301      	movs	r3, #1
 800ab46:	f007 071f 	and.w	r7, r7, #31
 800ab4a:	fa03 f707 	lsl.w	r7, r3, r7
 800ab4e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ab52:	4621      	mov	r1, r4
 800ab54:	421f      	tst	r7, r3
 800ab56:	4628      	mov	r0, r5
 800ab58:	bf18      	it	ne
 800ab5a:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab5e:	1b36      	subs	r6, r6, r4
 800ab60:	f7ff fe22 	bl	800a7a8 <rshift>
 800ab64:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ab68:	2702      	movs	r7, #2
 800ab6a:	f1ba 0f00 	cmp.w	sl, #0
 800ab6e:	d048      	beq.n	800ac02 <__gethex+0x3bc>
 800ab70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d015      	beq.n	800aba4 <__gethex+0x35e>
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d017      	beq.n	800abac <__gethex+0x366>
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d109      	bne.n	800ab94 <__gethex+0x34e>
 800ab80:	f01a 0f02 	tst.w	sl, #2
 800ab84:	d006      	beq.n	800ab94 <__gethex+0x34e>
 800ab86:	f8d9 3000 	ldr.w	r3, [r9]
 800ab8a:	ea4a 0a03 	orr.w	sl, sl, r3
 800ab8e:	f01a 0f01 	tst.w	sl, #1
 800ab92:	d10e      	bne.n	800abb2 <__gethex+0x36c>
 800ab94:	f047 0710 	orr.w	r7, r7, #16
 800ab98:	e033      	b.n	800ac02 <__gethex+0x3bc>
 800ab9a:	f04f 0a01 	mov.w	sl, #1
 800ab9e:	e7d0      	b.n	800ab42 <__gethex+0x2fc>
 800aba0:	2701      	movs	r7, #1
 800aba2:	e7e2      	b.n	800ab6a <__gethex+0x324>
 800aba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aba6:	f1c3 0301 	rsb	r3, r3, #1
 800abaa:	9315      	str	r3, [sp, #84]	; 0x54
 800abac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0f0      	beq.n	800ab94 <__gethex+0x34e>
 800abb2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800abb6:	f105 0314 	add.w	r3, r5, #20
 800abba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800abbe:	eb03 010a 	add.w	r1, r3, sl
 800abc2:	f04f 0c00 	mov.w	ip, #0
 800abc6:	4618      	mov	r0, r3
 800abc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abd0:	d01c      	beq.n	800ac0c <__gethex+0x3c6>
 800abd2:	3201      	adds	r2, #1
 800abd4:	6002      	str	r2, [r0, #0]
 800abd6:	2f02      	cmp	r7, #2
 800abd8:	f105 0314 	add.w	r3, r5, #20
 800abdc:	d138      	bne.n	800ac50 <__gethex+0x40a>
 800abde:	f8d8 2000 	ldr.w	r2, [r8]
 800abe2:	3a01      	subs	r2, #1
 800abe4:	42b2      	cmp	r2, r6
 800abe6:	d10a      	bne.n	800abfe <__gethex+0x3b8>
 800abe8:	1171      	asrs	r1, r6, #5
 800abea:	2201      	movs	r2, #1
 800abec:	f006 061f 	and.w	r6, r6, #31
 800abf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abf4:	fa02 f606 	lsl.w	r6, r2, r6
 800abf8:	421e      	tst	r6, r3
 800abfa:	bf18      	it	ne
 800abfc:	4617      	movne	r7, r2
 800abfe:	f047 0720 	orr.w	r7, r7, #32
 800ac02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac04:	601d      	str	r5, [r3, #0]
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	601c      	str	r4, [r3, #0]
 800ac0a:	e6a4      	b.n	800a956 <__gethex+0x110>
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac12:	d8d8      	bhi.n	800abc6 <__gethex+0x380>
 800ac14:	68ab      	ldr	r3, [r5, #8]
 800ac16:	4599      	cmp	r9, r3
 800ac18:	db12      	blt.n	800ac40 <__gethex+0x3fa>
 800ac1a:	6869      	ldr	r1, [r5, #4]
 800ac1c:	9802      	ldr	r0, [sp, #8]
 800ac1e:	3101      	adds	r1, #1
 800ac20:	f000 f921 	bl	800ae66 <_Balloc>
 800ac24:	692a      	ldr	r2, [r5, #16]
 800ac26:	3202      	adds	r2, #2
 800ac28:	f105 010c 	add.w	r1, r5, #12
 800ac2c:	4683      	mov	fp, r0
 800ac2e:	0092      	lsls	r2, r2, #2
 800ac30:	300c      	adds	r0, #12
 800ac32:	f000 f90d 	bl	800ae50 <memcpy>
 800ac36:	4629      	mov	r1, r5
 800ac38:	9802      	ldr	r0, [sp, #8]
 800ac3a:	f000 f948 	bl	800aece <_Bfree>
 800ac3e:	465d      	mov	r5, fp
 800ac40:	692b      	ldr	r3, [r5, #16]
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ac48:	612a      	str	r2, [r5, #16]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	615a      	str	r2, [r3, #20]
 800ac4e:	e7c2      	b.n	800abd6 <__gethex+0x390>
 800ac50:	692a      	ldr	r2, [r5, #16]
 800ac52:	454a      	cmp	r2, r9
 800ac54:	dd0b      	ble.n	800ac6e <__gethex+0x428>
 800ac56:	2101      	movs	r1, #1
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f7ff fda5 	bl	800a7a8 <rshift>
 800ac5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac62:	3401      	adds	r4, #1
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	f6ff aed9 	blt.w	800aa1c <__gethex+0x1d6>
 800ac6a:	2701      	movs	r7, #1
 800ac6c:	e7c7      	b.n	800abfe <__gethex+0x3b8>
 800ac6e:	f016 061f 	ands.w	r6, r6, #31
 800ac72:	d0fa      	beq.n	800ac6a <__gethex+0x424>
 800ac74:	449a      	add	sl, r3
 800ac76:	f1c6 0620 	rsb	r6, r6, #32
 800ac7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ac7e:	f000 f9b6 	bl	800afee <__hi0bits>
 800ac82:	42b0      	cmp	r0, r6
 800ac84:	dbe7      	blt.n	800ac56 <__gethex+0x410>
 800ac86:	e7f0      	b.n	800ac6a <__gethex+0x424>

0800ac88 <L_shift>:
 800ac88:	f1c2 0208 	rsb	r2, r2, #8
 800ac8c:	0092      	lsls	r2, r2, #2
 800ac8e:	b570      	push	{r4, r5, r6, lr}
 800ac90:	f1c2 0620 	rsb	r6, r2, #32
 800ac94:	6843      	ldr	r3, [r0, #4]
 800ac96:	6804      	ldr	r4, [r0, #0]
 800ac98:	fa03 f506 	lsl.w	r5, r3, r6
 800ac9c:	432c      	orrs	r4, r5
 800ac9e:	40d3      	lsrs	r3, r2
 800aca0:	6004      	str	r4, [r0, #0]
 800aca2:	f840 3f04 	str.w	r3, [r0, #4]!
 800aca6:	4288      	cmp	r0, r1
 800aca8:	d3f4      	bcc.n	800ac94 <L_shift+0xc>
 800acaa:	bd70      	pop	{r4, r5, r6, pc}

0800acac <__match>:
 800acac:	b530      	push	{r4, r5, lr}
 800acae:	6803      	ldr	r3, [r0, #0]
 800acb0:	3301      	adds	r3, #1
 800acb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acb6:	b914      	cbnz	r4, 800acbe <__match+0x12>
 800acb8:	6003      	str	r3, [r0, #0]
 800acba:	2001      	movs	r0, #1
 800acbc:	bd30      	pop	{r4, r5, pc}
 800acbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acc6:	2d19      	cmp	r5, #25
 800acc8:	bf98      	it	ls
 800acca:	3220      	addls	r2, #32
 800accc:	42a2      	cmp	r2, r4
 800acce:	d0f0      	beq.n	800acb2 <__match+0x6>
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7f3      	b.n	800acbc <__match+0x10>

0800acd4 <__hexnan>:
 800acd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	680b      	ldr	r3, [r1, #0]
 800acda:	6801      	ldr	r1, [r0, #0]
 800acdc:	115f      	asrs	r7, r3, #5
 800acde:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ace2:	f013 031f 	ands.w	r3, r3, #31
 800ace6:	b087      	sub	sp, #28
 800ace8:	bf18      	it	ne
 800acea:	3704      	addne	r7, #4
 800acec:	2500      	movs	r5, #0
 800acee:	1f3e      	subs	r6, r7, #4
 800acf0:	4682      	mov	sl, r0
 800acf2:	4690      	mov	r8, r2
 800acf4:	9301      	str	r3, [sp, #4]
 800acf6:	f847 5c04 	str.w	r5, [r7, #-4]
 800acfa:	46b1      	mov	r9, r6
 800acfc:	4634      	mov	r4, r6
 800acfe:	9502      	str	r5, [sp, #8]
 800ad00:	46ab      	mov	fp, r5
 800ad02:	784a      	ldrb	r2, [r1, #1]
 800ad04:	1c4b      	adds	r3, r1, #1
 800ad06:	9303      	str	r3, [sp, #12]
 800ad08:	b342      	cbz	r2, 800ad5c <__hexnan+0x88>
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	9105      	str	r1, [sp, #20]
 800ad0e:	9204      	str	r2, [sp, #16]
 800ad10:	f7ff fd84 	bl	800a81c <__hexdig_fun>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d143      	bne.n	800ada0 <__hexnan+0xcc>
 800ad18:	9a04      	ldr	r2, [sp, #16]
 800ad1a:	9905      	ldr	r1, [sp, #20]
 800ad1c:	2a20      	cmp	r2, #32
 800ad1e:	d818      	bhi.n	800ad52 <__hexnan+0x7e>
 800ad20:	9b02      	ldr	r3, [sp, #8]
 800ad22:	459b      	cmp	fp, r3
 800ad24:	dd13      	ble.n	800ad4e <__hexnan+0x7a>
 800ad26:	454c      	cmp	r4, r9
 800ad28:	d206      	bcs.n	800ad38 <__hexnan+0x64>
 800ad2a:	2d07      	cmp	r5, #7
 800ad2c:	dc04      	bgt.n	800ad38 <__hexnan+0x64>
 800ad2e:	462a      	mov	r2, r5
 800ad30:	4649      	mov	r1, r9
 800ad32:	4620      	mov	r0, r4
 800ad34:	f7ff ffa8 	bl	800ac88 <L_shift>
 800ad38:	4544      	cmp	r4, r8
 800ad3a:	d944      	bls.n	800adc6 <__hexnan+0xf2>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f1a4 0904 	sub.w	r9, r4, #4
 800ad42:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad46:	f8cd b008 	str.w	fp, [sp, #8]
 800ad4a:	464c      	mov	r4, r9
 800ad4c:	461d      	mov	r5, r3
 800ad4e:	9903      	ldr	r1, [sp, #12]
 800ad50:	e7d7      	b.n	800ad02 <__hexnan+0x2e>
 800ad52:	2a29      	cmp	r2, #41	; 0x29
 800ad54:	d14a      	bne.n	800adec <__hexnan+0x118>
 800ad56:	3102      	adds	r1, #2
 800ad58:	f8ca 1000 	str.w	r1, [sl]
 800ad5c:	f1bb 0f00 	cmp.w	fp, #0
 800ad60:	d044      	beq.n	800adec <__hexnan+0x118>
 800ad62:	454c      	cmp	r4, r9
 800ad64:	d206      	bcs.n	800ad74 <__hexnan+0xa0>
 800ad66:	2d07      	cmp	r5, #7
 800ad68:	dc04      	bgt.n	800ad74 <__hexnan+0xa0>
 800ad6a:	462a      	mov	r2, r5
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f7ff ff8a 	bl	800ac88 <L_shift>
 800ad74:	4544      	cmp	r4, r8
 800ad76:	d928      	bls.n	800adca <__hexnan+0xf6>
 800ad78:	4643      	mov	r3, r8
 800ad7a:	f854 2b04 	ldr.w	r2, [r4], #4
 800ad7e:	f843 2b04 	str.w	r2, [r3], #4
 800ad82:	42a6      	cmp	r6, r4
 800ad84:	d2f9      	bcs.n	800ad7a <__hexnan+0xa6>
 800ad86:	2200      	movs	r2, #0
 800ad88:	f843 2b04 	str.w	r2, [r3], #4
 800ad8c:	429e      	cmp	r6, r3
 800ad8e:	d2fb      	bcs.n	800ad88 <__hexnan+0xb4>
 800ad90:	6833      	ldr	r3, [r6, #0]
 800ad92:	b91b      	cbnz	r3, 800ad9c <__hexnan+0xc8>
 800ad94:	4546      	cmp	r6, r8
 800ad96:	d127      	bne.n	800ade8 <__hexnan+0x114>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	6033      	str	r3, [r6, #0]
 800ad9c:	2005      	movs	r0, #5
 800ad9e:	e026      	b.n	800adee <__hexnan+0x11a>
 800ada0:	3501      	adds	r5, #1
 800ada2:	2d08      	cmp	r5, #8
 800ada4:	f10b 0b01 	add.w	fp, fp, #1
 800ada8:	dd06      	ble.n	800adb8 <__hexnan+0xe4>
 800adaa:	4544      	cmp	r4, r8
 800adac:	d9cf      	bls.n	800ad4e <__hexnan+0x7a>
 800adae:	2300      	movs	r3, #0
 800adb0:	f844 3c04 	str.w	r3, [r4, #-4]
 800adb4:	2501      	movs	r5, #1
 800adb6:	3c04      	subs	r4, #4
 800adb8:	6822      	ldr	r2, [r4, #0]
 800adba:	f000 000f 	and.w	r0, r0, #15
 800adbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800adc2:	6020      	str	r0, [r4, #0]
 800adc4:	e7c3      	b.n	800ad4e <__hexnan+0x7a>
 800adc6:	2508      	movs	r5, #8
 800adc8:	e7c1      	b.n	800ad4e <__hexnan+0x7a>
 800adca:	9b01      	ldr	r3, [sp, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0df      	beq.n	800ad90 <__hexnan+0xbc>
 800add0:	f04f 32ff 	mov.w	r2, #4294967295
 800add4:	f1c3 0320 	rsb	r3, r3, #32
 800add8:	fa22 f303 	lsr.w	r3, r2, r3
 800addc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ade0:	401a      	ands	r2, r3
 800ade2:	f847 2c04 	str.w	r2, [r7, #-4]
 800ade6:	e7d3      	b.n	800ad90 <__hexnan+0xbc>
 800ade8:	3e04      	subs	r6, #4
 800adea:	e7d1      	b.n	800ad90 <__hexnan+0xbc>
 800adec:	2004      	movs	r0, #4
 800adee:	b007      	add	sp, #28
 800adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800adf4 <__locale_ctype_ptr_l>:
 800adf4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800adf8:	4770      	bx	lr

0800adfa <__localeconv_l>:
 800adfa:	30f0      	adds	r0, #240	; 0xf0
 800adfc:	4770      	bx	lr
	...

0800ae00 <_localeconv_r>:
 800ae00:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <_localeconv_r+0x14>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6a18      	ldr	r0, [r3, #32]
 800ae06:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <_localeconv_r+0x18>)
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	bf08      	it	eq
 800ae0c:	4618      	moveq	r0, r3
 800ae0e:	30f0      	adds	r0, #240	; 0xf0
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	2000000c 	.word	0x2000000c
 800ae18:	20000070 	.word	0x20000070

0800ae1c <malloc>:
 800ae1c:	4b02      	ldr	r3, [pc, #8]	; (800ae28 <malloc+0xc>)
 800ae1e:	4601      	mov	r1, r0
 800ae20:	6818      	ldr	r0, [r3, #0]
 800ae22:	f000 bc7b 	b.w	800b71c <_malloc_r>
 800ae26:	bf00      	nop
 800ae28:	2000000c 	.word	0x2000000c

0800ae2c <__ascii_mbtowc>:
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	b901      	cbnz	r1, 800ae32 <__ascii_mbtowc+0x6>
 800ae30:	a901      	add	r1, sp, #4
 800ae32:	b142      	cbz	r2, 800ae46 <__ascii_mbtowc+0x1a>
 800ae34:	b14b      	cbz	r3, 800ae4a <__ascii_mbtowc+0x1e>
 800ae36:	7813      	ldrb	r3, [r2, #0]
 800ae38:	600b      	str	r3, [r1, #0]
 800ae3a:	7812      	ldrb	r2, [r2, #0]
 800ae3c:	1c10      	adds	r0, r2, #0
 800ae3e:	bf18      	it	ne
 800ae40:	2001      	movne	r0, #1
 800ae42:	b002      	add	sp, #8
 800ae44:	4770      	bx	lr
 800ae46:	4610      	mov	r0, r2
 800ae48:	e7fb      	b.n	800ae42 <__ascii_mbtowc+0x16>
 800ae4a:	f06f 0001 	mvn.w	r0, #1
 800ae4e:	e7f8      	b.n	800ae42 <__ascii_mbtowc+0x16>

0800ae50 <memcpy>:
 800ae50:	b510      	push	{r4, lr}
 800ae52:	1e43      	subs	r3, r0, #1
 800ae54:	440a      	add	r2, r1
 800ae56:	4291      	cmp	r1, r2
 800ae58:	d100      	bne.n	800ae5c <memcpy+0xc>
 800ae5a:	bd10      	pop	{r4, pc}
 800ae5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae64:	e7f7      	b.n	800ae56 <memcpy+0x6>

0800ae66 <_Balloc>:
 800ae66:	b570      	push	{r4, r5, r6, lr}
 800ae68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	460e      	mov	r6, r1
 800ae6e:	b93d      	cbnz	r5, 800ae80 <_Balloc+0x1a>
 800ae70:	2010      	movs	r0, #16
 800ae72:	f7ff ffd3 	bl	800ae1c <malloc>
 800ae76:	6260      	str	r0, [r4, #36]	; 0x24
 800ae78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae7c:	6005      	str	r5, [r0, #0]
 800ae7e:	60c5      	str	r5, [r0, #12]
 800ae80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ae82:	68eb      	ldr	r3, [r5, #12]
 800ae84:	b183      	cbz	r3, 800aea8 <_Balloc+0x42>
 800ae86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ae8e:	b9b8      	cbnz	r0, 800aec0 <_Balloc+0x5a>
 800ae90:	2101      	movs	r1, #1
 800ae92:	fa01 f506 	lsl.w	r5, r1, r6
 800ae96:	1d6a      	adds	r2, r5, #5
 800ae98:	0092      	lsls	r2, r2, #2
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 fbe1 	bl	800b662 <_calloc_r>
 800aea0:	b160      	cbz	r0, 800aebc <_Balloc+0x56>
 800aea2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aea6:	e00e      	b.n	800aec6 <_Balloc+0x60>
 800aea8:	2221      	movs	r2, #33	; 0x21
 800aeaa:	2104      	movs	r1, #4
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fbd8 	bl	800b662 <_calloc_r>
 800aeb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb4:	60e8      	str	r0, [r5, #12]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e4      	bne.n	800ae86 <_Balloc+0x20>
 800aebc:	2000      	movs	r0, #0
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	6802      	ldr	r2, [r0, #0]
 800aec2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aec6:	2300      	movs	r3, #0
 800aec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aecc:	e7f7      	b.n	800aebe <_Balloc+0x58>

0800aece <_Bfree>:
 800aece:	b570      	push	{r4, r5, r6, lr}
 800aed0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aed2:	4606      	mov	r6, r0
 800aed4:	460d      	mov	r5, r1
 800aed6:	b93c      	cbnz	r4, 800aee8 <_Bfree+0x1a>
 800aed8:	2010      	movs	r0, #16
 800aeda:	f7ff ff9f 	bl	800ae1c <malloc>
 800aede:	6270      	str	r0, [r6, #36]	; 0x24
 800aee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aee4:	6004      	str	r4, [r0, #0]
 800aee6:	60c4      	str	r4, [r0, #12]
 800aee8:	b13d      	cbz	r5, 800aefa <_Bfree+0x2c>
 800aeea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aeec:	686a      	ldr	r2, [r5, #4]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aef4:	6029      	str	r1, [r5, #0]
 800aef6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aefa:	bd70      	pop	{r4, r5, r6, pc}

0800aefc <__multadd>:
 800aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af00:	690d      	ldr	r5, [r1, #16]
 800af02:	461f      	mov	r7, r3
 800af04:	4606      	mov	r6, r0
 800af06:	460c      	mov	r4, r1
 800af08:	f101 0c14 	add.w	ip, r1, #20
 800af0c:	2300      	movs	r3, #0
 800af0e:	f8dc 0000 	ldr.w	r0, [ip]
 800af12:	b281      	uxth	r1, r0
 800af14:	fb02 7101 	mla	r1, r2, r1, r7
 800af18:	0c0f      	lsrs	r7, r1, #16
 800af1a:	0c00      	lsrs	r0, r0, #16
 800af1c:	fb02 7000 	mla	r0, r2, r0, r7
 800af20:	b289      	uxth	r1, r1
 800af22:	3301      	adds	r3, #1
 800af24:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800af28:	429d      	cmp	r5, r3
 800af2a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800af2e:	f84c 1b04 	str.w	r1, [ip], #4
 800af32:	dcec      	bgt.n	800af0e <__multadd+0x12>
 800af34:	b1d7      	cbz	r7, 800af6c <__multadd+0x70>
 800af36:	68a3      	ldr	r3, [r4, #8]
 800af38:	42ab      	cmp	r3, r5
 800af3a:	dc12      	bgt.n	800af62 <__multadd+0x66>
 800af3c:	6861      	ldr	r1, [r4, #4]
 800af3e:	4630      	mov	r0, r6
 800af40:	3101      	adds	r1, #1
 800af42:	f7ff ff90 	bl	800ae66 <_Balloc>
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	3202      	adds	r2, #2
 800af4a:	f104 010c 	add.w	r1, r4, #12
 800af4e:	4680      	mov	r8, r0
 800af50:	0092      	lsls	r2, r2, #2
 800af52:	300c      	adds	r0, #12
 800af54:	f7ff ff7c 	bl	800ae50 <memcpy>
 800af58:	4621      	mov	r1, r4
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7ff ffb7 	bl	800aece <_Bfree>
 800af60:	4644      	mov	r4, r8
 800af62:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af66:	3501      	adds	r5, #1
 800af68:	615f      	str	r7, [r3, #20]
 800af6a:	6125      	str	r5, [r4, #16]
 800af6c:	4620      	mov	r0, r4
 800af6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af72 <__s2b>:
 800af72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af76:	460c      	mov	r4, r1
 800af78:	4615      	mov	r5, r2
 800af7a:	461f      	mov	r7, r3
 800af7c:	2209      	movs	r2, #9
 800af7e:	3308      	adds	r3, #8
 800af80:	4606      	mov	r6, r0
 800af82:	fb93 f3f2 	sdiv	r3, r3, r2
 800af86:	2100      	movs	r1, #0
 800af88:	2201      	movs	r2, #1
 800af8a:	429a      	cmp	r2, r3
 800af8c:	db20      	blt.n	800afd0 <__s2b+0x5e>
 800af8e:	4630      	mov	r0, r6
 800af90:	f7ff ff69 	bl	800ae66 <_Balloc>
 800af94:	9b08      	ldr	r3, [sp, #32]
 800af96:	6143      	str	r3, [r0, #20]
 800af98:	2d09      	cmp	r5, #9
 800af9a:	f04f 0301 	mov.w	r3, #1
 800af9e:	6103      	str	r3, [r0, #16]
 800afa0:	dd19      	ble.n	800afd6 <__s2b+0x64>
 800afa2:	f104 0809 	add.w	r8, r4, #9
 800afa6:	46c1      	mov	r9, r8
 800afa8:	442c      	add	r4, r5
 800afaa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800afae:	4601      	mov	r1, r0
 800afb0:	3b30      	subs	r3, #48	; 0x30
 800afb2:	220a      	movs	r2, #10
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff ffa1 	bl	800aefc <__multadd>
 800afba:	45a1      	cmp	r9, r4
 800afbc:	d1f5      	bne.n	800afaa <__s2b+0x38>
 800afbe:	eb08 0405 	add.w	r4, r8, r5
 800afc2:	3c08      	subs	r4, #8
 800afc4:	1b2d      	subs	r5, r5, r4
 800afc6:	1963      	adds	r3, r4, r5
 800afc8:	42bb      	cmp	r3, r7
 800afca:	db07      	blt.n	800afdc <__s2b+0x6a>
 800afcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd0:	0052      	lsls	r2, r2, #1
 800afd2:	3101      	adds	r1, #1
 800afd4:	e7d9      	b.n	800af8a <__s2b+0x18>
 800afd6:	340a      	adds	r4, #10
 800afd8:	2509      	movs	r5, #9
 800afda:	e7f3      	b.n	800afc4 <__s2b+0x52>
 800afdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afe0:	4601      	mov	r1, r0
 800afe2:	3b30      	subs	r3, #48	; 0x30
 800afe4:	220a      	movs	r2, #10
 800afe6:	4630      	mov	r0, r6
 800afe8:	f7ff ff88 	bl	800aefc <__multadd>
 800afec:	e7eb      	b.n	800afc6 <__s2b+0x54>

0800afee <__hi0bits>:
 800afee:	0c02      	lsrs	r2, r0, #16
 800aff0:	0412      	lsls	r2, r2, #16
 800aff2:	4603      	mov	r3, r0
 800aff4:	b9b2      	cbnz	r2, 800b024 <__hi0bits+0x36>
 800aff6:	0403      	lsls	r3, r0, #16
 800aff8:	2010      	movs	r0, #16
 800affa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800affe:	bf04      	itt	eq
 800b000:	021b      	lsleq	r3, r3, #8
 800b002:	3008      	addeq	r0, #8
 800b004:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b008:	bf04      	itt	eq
 800b00a:	011b      	lsleq	r3, r3, #4
 800b00c:	3004      	addeq	r0, #4
 800b00e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b012:	bf04      	itt	eq
 800b014:	009b      	lsleq	r3, r3, #2
 800b016:	3002      	addeq	r0, #2
 800b018:	2b00      	cmp	r3, #0
 800b01a:	db06      	blt.n	800b02a <__hi0bits+0x3c>
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	d503      	bpl.n	800b028 <__hi0bits+0x3a>
 800b020:	3001      	adds	r0, #1
 800b022:	4770      	bx	lr
 800b024:	2000      	movs	r0, #0
 800b026:	e7e8      	b.n	800affa <__hi0bits+0xc>
 800b028:	2020      	movs	r0, #32
 800b02a:	4770      	bx	lr

0800b02c <__lo0bits>:
 800b02c:	6803      	ldr	r3, [r0, #0]
 800b02e:	f013 0207 	ands.w	r2, r3, #7
 800b032:	4601      	mov	r1, r0
 800b034:	d00b      	beq.n	800b04e <__lo0bits+0x22>
 800b036:	07da      	lsls	r2, r3, #31
 800b038:	d423      	bmi.n	800b082 <__lo0bits+0x56>
 800b03a:	0798      	lsls	r0, r3, #30
 800b03c:	bf49      	itett	mi
 800b03e:	085b      	lsrmi	r3, r3, #1
 800b040:	089b      	lsrpl	r3, r3, #2
 800b042:	2001      	movmi	r0, #1
 800b044:	600b      	strmi	r3, [r1, #0]
 800b046:	bf5c      	itt	pl
 800b048:	600b      	strpl	r3, [r1, #0]
 800b04a:	2002      	movpl	r0, #2
 800b04c:	4770      	bx	lr
 800b04e:	b298      	uxth	r0, r3
 800b050:	b9a8      	cbnz	r0, 800b07e <__lo0bits+0x52>
 800b052:	0c1b      	lsrs	r3, r3, #16
 800b054:	2010      	movs	r0, #16
 800b056:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b05a:	bf04      	itt	eq
 800b05c:	0a1b      	lsreq	r3, r3, #8
 800b05e:	3008      	addeq	r0, #8
 800b060:	071a      	lsls	r2, r3, #28
 800b062:	bf04      	itt	eq
 800b064:	091b      	lsreq	r3, r3, #4
 800b066:	3004      	addeq	r0, #4
 800b068:	079a      	lsls	r2, r3, #30
 800b06a:	bf04      	itt	eq
 800b06c:	089b      	lsreq	r3, r3, #2
 800b06e:	3002      	addeq	r0, #2
 800b070:	07da      	lsls	r2, r3, #31
 800b072:	d402      	bmi.n	800b07a <__lo0bits+0x4e>
 800b074:	085b      	lsrs	r3, r3, #1
 800b076:	d006      	beq.n	800b086 <__lo0bits+0x5a>
 800b078:	3001      	adds	r0, #1
 800b07a:	600b      	str	r3, [r1, #0]
 800b07c:	4770      	bx	lr
 800b07e:	4610      	mov	r0, r2
 800b080:	e7e9      	b.n	800b056 <__lo0bits+0x2a>
 800b082:	2000      	movs	r0, #0
 800b084:	4770      	bx	lr
 800b086:	2020      	movs	r0, #32
 800b088:	4770      	bx	lr

0800b08a <__i2b>:
 800b08a:	b510      	push	{r4, lr}
 800b08c:	460c      	mov	r4, r1
 800b08e:	2101      	movs	r1, #1
 800b090:	f7ff fee9 	bl	800ae66 <_Balloc>
 800b094:	2201      	movs	r2, #1
 800b096:	6144      	str	r4, [r0, #20]
 800b098:	6102      	str	r2, [r0, #16]
 800b09a:	bd10      	pop	{r4, pc}

0800b09c <__multiply>:
 800b09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	690a      	ldr	r2, [r1, #16]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	bfb8      	it	lt
 800b0aa:	460b      	movlt	r3, r1
 800b0ac:	4688      	mov	r8, r1
 800b0ae:	bfbc      	itt	lt
 800b0b0:	46a0      	movlt	r8, r4
 800b0b2:	461c      	movlt	r4, r3
 800b0b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b0b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b0bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0c4:	eb07 0609 	add.w	r6, r7, r9
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	bfb8      	it	lt
 800b0cc:	3101      	addlt	r1, #1
 800b0ce:	f7ff feca 	bl	800ae66 <_Balloc>
 800b0d2:	f100 0514 	add.w	r5, r0, #20
 800b0d6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b0da:	462b      	mov	r3, r5
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4573      	cmp	r3, lr
 800b0e0:	d316      	bcc.n	800b110 <__multiply+0x74>
 800b0e2:	f104 0214 	add.w	r2, r4, #20
 800b0e6:	f108 0114 	add.w	r1, r8, #20
 800b0ea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b0ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	9b00      	ldr	r3, [sp, #0]
 800b0f6:	9201      	str	r2, [sp, #4]
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d80c      	bhi.n	800b116 <__multiply+0x7a>
 800b0fc:	2e00      	cmp	r6, #0
 800b0fe:	dd03      	ble.n	800b108 <__multiply+0x6c>
 800b100:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b104:	2b00      	cmp	r3, #0
 800b106:	d05d      	beq.n	800b1c4 <__multiply+0x128>
 800b108:	6106      	str	r6, [r0, #16]
 800b10a:	b003      	add	sp, #12
 800b10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b110:	f843 2b04 	str.w	r2, [r3], #4
 800b114:	e7e3      	b.n	800b0de <__multiply+0x42>
 800b116:	f8b2 b000 	ldrh.w	fp, [r2]
 800b11a:	f1bb 0f00 	cmp.w	fp, #0
 800b11e:	d023      	beq.n	800b168 <__multiply+0xcc>
 800b120:	4689      	mov	r9, r1
 800b122:	46ac      	mov	ip, r5
 800b124:	f04f 0800 	mov.w	r8, #0
 800b128:	f859 4b04 	ldr.w	r4, [r9], #4
 800b12c:	f8dc a000 	ldr.w	sl, [ip]
 800b130:	b2a3      	uxth	r3, r4
 800b132:	fa1f fa8a 	uxth.w	sl, sl
 800b136:	fb0b a303 	mla	r3, fp, r3, sl
 800b13a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b13e:	f8dc 4000 	ldr.w	r4, [ip]
 800b142:	4443      	add	r3, r8
 800b144:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b148:	fb0b 840a 	mla	r4, fp, sl, r8
 800b14c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b150:	46e2      	mov	sl, ip
 800b152:	b29b      	uxth	r3, r3
 800b154:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b158:	454f      	cmp	r7, r9
 800b15a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b15e:	f84a 3b04 	str.w	r3, [sl], #4
 800b162:	d82b      	bhi.n	800b1bc <__multiply+0x120>
 800b164:	f8cc 8004 	str.w	r8, [ip, #4]
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b16e:	3204      	adds	r2, #4
 800b170:	f1ba 0f00 	cmp.w	sl, #0
 800b174:	d020      	beq.n	800b1b8 <__multiply+0x11c>
 800b176:	682b      	ldr	r3, [r5, #0]
 800b178:	4689      	mov	r9, r1
 800b17a:	46a8      	mov	r8, r5
 800b17c:	f04f 0b00 	mov.w	fp, #0
 800b180:	f8b9 c000 	ldrh.w	ip, [r9]
 800b184:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b188:	fb0a 440c 	mla	r4, sl, ip, r4
 800b18c:	445c      	add	r4, fp
 800b18e:	46c4      	mov	ip, r8
 800b190:	b29b      	uxth	r3, r3
 800b192:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b196:	f84c 3b04 	str.w	r3, [ip], #4
 800b19a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b19e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b1a2:	0c1b      	lsrs	r3, r3, #16
 800b1a4:	fb0a b303 	mla	r3, sl, r3, fp
 800b1a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b1ac:	454f      	cmp	r7, r9
 800b1ae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b1b2:	d805      	bhi.n	800b1c0 <__multiply+0x124>
 800b1b4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b1b8:	3504      	adds	r5, #4
 800b1ba:	e79b      	b.n	800b0f4 <__multiply+0x58>
 800b1bc:	46d4      	mov	ip, sl
 800b1be:	e7b3      	b.n	800b128 <__multiply+0x8c>
 800b1c0:	46e0      	mov	r8, ip
 800b1c2:	e7dd      	b.n	800b180 <__multiply+0xe4>
 800b1c4:	3e01      	subs	r6, #1
 800b1c6:	e799      	b.n	800b0fc <__multiply+0x60>

0800b1c8 <__pow5mult>:
 800b1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1cc:	4615      	mov	r5, r2
 800b1ce:	f012 0203 	ands.w	r2, r2, #3
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460f      	mov	r7, r1
 800b1d6:	d007      	beq.n	800b1e8 <__pow5mult+0x20>
 800b1d8:	3a01      	subs	r2, #1
 800b1da:	4c21      	ldr	r4, [pc, #132]	; (800b260 <__pow5mult+0x98>)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1e2:	f7ff fe8b 	bl	800aefc <__multadd>
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	10ad      	asrs	r5, r5, #2
 800b1ea:	d035      	beq.n	800b258 <__pow5mult+0x90>
 800b1ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ee:	b93c      	cbnz	r4, 800b200 <__pow5mult+0x38>
 800b1f0:	2010      	movs	r0, #16
 800b1f2:	f7ff fe13 	bl	800ae1c <malloc>
 800b1f6:	6270      	str	r0, [r6, #36]	; 0x24
 800b1f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1fc:	6004      	str	r4, [r0, #0]
 800b1fe:	60c4      	str	r4, [r0, #12]
 800b200:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b208:	b94c      	cbnz	r4, 800b21e <__pow5mult+0x56>
 800b20a:	f240 2171 	movw	r1, #625	; 0x271
 800b20e:	4630      	mov	r0, r6
 800b210:	f7ff ff3b 	bl	800b08a <__i2b>
 800b214:	2300      	movs	r3, #0
 800b216:	f8c8 0008 	str.w	r0, [r8, #8]
 800b21a:	4604      	mov	r4, r0
 800b21c:	6003      	str	r3, [r0, #0]
 800b21e:	f04f 0800 	mov.w	r8, #0
 800b222:	07eb      	lsls	r3, r5, #31
 800b224:	d50a      	bpl.n	800b23c <__pow5mult+0x74>
 800b226:	4639      	mov	r1, r7
 800b228:	4622      	mov	r2, r4
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7ff ff36 	bl	800b09c <__multiply>
 800b230:	4639      	mov	r1, r7
 800b232:	4681      	mov	r9, r0
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff fe4a 	bl	800aece <_Bfree>
 800b23a:	464f      	mov	r7, r9
 800b23c:	106d      	asrs	r5, r5, #1
 800b23e:	d00b      	beq.n	800b258 <__pow5mult+0x90>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	b938      	cbnz	r0, 800b254 <__pow5mult+0x8c>
 800b244:	4622      	mov	r2, r4
 800b246:	4621      	mov	r1, r4
 800b248:	4630      	mov	r0, r6
 800b24a:	f7ff ff27 	bl	800b09c <__multiply>
 800b24e:	6020      	str	r0, [r4, #0]
 800b250:	f8c0 8000 	str.w	r8, [r0]
 800b254:	4604      	mov	r4, r0
 800b256:	e7e4      	b.n	800b222 <__pow5mult+0x5a>
 800b258:	4638      	mov	r0, r7
 800b25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25e:	bf00      	nop
 800b260:	0800be20 	.word	0x0800be20

0800b264 <__lshift>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	460c      	mov	r4, r1
 800b26a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	6849      	ldr	r1, [r1, #4]
 800b272:	eb0a 0903 	add.w	r9, sl, r3
 800b276:	68a3      	ldr	r3, [r4, #8]
 800b278:	4607      	mov	r7, r0
 800b27a:	4616      	mov	r6, r2
 800b27c:	f109 0501 	add.w	r5, r9, #1
 800b280:	42ab      	cmp	r3, r5
 800b282:	db32      	blt.n	800b2ea <__lshift+0x86>
 800b284:	4638      	mov	r0, r7
 800b286:	f7ff fdee 	bl	800ae66 <_Balloc>
 800b28a:	2300      	movs	r3, #0
 800b28c:	4680      	mov	r8, r0
 800b28e:	f100 0114 	add.w	r1, r0, #20
 800b292:	461a      	mov	r2, r3
 800b294:	4553      	cmp	r3, sl
 800b296:	db2b      	blt.n	800b2f0 <__lshift+0x8c>
 800b298:	6920      	ldr	r0, [r4, #16]
 800b29a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b29e:	f104 0314 	add.w	r3, r4, #20
 800b2a2:	f016 021f 	ands.w	r2, r6, #31
 800b2a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2ae:	d025      	beq.n	800b2fc <__lshift+0x98>
 800b2b0:	f1c2 0e20 	rsb	lr, r2, #32
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	681e      	ldr	r6, [r3, #0]
 800b2b8:	468a      	mov	sl, r1
 800b2ba:	4096      	lsls	r6, r2
 800b2bc:	4330      	orrs	r0, r6
 800b2be:	f84a 0b04 	str.w	r0, [sl], #4
 800b2c2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b2c6:	459c      	cmp	ip, r3
 800b2c8:	fa20 f00e 	lsr.w	r0, r0, lr
 800b2cc:	d814      	bhi.n	800b2f8 <__lshift+0x94>
 800b2ce:	6048      	str	r0, [r1, #4]
 800b2d0:	b108      	cbz	r0, 800b2d6 <__lshift+0x72>
 800b2d2:	f109 0502 	add.w	r5, r9, #2
 800b2d6:	3d01      	subs	r5, #1
 800b2d8:	4638      	mov	r0, r7
 800b2da:	f8c8 5010 	str.w	r5, [r8, #16]
 800b2de:	4621      	mov	r1, r4
 800b2e0:	f7ff fdf5 	bl	800aece <_Bfree>
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	3101      	adds	r1, #1
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	e7c7      	b.n	800b280 <__lshift+0x1c>
 800b2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	e7cd      	b.n	800b294 <__lshift+0x30>
 800b2f8:	4651      	mov	r1, sl
 800b2fa:	e7dc      	b.n	800b2b6 <__lshift+0x52>
 800b2fc:	3904      	subs	r1, #4
 800b2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b302:	f841 2f04 	str.w	r2, [r1, #4]!
 800b306:	459c      	cmp	ip, r3
 800b308:	d8f9      	bhi.n	800b2fe <__lshift+0x9a>
 800b30a:	e7e4      	b.n	800b2d6 <__lshift+0x72>

0800b30c <__mcmp>:
 800b30c:	6903      	ldr	r3, [r0, #16]
 800b30e:	690a      	ldr	r2, [r1, #16]
 800b310:	1a9b      	subs	r3, r3, r2
 800b312:	b530      	push	{r4, r5, lr}
 800b314:	d10c      	bne.n	800b330 <__mcmp+0x24>
 800b316:	0092      	lsls	r2, r2, #2
 800b318:	3014      	adds	r0, #20
 800b31a:	3114      	adds	r1, #20
 800b31c:	1884      	adds	r4, r0, r2
 800b31e:	4411      	add	r1, r2
 800b320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b328:	4295      	cmp	r5, r2
 800b32a:	d003      	beq.n	800b334 <__mcmp+0x28>
 800b32c:	d305      	bcc.n	800b33a <__mcmp+0x2e>
 800b32e:	2301      	movs	r3, #1
 800b330:	4618      	mov	r0, r3
 800b332:	bd30      	pop	{r4, r5, pc}
 800b334:	42a0      	cmp	r0, r4
 800b336:	d3f3      	bcc.n	800b320 <__mcmp+0x14>
 800b338:	e7fa      	b.n	800b330 <__mcmp+0x24>
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
 800b33e:	e7f7      	b.n	800b330 <__mcmp+0x24>

0800b340 <__mdiff>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	460d      	mov	r5, r1
 800b346:	4607      	mov	r7, r0
 800b348:	4611      	mov	r1, r2
 800b34a:	4628      	mov	r0, r5
 800b34c:	4614      	mov	r4, r2
 800b34e:	f7ff ffdd 	bl	800b30c <__mcmp>
 800b352:	1e06      	subs	r6, r0, #0
 800b354:	d108      	bne.n	800b368 <__mdiff+0x28>
 800b356:	4631      	mov	r1, r6
 800b358:	4638      	mov	r0, r7
 800b35a:	f7ff fd84 	bl	800ae66 <_Balloc>
 800b35e:	2301      	movs	r3, #1
 800b360:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b368:	bfa4      	itt	ge
 800b36a:	4623      	movge	r3, r4
 800b36c:	462c      	movge	r4, r5
 800b36e:	4638      	mov	r0, r7
 800b370:	6861      	ldr	r1, [r4, #4]
 800b372:	bfa6      	itte	ge
 800b374:	461d      	movge	r5, r3
 800b376:	2600      	movge	r6, #0
 800b378:	2601      	movlt	r6, #1
 800b37a:	f7ff fd74 	bl	800ae66 <_Balloc>
 800b37e:	692b      	ldr	r3, [r5, #16]
 800b380:	60c6      	str	r6, [r0, #12]
 800b382:	6926      	ldr	r6, [r4, #16]
 800b384:	f105 0914 	add.w	r9, r5, #20
 800b388:	f104 0214 	add.w	r2, r4, #20
 800b38c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b390:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b394:	f100 0514 	add.w	r5, r0, #20
 800b398:	f04f 0e00 	mov.w	lr, #0
 800b39c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b3a0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b3a4:	fa1e f18a 	uxtah	r1, lr, sl
 800b3a8:	b2a3      	uxth	r3, r4
 800b3aa:	1ac9      	subs	r1, r1, r3
 800b3ac:	0c23      	lsrs	r3, r4, #16
 800b3ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b3b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b3b6:	b289      	uxth	r1, r1
 800b3b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b3bc:	45c8      	cmp	r8, r9
 800b3be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b3c2:	4694      	mov	ip, r2
 800b3c4:	f845 3b04 	str.w	r3, [r5], #4
 800b3c8:	d8e8      	bhi.n	800b39c <__mdiff+0x5c>
 800b3ca:	45bc      	cmp	ip, r7
 800b3cc:	d304      	bcc.n	800b3d8 <__mdiff+0x98>
 800b3ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b3d2:	b183      	cbz	r3, 800b3f6 <__mdiff+0xb6>
 800b3d4:	6106      	str	r6, [r0, #16]
 800b3d6:	e7c5      	b.n	800b364 <__mdiff+0x24>
 800b3d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b3dc:	fa1e f381 	uxtah	r3, lr, r1
 800b3e0:	141a      	asrs	r2, r3, #16
 800b3e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b3f0:	f845 3b04 	str.w	r3, [r5], #4
 800b3f4:	e7e9      	b.n	800b3ca <__mdiff+0x8a>
 800b3f6:	3e01      	subs	r6, #1
 800b3f8:	e7e9      	b.n	800b3ce <__mdiff+0x8e>
	...

0800b3fc <__ulp>:
 800b3fc:	4b12      	ldr	r3, [pc, #72]	; (800b448 <__ulp+0x4c>)
 800b3fe:	ee10 2a90 	vmov	r2, s1
 800b402:	401a      	ands	r2, r3
 800b404:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	dd04      	ble.n	800b416 <__ulp+0x1a>
 800b40c:	2000      	movs	r0, #0
 800b40e:	4619      	mov	r1, r3
 800b410:	ec41 0b10 	vmov	d0, r0, r1
 800b414:	4770      	bx	lr
 800b416:	425b      	negs	r3, r3
 800b418:	151b      	asrs	r3, r3, #20
 800b41a:	2b13      	cmp	r3, #19
 800b41c:	f04f 0000 	mov.w	r0, #0
 800b420:	f04f 0100 	mov.w	r1, #0
 800b424:	dc04      	bgt.n	800b430 <__ulp+0x34>
 800b426:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b42a:	fa42 f103 	asr.w	r1, r2, r3
 800b42e:	e7ef      	b.n	800b410 <__ulp+0x14>
 800b430:	3b14      	subs	r3, #20
 800b432:	2b1e      	cmp	r3, #30
 800b434:	f04f 0201 	mov.w	r2, #1
 800b438:	bfda      	itte	le
 800b43a:	f1c3 031f 	rsble	r3, r3, #31
 800b43e:	fa02 f303 	lslle.w	r3, r2, r3
 800b442:	4613      	movgt	r3, r2
 800b444:	4618      	mov	r0, r3
 800b446:	e7e3      	b.n	800b410 <__ulp+0x14>
 800b448:	7ff00000 	.word	0x7ff00000

0800b44c <__b2d>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	6905      	ldr	r5, [r0, #16]
 800b450:	f100 0714 	add.w	r7, r0, #20
 800b454:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b458:	1f2e      	subs	r6, r5, #4
 800b45a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b45e:	4620      	mov	r0, r4
 800b460:	f7ff fdc5 	bl	800afee <__hi0bits>
 800b464:	f1c0 0320 	rsb	r3, r0, #32
 800b468:	280a      	cmp	r0, #10
 800b46a:	600b      	str	r3, [r1, #0]
 800b46c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b4e4 <__b2d+0x98>
 800b470:	dc14      	bgt.n	800b49c <__b2d+0x50>
 800b472:	f1c0 0e0b 	rsb	lr, r0, #11
 800b476:	fa24 f10e 	lsr.w	r1, r4, lr
 800b47a:	42b7      	cmp	r7, r6
 800b47c:	ea41 030c 	orr.w	r3, r1, ip
 800b480:	bf34      	ite	cc
 800b482:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b486:	2100      	movcs	r1, #0
 800b488:	3015      	adds	r0, #21
 800b48a:	fa04 f000 	lsl.w	r0, r4, r0
 800b48e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b492:	ea40 0201 	orr.w	r2, r0, r1
 800b496:	ec43 2b10 	vmov	d0, r2, r3
 800b49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b49c:	42b7      	cmp	r7, r6
 800b49e:	bf3a      	itte	cc
 800b4a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4a8:	2100      	movcs	r1, #0
 800b4aa:	380b      	subs	r0, #11
 800b4ac:	d015      	beq.n	800b4da <__b2d+0x8e>
 800b4ae:	4084      	lsls	r4, r0
 800b4b0:	f1c0 0520 	rsb	r5, r0, #32
 800b4b4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b4b8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b4bc:	42be      	cmp	r6, r7
 800b4be:	fa21 fc05 	lsr.w	ip, r1, r5
 800b4c2:	ea44 030c 	orr.w	r3, r4, ip
 800b4c6:	bf8c      	ite	hi
 800b4c8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b4cc:	2400      	movls	r4, #0
 800b4ce:	fa01 f000 	lsl.w	r0, r1, r0
 800b4d2:	40ec      	lsrs	r4, r5
 800b4d4:	ea40 0204 	orr.w	r2, r0, r4
 800b4d8:	e7dd      	b.n	800b496 <__b2d+0x4a>
 800b4da:	ea44 030c 	orr.w	r3, r4, ip
 800b4de:	460a      	mov	r2, r1
 800b4e0:	e7d9      	b.n	800b496 <__b2d+0x4a>
 800b4e2:	bf00      	nop
 800b4e4:	3ff00000 	.word	0x3ff00000

0800b4e8 <__d2b>:
 800b4e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4ec:	460e      	mov	r6, r1
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	ec59 8b10 	vmov	r8, r9, d0
 800b4f4:	4615      	mov	r5, r2
 800b4f6:	f7ff fcb6 	bl	800ae66 <_Balloc>
 800b4fa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b4fe:	4607      	mov	r7, r0
 800b500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b504:	bb34      	cbnz	r4, 800b554 <__d2b+0x6c>
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	f1b8 0300 	subs.w	r3, r8, #0
 800b50c:	d027      	beq.n	800b55e <__d2b+0x76>
 800b50e:	a802      	add	r0, sp, #8
 800b510:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b514:	f7ff fd8a 	bl	800b02c <__lo0bits>
 800b518:	9900      	ldr	r1, [sp, #0]
 800b51a:	b1f0      	cbz	r0, 800b55a <__d2b+0x72>
 800b51c:	9a01      	ldr	r2, [sp, #4]
 800b51e:	f1c0 0320 	rsb	r3, r0, #32
 800b522:	fa02 f303 	lsl.w	r3, r2, r3
 800b526:	430b      	orrs	r3, r1
 800b528:	40c2      	lsrs	r2, r0
 800b52a:	617b      	str	r3, [r7, #20]
 800b52c:	9201      	str	r2, [sp, #4]
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	2b00      	cmp	r3, #0
 800b534:	bf14      	ite	ne
 800b536:	2102      	movne	r1, #2
 800b538:	2101      	moveq	r1, #1
 800b53a:	6139      	str	r1, [r7, #16]
 800b53c:	b1c4      	cbz	r4, 800b570 <__d2b+0x88>
 800b53e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b542:	4404      	add	r4, r0
 800b544:	6034      	str	r4, [r6, #0]
 800b546:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b54a:	6028      	str	r0, [r5, #0]
 800b54c:	4638      	mov	r0, r7
 800b54e:	b003      	add	sp, #12
 800b550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b558:	e7d5      	b.n	800b506 <__d2b+0x1e>
 800b55a:	6179      	str	r1, [r7, #20]
 800b55c:	e7e7      	b.n	800b52e <__d2b+0x46>
 800b55e:	a801      	add	r0, sp, #4
 800b560:	f7ff fd64 	bl	800b02c <__lo0bits>
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	2101      	movs	r1, #1
 800b56a:	6139      	str	r1, [r7, #16]
 800b56c:	3020      	adds	r0, #32
 800b56e:	e7e5      	b.n	800b53c <__d2b+0x54>
 800b570:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b578:	6030      	str	r0, [r6, #0]
 800b57a:	6918      	ldr	r0, [r3, #16]
 800b57c:	f7ff fd37 	bl	800afee <__hi0bits>
 800b580:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b584:	e7e1      	b.n	800b54a <__d2b+0x62>

0800b586 <__ratio>:
 800b586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58a:	4688      	mov	r8, r1
 800b58c:	4669      	mov	r1, sp
 800b58e:	4681      	mov	r9, r0
 800b590:	f7ff ff5c 	bl	800b44c <__b2d>
 800b594:	a901      	add	r1, sp, #4
 800b596:	4640      	mov	r0, r8
 800b598:	ec57 6b10 	vmov	r6, r7, d0
 800b59c:	f7ff ff56 	bl	800b44c <__b2d>
 800b5a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b5a8:	eba3 0c02 	sub.w	ip, r3, r2
 800b5ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5b0:	1a9b      	subs	r3, r3, r2
 800b5b2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b5b6:	ec5b ab10 	vmov	sl, fp, d0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	bfce      	itee	gt
 800b5be:	463a      	movgt	r2, r7
 800b5c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b5c4:	465a      	movle	r2, fp
 800b5c6:	4659      	mov	r1, fp
 800b5c8:	463d      	mov	r5, r7
 800b5ca:	bfd4      	ite	le
 800b5cc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b5d0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	ee10 2a10 	vmov	r2, s0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4629      	mov	r1, r5
 800b5de:	f7f5 f935 	bl	800084c <__aeabi_ddiv>
 800b5e2:	ec41 0b10 	vmov	d0, r0, r1
 800b5e6:	b003      	add	sp, #12
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5ec <__copybits>:
 800b5ec:	3901      	subs	r1, #1
 800b5ee:	b510      	push	{r4, lr}
 800b5f0:	1149      	asrs	r1, r1, #5
 800b5f2:	6914      	ldr	r4, [r2, #16]
 800b5f4:	3101      	adds	r1, #1
 800b5f6:	f102 0314 	add.w	r3, r2, #20
 800b5fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b5fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b602:	42a3      	cmp	r3, r4
 800b604:	4602      	mov	r2, r0
 800b606:	d303      	bcc.n	800b610 <__copybits+0x24>
 800b608:	2300      	movs	r3, #0
 800b60a:	428a      	cmp	r2, r1
 800b60c:	d305      	bcc.n	800b61a <__copybits+0x2e>
 800b60e:	bd10      	pop	{r4, pc}
 800b610:	f853 2b04 	ldr.w	r2, [r3], #4
 800b614:	f840 2b04 	str.w	r2, [r0], #4
 800b618:	e7f3      	b.n	800b602 <__copybits+0x16>
 800b61a:	f842 3b04 	str.w	r3, [r2], #4
 800b61e:	e7f4      	b.n	800b60a <__copybits+0x1e>

0800b620 <__any_on>:
 800b620:	f100 0214 	add.w	r2, r0, #20
 800b624:	6900      	ldr	r0, [r0, #16]
 800b626:	114b      	asrs	r3, r1, #5
 800b628:	4298      	cmp	r0, r3
 800b62a:	b510      	push	{r4, lr}
 800b62c:	db11      	blt.n	800b652 <__any_on+0x32>
 800b62e:	dd0a      	ble.n	800b646 <__any_on+0x26>
 800b630:	f011 011f 	ands.w	r1, r1, #31
 800b634:	d007      	beq.n	800b646 <__any_on+0x26>
 800b636:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b63a:	fa24 f001 	lsr.w	r0, r4, r1
 800b63e:	fa00 f101 	lsl.w	r1, r0, r1
 800b642:	428c      	cmp	r4, r1
 800b644:	d10b      	bne.n	800b65e <__any_on+0x3e>
 800b646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d803      	bhi.n	800b656 <__any_on+0x36>
 800b64e:	2000      	movs	r0, #0
 800b650:	bd10      	pop	{r4, pc}
 800b652:	4603      	mov	r3, r0
 800b654:	e7f7      	b.n	800b646 <__any_on+0x26>
 800b656:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b65a:	2900      	cmp	r1, #0
 800b65c:	d0f5      	beq.n	800b64a <__any_on+0x2a>
 800b65e:	2001      	movs	r0, #1
 800b660:	e7f6      	b.n	800b650 <__any_on+0x30>

0800b662 <_calloc_r>:
 800b662:	b538      	push	{r3, r4, r5, lr}
 800b664:	fb02 f401 	mul.w	r4, r2, r1
 800b668:	4621      	mov	r1, r4
 800b66a:	f000 f857 	bl	800b71c <_malloc_r>
 800b66e:	4605      	mov	r5, r0
 800b670:	b118      	cbz	r0, 800b67a <_calloc_r+0x18>
 800b672:	4622      	mov	r2, r4
 800b674:	2100      	movs	r1, #0
 800b676:	f7fc fd35 	bl	80080e4 <memset>
 800b67a:	4628      	mov	r0, r5
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b680 <_free_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4605      	mov	r5, r0
 800b684:	2900      	cmp	r1, #0
 800b686:	d045      	beq.n	800b714 <_free_r+0x94>
 800b688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b68c:	1f0c      	subs	r4, r1, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bfb8      	it	lt
 800b692:	18e4      	addlt	r4, r4, r3
 800b694:	f000 fa36 	bl	800bb04 <__malloc_lock>
 800b698:	4a1f      	ldr	r2, [pc, #124]	; (800b718 <_free_r+0x98>)
 800b69a:	6813      	ldr	r3, [r2, #0]
 800b69c:	4610      	mov	r0, r2
 800b69e:	b933      	cbnz	r3, 800b6ae <_free_r+0x2e>
 800b6a0:	6063      	str	r3, [r4, #4]
 800b6a2:	6014      	str	r4, [r2, #0]
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6aa:	f000 ba2c 	b.w	800bb06 <__malloc_unlock>
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	d90c      	bls.n	800b6cc <_free_r+0x4c>
 800b6b2:	6821      	ldr	r1, [r4, #0]
 800b6b4:	1862      	adds	r2, r4, r1
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	bf04      	itt	eq
 800b6ba:	681a      	ldreq	r2, [r3, #0]
 800b6bc:	685b      	ldreq	r3, [r3, #4]
 800b6be:	6063      	str	r3, [r4, #4]
 800b6c0:	bf04      	itt	eq
 800b6c2:	1852      	addeq	r2, r2, r1
 800b6c4:	6022      	streq	r2, [r4, #0]
 800b6c6:	6004      	str	r4, [r0, #0]
 800b6c8:	e7ec      	b.n	800b6a4 <_free_r+0x24>
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	b10a      	cbz	r2, 800b6d4 <_free_r+0x54>
 800b6d0:	42a2      	cmp	r2, r4
 800b6d2:	d9fa      	bls.n	800b6ca <_free_r+0x4a>
 800b6d4:	6819      	ldr	r1, [r3, #0]
 800b6d6:	1858      	adds	r0, r3, r1
 800b6d8:	42a0      	cmp	r0, r4
 800b6da:	d10b      	bne.n	800b6f4 <_free_r+0x74>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	4401      	add	r1, r0
 800b6e0:	1858      	adds	r0, r3, r1
 800b6e2:	4282      	cmp	r2, r0
 800b6e4:	6019      	str	r1, [r3, #0]
 800b6e6:	d1dd      	bne.n	800b6a4 <_free_r+0x24>
 800b6e8:	6810      	ldr	r0, [r2, #0]
 800b6ea:	6852      	ldr	r2, [r2, #4]
 800b6ec:	605a      	str	r2, [r3, #4]
 800b6ee:	4401      	add	r1, r0
 800b6f0:	6019      	str	r1, [r3, #0]
 800b6f2:	e7d7      	b.n	800b6a4 <_free_r+0x24>
 800b6f4:	d902      	bls.n	800b6fc <_free_r+0x7c>
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	602b      	str	r3, [r5, #0]
 800b6fa:	e7d3      	b.n	800b6a4 <_free_r+0x24>
 800b6fc:	6820      	ldr	r0, [r4, #0]
 800b6fe:	1821      	adds	r1, r4, r0
 800b700:	428a      	cmp	r2, r1
 800b702:	bf04      	itt	eq
 800b704:	6811      	ldreq	r1, [r2, #0]
 800b706:	6852      	ldreq	r2, [r2, #4]
 800b708:	6062      	str	r2, [r4, #4]
 800b70a:	bf04      	itt	eq
 800b70c:	1809      	addeq	r1, r1, r0
 800b70e:	6021      	streq	r1, [r4, #0]
 800b710:	605c      	str	r4, [r3, #4]
 800b712:	e7c7      	b.n	800b6a4 <_free_r+0x24>
 800b714:	bd38      	pop	{r3, r4, r5, pc}
 800b716:	bf00      	nop
 800b718:	20000238 	.word	0x20000238

0800b71c <_malloc_r>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	1ccd      	adds	r5, r1, #3
 800b720:	f025 0503 	bic.w	r5, r5, #3
 800b724:	3508      	adds	r5, #8
 800b726:	2d0c      	cmp	r5, #12
 800b728:	bf38      	it	cc
 800b72a:	250c      	movcc	r5, #12
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	4606      	mov	r6, r0
 800b730:	db01      	blt.n	800b736 <_malloc_r+0x1a>
 800b732:	42a9      	cmp	r1, r5
 800b734:	d903      	bls.n	800b73e <_malloc_r+0x22>
 800b736:	230c      	movs	r3, #12
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	2000      	movs	r0, #0
 800b73c:	bd70      	pop	{r4, r5, r6, pc}
 800b73e:	f000 f9e1 	bl	800bb04 <__malloc_lock>
 800b742:	4a21      	ldr	r2, [pc, #132]	; (800b7c8 <_malloc_r+0xac>)
 800b744:	6814      	ldr	r4, [r2, #0]
 800b746:	4621      	mov	r1, r4
 800b748:	b991      	cbnz	r1, 800b770 <_malloc_r+0x54>
 800b74a:	4c20      	ldr	r4, [pc, #128]	; (800b7cc <_malloc_r+0xb0>)
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	b91b      	cbnz	r3, 800b758 <_malloc_r+0x3c>
 800b750:	4630      	mov	r0, r6
 800b752:	f000 f98f 	bl	800ba74 <_sbrk_r>
 800b756:	6020      	str	r0, [r4, #0]
 800b758:	4629      	mov	r1, r5
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 f98a 	bl	800ba74 <_sbrk_r>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d124      	bne.n	800b7ae <_malloc_r+0x92>
 800b764:	230c      	movs	r3, #12
 800b766:	6033      	str	r3, [r6, #0]
 800b768:	4630      	mov	r0, r6
 800b76a:	f000 f9cc 	bl	800bb06 <__malloc_unlock>
 800b76e:	e7e4      	b.n	800b73a <_malloc_r+0x1e>
 800b770:	680b      	ldr	r3, [r1, #0]
 800b772:	1b5b      	subs	r3, r3, r5
 800b774:	d418      	bmi.n	800b7a8 <_malloc_r+0x8c>
 800b776:	2b0b      	cmp	r3, #11
 800b778:	d90f      	bls.n	800b79a <_malloc_r+0x7e>
 800b77a:	600b      	str	r3, [r1, #0]
 800b77c:	50cd      	str	r5, [r1, r3]
 800b77e:	18cc      	adds	r4, r1, r3
 800b780:	4630      	mov	r0, r6
 800b782:	f000 f9c0 	bl	800bb06 <__malloc_unlock>
 800b786:	f104 000b 	add.w	r0, r4, #11
 800b78a:	1d23      	adds	r3, r4, #4
 800b78c:	f020 0007 	bic.w	r0, r0, #7
 800b790:	1ac3      	subs	r3, r0, r3
 800b792:	d0d3      	beq.n	800b73c <_malloc_r+0x20>
 800b794:	425a      	negs	r2, r3
 800b796:	50e2      	str	r2, [r4, r3]
 800b798:	e7d0      	b.n	800b73c <_malloc_r+0x20>
 800b79a:	428c      	cmp	r4, r1
 800b79c:	684b      	ldr	r3, [r1, #4]
 800b79e:	bf16      	itet	ne
 800b7a0:	6063      	strne	r3, [r4, #4]
 800b7a2:	6013      	streq	r3, [r2, #0]
 800b7a4:	460c      	movne	r4, r1
 800b7a6:	e7eb      	b.n	800b780 <_malloc_r+0x64>
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	6849      	ldr	r1, [r1, #4]
 800b7ac:	e7cc      	b.n	800b748 <_malloc_r+0x2c>
 800b7ae:	1cc4      	adds	r4, r0, #3
 800b7b0:	f024 0403 	bic.w	r4, r4, #3
 800b7b4:	42a0      	cmp	r0, r4
 800b7b6:	d005      	beq.n	800b7c4 <_malloc_r+0xa8>
 800b7b8:	1a21      	subs	r1, r4, r0
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f000 f95a 	bl	800ba74 <_sbrk_r>
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	d0cf      	beq.n	800b764 <_malloc_r+0x48>
 800b7c4:	6025      	str	r5, [r4, #0]
 800b7c6:	e7db      	b.n	800b780 <_malloc_r+0x64>
 800b7c8:	20000238 	.word	0x20000238
 800b7cc:	2000023c 	.word	0x2000023c

0800b7d0 <__ssputs_r>:
 800b7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	688e      	ldr	r6, [r1, #8]
 800b7d6:	429e      	cmp	r6, r3
 800b7d8:	4682      	mov	sl, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	4690      	mov	r8, r2
 800b7de:	4699      	mov	r9, r3
 800b7e0:	d837      	bhi.n	800b852 <__ssputs_r+0x82>
 800b7e2:	898a      	ldrh	r2, [r1, #12]
 800b7e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7e8:	d031      	beq.n	800b84e <__ssputs_r+0x7e>
 800b7ea:	6825      	ldr	r5, [r4, #0]
 800b7ec:	6909      	ldr	r1, [r1, #16]
 800b7ee:	1a6f      	subs	r7, r5, r1
 800b7f0:	6965      	ldr	r5, [r4, #20]
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b7fc:	f109 0301 	add.w	r3, r9, #1
 800b800:	443b      	add	r3, r7
 800b802:	429d      	cmp	r5, r3
 800b804:	bf38      	it	cc
 800b806:	461d      	movcc	r5, r3
 800b808:	0553      	lsls	r3, r2, #21
 800b80a:	d530      	bpl.n	800b86e <__ssputs_r+0x9e>
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7ff ff85 	bl	800b71c <_malloc_r>
 800b812:	4606      	mov	r6, r0
 800b814:	b950      	cbnz	r0, 800b82c <__ssputs_r+0x5c>
 800b816:	230c      	movs	r3, #12
 800b818:	f8ca 3000 	str.w	r3, [sl]
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82c:	463a      	mov	r2, r7
 800b82e:	6921      	ldr	r1, [r4, #16]
 800b830:	f7ff fb0e 	bl	800ae50 <memcpy>
 800b834:	89a3      	ldrh	r3, [r4, #12]
 800b836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b83e:	81a3      	strh	r3, [r4, #12]
 800b840:	6126      	str	r6, [r4, #16]
 800b842:	6165      	str	r5, [r4, #20]
 800b844:	443e      	add	r6, r7
 800b846:	1bed      	subs	r5, r5, r7
 800b848:	6026      	str	r6, [r4, #0]
 800b84a:	60a5      	str	r5, [r4, #8]
 800b84c:	464e      	mov	r6, r9
 800b84e:	454e      	cmp	r6, r9
 800b850:	d900      	bls.n	800b854 <__ssputs_r+0x84>
 800b852:	464e      	mov	r6, r9
 800b854:	4632      	mov	r2, r6
 800b856:	4641      	mov	r1, r8
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	f000 f93a 	bl	800bad2 <memmove>
 800b85e:	68a3      	ldr	r3, [r4, #8]
 800b860:	1b9b      	subs	r3, r3, r6
 800b862:	60a3      	str	r3, [r4, #8]
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	441e      	add	r6, r3
 800b868:	6026      	str	r6, [r4, #0]
 800b86a:	2000      	movs	r0, #0
 800b86c:	e7dc      	b.n	800b828 <__ssputs_r+0x58>
 800b86e:	462a      	mov	r2, r5
 800b870:	f000 f94a 	bl	800bb08 <_realloc_r>
 800b874:	4606      	mov	r6, r0
 800b876:	2800      	cmp	r0, #0
 800b878:	d1e2      	bne.n	800b840 <__ssputs_r+0x70>
 800b87a:	6921      	ldr	r1, [r4, #16]
 800b87c:	4650      	mov	r0, sl
 800b87e:	f7ff feff 	bl	800b680 <_free_r>
 800b882:	e7c8      	b.n	800b816 <__ssputs_r+0x46>

0800b884 <_svfiprintf_r>:
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	461d      	mov	r5, r3
 800b88a:	898b      	ldrh	r3, [r1, #12]
 800b88c:	061f      	lsls	r7, r3, #24
 800b88e:	b09d      	sub	sp, #116	; 0x74
 800b890:	4680      	mov	r8, r0
 800b892:	460c      	mov	r4, r1
 800b894:	4616      	mov	r6, r2
 800b896:	d50f      	bpl.n	800b8b8 <_svfiprintf_r+0x34>
 800b898:	690b      	ldr	r3, [r1, #16]
 800b89a:	b96b      	cbnz	r3, 800b8b8 <_svfiprintf_r+0x34>
 800b89c:	2140      	movs	r1, #64	; 0x40
 800b89e:	f7ff ff3d 	bl	800b71c <_malloc_r>
 800b8a2:	6020      	str	r0, [r4, #0]
 800b8a4:	6120      	str	r0, [r4, #16]
 800b8a6:	b928      	cbnz	r0, 800b8b4 <_svfiprintf_r+0x30>
 800b8a8:	230c      	movs	r3, #12
 800b8aa:	f8c8 3000 	str.w	r3, [r8]
 800b8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b2:	e0c8      	b.n	800ba46 <_svfiprintf_r+0x1c2>
 800b8b4:	2340      	movs	r3, #64	; 0x40
 800b8b6:	6163      	str	r3, [r4, #20]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	2320      	movs	r3, #32
 800b8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8c2:	2330      	movs	r3, #48	; 0x30
 800b8c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c8:	9503      	str	r5, [sp, #12]
 800b8ca:	f04f 0b01 	mov.w	fp, #1
 800b8ce:	4637      	mov	r7, r6
 800b8d0:	463d      	mov	r5, r7
 800b8d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b8d6:	b10b      	cbz	r3, 800b8dc <_svfiprintf_r+0x58>
 800b8d8:	2b25      	cmp	r3, #37	; 0x25
 800b8da:	d13e      	bne.n	800b95a <_svfiprintf_r+0xd6>
 800b8dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b8e0:	d00b      	beq.n	800b8fa <_svfiprintf_r+0x76>
 800b8e2:	4653      	mov	r3, sl
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	f7ff ff71 	bl	800b7d0 <__ssputs_r>
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f000 80a4 	beq.w	800ba3c <_svfiprintf_r+0x1b8>
 800b8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f6:	4453      	add	r3, sl
 800b8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8fa:	783b      	ldrb	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 809d 	beq.w	800ba3c <_svfiprintf_r+0x1b8>
 800b902:	2300      	movs	r3, #0
 800b904:	f04f 32ff 	mov.w	r2, #4294967295
 800b908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b90c:	9304      	str	r3, [sp, #16]
 800b90e:	9307      	str	r3, [sp, #28]
 800b910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b914:	931a      	str	r3, [sp, #104]	; 0x68
 800b916:	462f      	mov	r7, r5
 800b918:	2205      	movs	r2, #5
 800b91a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b91e:	4850      	ldr	r0, [pc, #320]	; (800ba60 <_svfiprintf_r+0x1dc>)
 800b920:	f7f4 fc5e 	bl	80001e0 <memchr>
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	b9d0      	cbnz	r0, 800b95e <_svfiprintf_r+0xda>
 800b928:	06d9      	lsls	r1, r3, #27
 800b92a:	bf44      	itt	mi
 800b92c:	2220      	movmi	r2, #32
 800b92e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b932:	071a      	lsls	r2, r3, #28
 800b934:	bf44      	itt	mi
 800b936:	222b      	movmi	r2, #43	; 0x2b
 800b938:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b93c:	782a      	ldrb	r2, [r5, #0]
 800b93e:	2a2a      	cmp	r2, #42	; 0x2a
 800b940:	d015      	beq.n	800b96e <_svfiprintf_r+0xea>
 800b942:	9a07      	ldr	r2, [sp, #28]
 800b944:	462f      	mov	r7, r5
 800b946:	2000      	movs	r0, #0
 800b948:	250a      	movs	r5, #10
 800b94a:	4639      	mov	r1, r7
 800b94c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b950:	3b30      	subs	r3, #48	; 0x30
 800b952:	2b09      	cmp	r3, #9
 800b954:	d94d      	bls.n	800b9f2 <_svfiprintf_r+0x16e>
 800b956:	b1b8      	cbz	r0, 800b988 <_svfiprintf_r+0x104>
 800b958:	e00f      	b.n	800b97a <_svfiprintf_r+0xf6>
 800b95a:	462f      	mov	r7, r5
 800b95c:	e7b8      	b.n	800b8d0 <_svfiprintf_r+0x4c>
 800b95e:	4a40      	ldr	r2, [pc, #256]	; (800ba60 <_svfiprintf_r+0x1dc>)
 800b960:	1a80      	subs	r0, r0, r2
 800b962:	fa0b f000 	lsl.w	r0, fp, r0
 800b966:	4318      	orrs	r0, r3
 800b968:	9004      	str	r0, [sp, #16]
 800b96a:	463d      	mov	r5, r7
 800b96c:	e7d3      	b.n	800b916 <_svfiprintf_r+0x92>
 800b96e:	9a03      	ldr	r2, [sp, #12]
 800b970:	1d11      	adds	r1, r2, #4
 800b972:	6812      	ldr	r2, [r2, #0]
 800b974:	9103      	str	r1, [sp, #12]
 800b976:	2a00      	cmp	r2, #0
 800b978:	db01      	blt.n	800b97e <_svfiprintf_r+0xfa>
 800b97a:	9207      	str	r2, [sp, #28]
 800b97c:	e004      	b.n	800b988 <_svfiprintf_r+0x104>
 800b97e:	4252      	negs	r2, r2
 800b980:	f043 0302 	orr.w	r3, r3, #2
 800b984:	9207      	str	r2, [sp, #28]
 800b986:	9304      	str	r3, [sp, #16]
 800b988:	783b      	ldrb	r3, [r7, #0]
 800b98a:	2b2e      	cmp	r3, #46	; 0x2e
 800b98c:	d10c      	bne.n	800b9a8 <_svfiprintf_r+0x124>
 800b98e:	787b      	ldrb	r3, [r7, #1]
 800b990:	2b2a      	cmp	r3, #42	; 0x2a
 800b992:	d133      	bne.n	800b9fc <_svfiprintf_r+0x178>
 800b994:	9b03      	ldr	r3, [sp, #12]
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	9203      	str	r2, [sp, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	bfb8      	it	lt
 800b9a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9a4:	3702      	adds	r7, #2
 800b9a6:	9305      	str	r3, [sp, #20]
 800b9a8:	4d2e      	ldr	r5, [pc, #184]	; (800ba64 <_svfiprintf_r+0x1e0>)
 800b9aa:	7839      	ldrb	r1, [r7, #0]
 800b9ac:	2203      	movs	r2, #3
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f7f4 fc16 	bl	80001e0 <memchr>
 800b9b4:	b138      	cbz	r0, 800b9c6 <_svfiprintf_r+0x142>
 800b9b6:	2340      	movs	r3, #64	; 0x40
 800b9b8:	1b40      	subs	r0, r0, r5
 800b9ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b9be:	9b04      	ldr	r3, [sp, #16]
 800b9c0:	4303      	orrs	r3, r0
 800b9c2:	3701      	adds	r7, #1
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	7839      	ldrb	r1, [r7, #0]
 800b9c8:	4827      	ldr	r0, [pc, #156]	; (800ba68 <_svfiprintf_r+0x1e4>)
 800b9ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ce:	2206      	movs	r2, #6
 800b9d0:	1c7e      	adds	r6, r7, #1
 800b9d2:	f7f4 fc05 	bl	80001e0 <memchr>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d038      	beq.n	800ba4c <_svfiprintf_r+0x1c8>
 800b9da:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <_svfiprintf_r+0x1e8>)
 800b9dc:	bb13      	cbnz	r3, 800ba24 <_svfiprintf_r+0x1a0>
 800b9de:	9b03      	ldr	r3, [sp, #12]
 800b9e0:	3307      	adds	r3, #7
 800b9e2:	f023 0307 	bic.w	r3, r3, #7
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	9303      	str	r3, [sp, #12]
 800b9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ec:	444b      	add	r3, r9
 800b9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f0:	e76d      	b.n	800b8ce <_svfiprintf_r+0x4a>
 800b9f2:	fb05 3202 	mla	r2, r5, r2, r3
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	e7a6      	b.n	800b94a <_svfiprintf_r+0xc6>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	3701      	adds	r7, #1
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	4619      	mov	r1, r3
 800ba04:	250a      	movs	r5, #10
 800ba06:	4638      	mov	r0, r7
 800ba08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba0c:	3a30      	subs	r2, #48	; 0x30
 800ba0e:	2a09      	cmp	r2, #9
 800ba10:	d903      	bls.n	800ba1a <_svfiprintf_r+0x196>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0c8      	beq.n	800b9a8 <_svfiprintf_r+0x124>
 800ba16:	9105      	str	r1, [sp, #20]
 800ba18:	e7c6      	b.n	800b9a8 <_svfiprintf_r+0x124>
 800ba1a:	fb05 2101 	mla	r1, r5, r1, r2
 800ba1e:	2301      	movs	r3, #1
 800ba20:	4607      	mov	r7, r0
 800ba22:	e7f0      	b.n	800ba06 <_svfiprintf_r+0x182>
 800ba24:	ab03      	add	r3, sp, #12
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4b11      	ldr	r3, [pc, #68]	; (800ba70 <_svfiprintf_r+0x1ec>)
 800ba2c:	a904      	add	r1, sp, #16
 800ba2e:	4640      	mov	r0, r8
 800ba30:	f7fc fbf4 	bl	800821c <_printf_float>
 800ba34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba38:	4681      	mov	r9, r0
 800ba3a:	d1d6      	bne.n	800b9ea <_svfiprintf_r+0x166>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	065b      	lsls	r3, r3, #25
 800ba40:	f53f af35 	bmi.w	800b8ae <_svfiprintf_r+0x2a>
 800ba44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba46:	b01d      	add	sp, #116	; 0x74
 800ba48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4c:	ab03      	add	r3, sp, #12
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	4622      	mov	r2, r4
 800ba52:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <_svfiprintf_r+0x1ec>)
 800ba54:	a904      	add	r1, sp, #16
 800ba56:	4640      	mov	r0, r8
 800ba58:	f7fc fe96 	bl	8008788 <_printf_i>
 800ba5c:	e7ea      	b.n	800ba34 <_svfiprintf_r+0x1b0>
 800ba5e:	bf00      	nop
 800ba60:	0800be2c 	.word	0x0800be2c
 800ba64:	0800be32 	.word	0x0800be32
 800ba68:	0800be36 	.word	0x0800be36
 800ba6c:	0800821d 	.word	0x0800821d
 800ba70:	0800b7d1 	.word	0x0800b7d1

0800ba74 <_sbrk_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4c06      	ldr	r4, [pc, #24]	; (800ba90 <_sbrk_r+0x1c>)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	f7f5 ff4a 	bl	8001918 <_sbrk>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_sbrk_r+0x1a>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_sbrk_r+0x1a>
 800ba8c:	602b      	str	r3, [r5, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20001438 	.word	0x20001438

0800ba94 <strncmp>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	b16a      	cbz	r2, 800bab4 <strncmp+0x20>
 800ba98:	3901      	subs	r1, #1
 800ba9a:	1884      	adds	r4, r0, r2
 800ba9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800baa0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d103      	bne.n	800bab0 <strncmp+0x1c>
 800baa8:	42a0      	cmp	r0, r4
 800baaa:	d001      	beq.n	800bab0 <strncmp+0x1c>
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1f5      	bne.n	800ba9c <strncmp+0x8>
 800bab0:	1a98      	subs	r0, r3, r2
 800bab2:	bd10      	pop	{r4, pc}
 800bab4:	4610      	mov	r0, r2
 800bab6:	e7fc      	b.n	800bab2 <strncmp+0x1e>

0800bab8 <__ascii_wctomb>:
 800bab8:	b149      	cbz	r1, 800bace <__ascii_wctomb+0x16>
 800baba:	2aff      	cmp	r2, #255	; 0xff
 800babc:	bf85      	ittet	hi
 800babe:	238a      	movhi	r3, #138	; 0x8a
 800bac0:	6003      	strhi	r3, [r0, #0]
 800bac2:	700a      	strbls	r2, [r1, #0]
 800bac4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bac8:	bf98      	it	ls
 800baca:	2001      	movls	r0, #1
 800bacc:	4770      	bx	lr
 800bace:	4608      	mov	r0, r1
 800bad0:	4770      	bx	lr

0800bad2 <memmove>:
 800bad2:	4288      	cmp	r0, r1
 800bad4:	b510      	push	{r4, lr}
 800bad6:	eb01 0302 	add.w	r3, r1, r2
 800bada:	d807      	bhi.n	800baec <memmove+0x1a>
 800badc:	1e42      	subs	r2, r0, #1
 800bade:	4299      	cmp	r1, r3
 800bae0:	d00a      	beq.n	800baf8 <memmove+0x26>
 800bae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bae6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800baea:	e7f8      	b.n	800bade <memmove+0xc>
 800baec:	4283      	cmp	r3, r0
 800baee:	d9f5      	bls.n	800badc <memmove+0xa>
 800baf0:	1881      	adds	r1, r0, r2
 800baf2:	1ad2      	subs	r2, r2, r3
 800baf4:	42d3      	cmn	r3, r2
 800baf6:	d100      	bne.n	800bafa <memmove+0x28>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bafe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bb02:	e7f7      	b.n	800baf4 <memmove+0x22>

0800bb04 <__malloc_lock>:
 800bb04:	4770      	bx	lr

0800bb06 <__malloc_unlock>:
 800bb06:	4770      	bx	lr

0800bb08 <_realloc_r>:
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0a:	4607      	mov	r7, r0
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	460e      	mov	r6, r1
 800bb10:	b921      	cbnz	r1, 800bb1c <_realloc_r+0x14>
 800bb12:	4611      	mov	r1, r2
 800bb14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb18:	f7ff be00 	b.w	800b71c <_malloc_r>
 800bb1c:	b922      	cbnz	r2, 800bb28 <_realloc_r+0x20>
 800bb1e:	f7ff fdaf 	bl	800b680 <_free_r>
 800bb22:	4625      	mov	r5, r4
 800bb24:	4628      	mov	r0, r5
 800bb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb28:	f000 f814 	bl	800bb54 <_malloc_usable_size_r>
 800bb2c:	42a0      	cmp	r0, r4
 800bb2e:	d20f      	bcs.n	800bb50 <_realloc_r+0x48>
 800bb30:	4621      	mov	r1, r4
 800bb32:	4638      	mov	r0, r7
 800bb34:	f7ff fdf2 	bl	800b71c <_malloc_r>
 800bb38:	4605      	mov	r5, r0
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d0f2      	beq.n	800bb24 <_realloc_r+0x1c>
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4622      	mov	r2, r4
 800bb42:	f7ff f985 	bl	800ae50 <memcpy>
 800bb46:	4631      	mov	r1, r6
 800bb48:	4638      	mov	r0, r7
 800bb4a:	f7ff fd99 	bl	800b680 <_free_r>
 800bb4e:	e7e9      	b.n	800bb24 <_realloc_r+0x1c>
 800bb50:	4635      	mov	r5, r6
 800bb52:	e7e7      	b.n	800bb24 <_realloc_r+0x1c>

0800bb54 <_malloc_usable_size_r>:
 800bb54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb58:	1f18      	subs	r0, r3, #4
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	bfbc      	itt	lt
 800bb5e:	580b      	ldrlt	r3, [r1, r0]
 800bb60:	18c0      	addlt	r0, r0, r3
 800bb62:	4770      	bx	lr

0800bb64 <_init>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_fini>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr
